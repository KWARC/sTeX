% \iffalse meta-comment
% A LaTeX Class and Package for the SMGloM Glossary
% Copyright (c) 2009 Michael Kohlhase, all rights reserved
%               this file is released under the
%               LaTeX Project Public License (LPPL)
%
% The original of this file is in the public repository at 
% http://github.com/KWARC/sTeX/
% \fi
%   
% \iffalse
%<package|cls>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<cls>\ProvidesClass{smglom}[2013/05/27 v0.1 Semantic Multilingual Glossary for Math]
%<sty>\ProvidesPackage{smglom}[2013/05/27 v0.1 Semantic Multilingual Glossary for Math]
%
%<*driver>
\documentclass{ltxdoc}
\usepackage{url,array,omdoc,omtext,float}
\usepackage[show]{ed}
\usepackage[hyperref=auto,style=alphabetic]{biblatex}
\addbibresource{kwarcpubs.bib}
\addbibresource{extpubs.bib}
\addbibresource{kwarccrossrefs.bib}
\addbibresource{extcrossrefs.bib}
\usepackage{stex-logo}
\usepackage{../ctangit}
\usepackage{hyperref}
\makeindex
\floatstyle{boxed}
\newfloat{exfig}{thp}{lop}
\floatname{exfig}{Example}
\def\tracissue#1{\cite{sTeX:online}, \hyperlink{hstp://trac.kwarc.info/sTeX/ticket/#1}{issue #1}}
\begin{document}\DocInput{smglom.dtx}\end{document}
%</driver>
% \fi
% 
%\iffalse\CheckSum{382}\fi
% 
% \changes{v0.1}{2013/12/17}{First Version}
% \changes{v0.1}{2014/2/17}{Renamed ad split into \texttt{smglom.sty} and \texttt{smglom.cls}}
%
% 
% \MakeShortVerb{\|}
%
% \def\omdoc{OMDoc}
% \def\latexml{{\LaTeX}ML}
% \title{{\texttt{smglom.cls/sty}}: Semantic Multilingual Glossary for Math}
%    \author{Michael Kohlhase\\
%            Jacobs University, Bremen\\
%            \url{http://kwarc.info/kohlhase}}
% \maketitle
%
% \begin{abstract}
%   The |smglom| package is part of the {\sTeX} collection, a version of {\TeX/\LaTeX}
%   that allows to markup {\TeX/\LaTeX} documents semantically without leaving the
%   document format, essentially turning {\TeX/\LaTeX} into a document format for
%   mathematical knowledge management (MKM).
%
%   This package supplies an infrastructure for writing {\omdoc} glossary entries. 
% \end{abstract}
%
%\tableofcontents\newpage
% 
%\begin{omgroup}[id=sec:STR]{Introduction}
%
% \end{omgroup}
% 
% \begin{omgroup}[id=sec:user]{The User Interface}\
% 
%
% \begin{omgroup}[id=sec:user:options]{Package and Class Options}
%   |smglom.cls| accepts all options of the |omdoc.cls| and |article.cls| and just passes
%   them on to these. 
% \end{omgroup}
% 
% \end{omgroup}
% 
% \StopEventually{\newpage\PrintIndex\newpage\PrintChanges\printbibliography}\newpage
%
% \begin{omgroup}[id=sec:impl:cls]{Implementation: The SMGloM Class}
%
% \begin{omgroup}[id=sec:impl:cls:options]{Class Options}
% To initialize the |smglom| class, we pass on all options to |omdoc.cls|
% 
%    \begin{macrocode}
%<*cls>
\DeclareOption*{\PassOptionsToClass{\CurrentOption}{omdoc}}
\ProcessOptions
%</cls>
%<*ltxml.cls|ltxml.sty>
# -*- CPERL -*-
package LaTeXML::Package::Pool;
use strict;
use warnings;
use LaTeXML::Package;

DeclareOption(undef,sub {PassOptions('article','cls',ToString(Digest(T_CS('\CurrentOption')))); });
ProcessOptions();
%</ltxml.cls|ltxml.sty>
%    \end{macrocode}
%
% We load |omdoc.cls|, and the desired packages. For the {\latexml} bindings, we make
% sure the right packages are loaded.
%
%    \begin{macrocode}
%<*cls>
\LoadClass{omdoc}
\RequirePackage{smglom}
%</cls>
%<*sty>
\RequirePackage{amstext}
\RequirePackage{modules}
\RequirePackage{dcm}
\RequirePackage{statements}
\RequirePackage{sproof}
\RequirePackage{cmath}
\RequirePackage[langfiles]{smultiling}
\RequirePackage{presentation}
\RequirePackage{amsfonts}
%</sty>
%<*ltxml.cls>
LoadClass('omdoc');
RequirePackage('smglom');
%</ltxml.cls>
%<*ltxml.sty>
RequirePackage('amstext');
RequirePackage('modules'); 
RequirePackage('dcm'); 
RequirePackage('statements');
RequirePackage('sproof'); 
RequirePackage('cmath');  
RequirePackage('smultiling-new');  
RequirePackage('presentation');
RequirePackage('amsfonts');
%</ltxml.sty>
%    \end{macrocode}
% \end{omgroup}
%
% \begin{omgroup}[id=sec:module-defs]{For Module Definitions} %
% \begin{macro}{gimport}
%   just a shortcut
%    \begin{macrocode}
%<*sty>
\newcommand\gimport[2][]{\def\@test{#1}%
\edef\mh@@repos{\mh@currentrepos}%
\ifx\@test\@empty\importmhmodule[repos=\mh@@repos,ext=tex,path=#2]{#2}%
\else\importmhmodule[repos=#1,ext=tex,path=#2]{#2}\fi
\mhcurrentrepos\mh@@repos\ignorespaces}
%</sty>
%<*ltxml.sty>
DefMacro('\gimport[]{}','\g@import[ext=tex,path=#2]{#1}{#2}');
DefConstructor('\g@import OptionalKeyVals:importmhmodule {}{}', 
  "<omdoc:imports from='?&GetKeyVal(#1,'load')(&canonical_omdoc_path(&GetKeyVal(#1,'load')))()\##2'/>",
  afterDigest => \&gimportI);
%    \end{macrocode}
% To make this work we need a sub that sets the respective values. 
%    \begin{macrocode}
 sub gimportI {
  my ($stomach,$whatsit) = @_;
  my $keyval = $whatsit->getArg(1);
  my $repos = ToString($whatsit->getArg(2));
  my $name = $whatsit->getArg(3);
  if ($repos) {
    $keyval->setValue('repos',$repos); }
  else {
    $keyval->setValue('repos',LookupValue('current_repos')); }
  # Mystery: Why does $whatsit->setArgs($keyval,$name) raise a warning for
  #          "odd numbers" in hash assignment? Workaround for now!
  $$whatsit{args}[1] = $name; # Intention: $whatsit->setArg(2,$name);
  undef $$whatsit{args}[2]; # Intention: $whatsit->deleteArg(3);
  importMHmoduleI($stomach,$whatsit);  
  return; }#$
%</ltxml.sty>
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{guse}
%   just a shortcut
%    \begin{macrocode}
%<*sty>
\newcommand\guse[2][]{\def\@test{#1}%
\edef\mh@@repos{\mh@currentrepos}%
\ifx\@test\@empty\usemhmodule[repos=\mh@@repos,ext=tex,path=#2]{#2}%
\else\usemhmodule[repos=#1,ext=tex,path=#2]{#2}\fi
\mhcurrentrepos\mh@@repos\ignorespaces}
%</sty>
%<*ltxml.sty>
DefMacro('\guse[]{}','\g@use[ext=tex,path=#2]{#1}{#2}');
DefConstructor('\g@use OptionalKeyVals:importmhmodule {} {}',
  "<omdoc:uses from='?&GetKeyVal(#1,'load')(&canonical_omdoc_path(&GetKeyVal(#1,'load')))()\##2'/>",
  afterDigest => \&gimportI);
%</ltxml.sty>
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{gadopt}
%   just a shortcut
%    \begin{macrocode}
%<*sty>
\newcommand\gadopt[2][]{\def\@test{#1}%
\edef\mh@@repos{\mh@currentrepos}%
\ifx\@test\@empty\adoptmhmodule[repos=\mh@@repos,ext=tex,path=#2]{#2}%
\else\adoptmhmodule[repos=#1,ext=tex,path=#2]{#2}\fi
\mhcurrentrepos\mh@@repos\ignorespaces}
%</sty>
%<*ltxml.sty>
DefMacro('\gadopt[]{}','\g@adopt[ext=tex,path=#2]{#1}{#2}');
DefConstructor('\g@adopt OptionalKeyVals:importmhmodule {} {}',
  "<omdoc:adopts from='?&GetKeyVal(#1,'load')(&canonical_omdoc_path(&GetKeyVal(#1,'load')))()\##2'/>",
  afterDigest => \&gimportI);
%</ltxml.sty>
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{*nym}
%    \begin{macrocode}
%<*sty>
\newcommand\hypernym[3][]{\if@importing\else\par\noindent #2 is a hypernym of #3\fi}
\newcommand\hyponym[3][]{\if@importing\else\par\noindent #2 is a hyponym of  #3\fi}
\newcommand\meronym[3][]{\if@importing\else\par\noindent #2 is a meronym of #3\fi}
%</sty>
%<*ltxml.sty>
DefConstructor('\hypernym [] {}{}',"");
DefConstructor('\hyponym [] {}{}',"");
DefConstructor('\meronym [] {}{}',"");
%</ltxml.sty>
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\MSC}
%   to define the Math Subject Classification, \ednote{MK: what to do for the LaTeXML side?}
%    \begin{macrocode}
%<*sty>
\newcommand\MSC[1]{\if@importing\else MSC: #1\fi}
%</sty>
%<*ltxml.sty>
DefConstructor('\MSC{}',"");
%</ltxml.sty>
%    \end{macrocode}
% \end{macro}
% \end{omgroup}
% 
% \begin{omgroup}[id=sec:langbindings]{For Language Bindings}
%
% Here we adapt the |smultiling| functionality to the special situation, where the module
% and file names are identical by design. 
%
% \begin{environment}{gviewsig}
%   The |gviewsig| environment is just a layer over the |viewsig| environment with the keys
%   suitably adapted.
%    \begin{macrocode}
%<ltxml.sty>RawTeX('
%<*sty|ltxml.sty>
\newenvironment{gviewsig}[4][]{\def\test{#1}\ifx\@test\@empty%
\begin{mhviewsig}[frompath=#3,topath=#4]{#2}{#3}{#4}\else
\begin{mhviewsig}[frompath=#3,topath=#4,#1]{#2}{#3}{#4}\fi}
{\end{mhviewsig}}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{gviewnl}
%   The |gve| environment is just a layer over the |viewnl| environment with the keys
%   suitably adapted.
%    \begin{macrocode}
\newenvironment{gviewnl}[5][]{\def\@test{#1}\ifx\@test\@empty%
\begin{mhviewnl}[frompath=#4,topath=#5]{#2}{#3}{#4}{#5}\else%
\begin{mhviewnl}[#1,frompath=#4,topath=#5]{#2}{#3}{#4}{#5}\fi
\smul@select@language{#3}}
{\end{mhviewnl}}
%</sty|ltxml.sty>
%<ltxml.sty>');
%    \end{macrocode}
% \end{environment}
% \end{omgroup}
% 
% \begin{omgroup}{Authoring States}
% We add a key to the module environment.
%    \begin{macrocode}
%<*sty>
\addmetakey{module}{state}
%</sty>
%<*ltxml.sty>
DefKeyVal('modnl','state','Semiverbatim');
%</ltxml.sty>
%    \end{macrocode}
% \end{omgroup}
%
% \begin{omgroup}{Shadowing of repositories}
% \begin{macro}{\repos@macro} 
%   |\repos@macro| parses a GitLab repository name \meta{group}|/|\meta{name} and creates
%   an internal macro name from that, which will be used 
%    \begin{macrocode}
%<*sty>
\def\repos@macro#1/#2;{#1@shadows@#2}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\shadow} 
%   |\shadow{|\meta{orig}|}{|\meta{fork}|}| declares a that the private repository
%   \meta{fork} shadows the MathHub repository \meta{orig}. Internally, it simply defines
%   an internal macro with the shadowing information.
%    \begin{macrocode}
\def\shadow#1#2{\@namedef{\repos@macro#1;}{#2}}
%</sty>
%<*ltxml.sty>
DefConstructor('\shadow{}{}','');
%</ltxml.sty>
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\MathHubPath} 
%   |\MathHubPath{|\meta{repos}|}| computes the path of the fork that shadows the MathHub
%   repository \meta{repos} according to the current |\shadow| specification. The computed
%   path can be used for loading modules from the private version of \meta{repos}. 
%    \begin{macrocode}
%<*sty>
\def\MathHubPath#1{\@ifundefined{\repos@macro#1;}{#1}{\@nameuse{\repos@macro#1;}}}
%</sty>
%<*ltxml.sty>
DefConstructor('\MathHubPath{}','');
%</ltxml.sty>
%    \end{macrocode}
% \end{macro}
% \end{omgroup}
% \end{omgroup} 
% \Finale
\endinput
% \iffalse
%%% Local Variables: 
%%% mode: doctex
%%% TeX-master: t
%%% End: 
% \fi

% LocalWords:  iffalse cls smglo smglo.dtx omdoc latexml texttt smlog.cls sref SMGloM
% LocalWords:  maketitle newpage tableofcontents newpage omgroup ednote ltxml smglom.dtx
% LocalWords:  printbibliography showmeta metakeys amstext ginput newcommand sproof cmath
% LocalWords:  module-defs gimport renewcommand langbindings gle newenvironment amsfonts
% LocalWords:  doctex NeedsTeXFormat langfiles ngerman smultiling

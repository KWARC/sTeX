# -*- CPERL -*-
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
DeclareOption('test', '');
DeclareOption('multiple', '');
DeclareOption('showmeta', sub {PassOptions('metakeys','sty',ToString(Digest(T_CS('\CurrentOption')))); });
DeclareOption(undef, sub {PassOptions('problem','sty',ToString(Digest(T_CS('\CurrentOption')))); });
ProcessOptions();
RequirePackage('problem');
RegisterNamespace('assig'=>"http://omdoc.org/ontology/assignments#");
RegisterDocumentNamespace('assig'=>"http://omdoc.org/ontology/assignments#");
DefEnvironment('{assignment} OptionalKeyVals:assig',
  "<omdoc:omgroup ?&GetKeyVal(#1,'id')(xml:id='&GetKeyVal(#1,'id')')() "
  .  "assig:dummy='for the namespace'>"
  .  "<omdoc:metadata>"
  .    "<dc:title>"
  .       "Assignment ?&GetKeyVal(#1,'num')(&GetKeyVal(#1,'num').)()"
  .       "?&GetKeyVal(#1,'title')((&GetKeyVal(#1,'title')))"
  .    "</dc:title>"
  .    "?&GetKeyVal(#1,'given')(<omdoc:meta property='assig:given'>&GetKeyVal(#1,'given')</omdoc:meta>)()"
  .    "?&GetKeyVal(#1,'due')(<omdoc:meta property='assig:due'>&GetKeyVal(#1,'due')</omdoc:meta>)()"
  .    "?&GetKeyVal(#1,'pts')(<omdoc:meta property='assig:pts'>&GetKeyVal(#1,'pts')</omdoc:meta>)()"
  .  "</omdoc:metadata>"
  .  "#body"
  ."</omdoc:omgroup>\n"#,
#  afterDigest=> sub {
#    my ($stomach, $kv) = @_;
#    my $kvi = LookupValue('inclassig');
#    my @keys = qw(id num title pts given due);
#    my @vals = $kvi && map($kvi->getValue($_), @keys);
#    foreach my $i(0..$#vals) {
#       $kv->setValue($keys[$i],$vals[$i]) if $vals[$i];
#     }}
);#$
DefMacro('\includeassignment [] {}', sub {
  my ($stomach, $arg1, $arg2) = @_;
  AssignValue('inclassig',$arg1) if $arg1;
  (Invocation(T_CS('\input'),$arg2)->unlist);
});
DefMacro('\inputassignment [] {}','\includeassignment[#1]{#2}');
DefEnvironment('{testheading}OptionalKeyVals:omdoc','');
DefConstructor('\testspace{}','');
DefConstructor('\testnewpage','');
DefConstructor('\testemptypage','');
sub includemhassignment {
  my ($gullet,$keyval,$arg2) = @_;
  my $repo_path;
  if ($keyval) {
    $repo_path = ToString(GetKeyVal($keyval,'mhrepos')); }
  if (! $repo_path) {
    $repo_path = ToString(Digest(T_CS('\mh@currentrepos'))); }
  else {
    $keyval->setValue('mhrepos',undef); }
  my $mathhub_base = ToString(Digest('\MathHub{}'));
  my $finalpath = $mathhub_base.$repo_path.'/source/'.ToString($arg2);
  return Invocation(T_CS('\includeassignment'), $keyval, T_OTHER($finalpath)); }#$
DefKeyVal('inclprob','mhrepos','Semiverbatim');
DefMacro('\includemhassignment OptionalKeyVals:inclprob {}', \&includemhassignment);
sub inputmhassignment {
  my ($gullet,$keyval,$arg2) = @_;
  my $repo_path;
  if ($keyval) {
    $repo_path = ToString(GetKeyVal($keyval,'mhrepos')); }
  if (! $repo_path) {
    $repo_path = ToString(Digest(T_CS('\mh@currentrepos'))); }
  else {
    $keyval->setValue('mhrepos',undef); }
  my $mathhub_base = ToString(Digest('\MathHub{}'));
  my $finalpath = $mathhub_base.$repo_path.'/source/'.ToString($arg2);
  return Invocation(T_CS('\inputassignment'), $keyval, T_OTHER($finalpath)); }#$
DefMacro('\inputmhassignment OptionalKeyVals:inclprob {}', \&inputmhassignment);
1;

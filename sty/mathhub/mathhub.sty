%%
%% This is file `mathhub.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% mathhub.dtx  (with options: `package')
%% 
\NeedsTeXFormat{LaTeX2e}[1999/12/01]
\ProvidesPackage{mathhub}[2010/10/01 v1.2 Basic MathHub functionality]
\RequirePackage{keyval}
\RequirePackage{pathsuris}
\newcommand\mhcurrentrepos[1]{%
  % \edef\@test{#1}%
  % \ifx\@test\mh@currentrepos% if new dir = old dir
  %   \relax% no need to change
  % \else%
  %   \protected@write\@auxout{}{\string\@mhcurrentrepos{#1}}%
  % \fi%
  \@mhcurrentrepos{#1}% define mh@currentrepos
}%
\newcommand\@mhcurrentrepos[1]{\edef\mh@currentrepos{#1}}%
\def\modules@@first#1/#2;{#1}
\newcommand\libinput[1]{%
\edef\@mh@group{\expandafter\modules@@first\mh@currentrepos;}
\let\orig@inffile\mh@inffile\let\orig@libfile\mh@libfile
\def\mh@inffile{\MathHub{\@mh@group/meta-inf/lib/#1}}
\def\mh@libfile{\MathHub{\mh@currentrepos/lib/#1}}%
\IfFileExists\mh@inffile{\input\mh@inffile}{}%
\IfFileExists\mh@inffile{}{\IfFileExists\mh@libfile{}{%
  {\PackageError{mathhub}
    {Library file missing; cannot input #1.tex\MessageBreak%
    Both \mh@libfile.tex\MessageBreak and \mh@inffile.tex\MessageBreak%
    do not exist}%
  {Check whether the file name is correct}}}}
\IfFileExists\mh@libfile{\input\mh@libfile\relax}{}
\let\mh@inffile\orig@inffile\let\mh@libfile\orig@libfile}
\newcommand\libusepackage[2][]{%
\edef\@mh@group{\expandafter\modules@@first\mh@currentrepos;}
\let\orig@inffile\mh@inffile\let\orig@libfile\mh@libfile
\edef\mh@inffile{\MathHub{\@mh@group/meta-inf/lib/#2}}
\edef\mh@libfile{\MathHub{\mh@currentrepos/lib/#2}}%
\IfFileExists{\mh@inffile.sty}{\usepackage[#1]{\mh@inffile}}{}%
\IfFileExists {\mh@inffile.sty}{}{\IfFileExists{\mh@libfile.sty}{}{%
  {\PackageError{mathhub}
    {Library file missing; cannot use package #2.sty\MessageBreak%
    Both \mh@libfile.sty\MessageBreak and \mh@inffile.sty\MessageBreak%
    do not exist}%
  {Check whether the file name is correct}}}}
\IfFileExists\mh@libfile{\input\mh@libfile\relax}{}
\let\mh@inffile\orig@inffile\let\mh@libfile\orig@libfile}
\newif\if@iswindows@\@iswindows@false
\IfFileExists{nul:}{\IfFileExists{/dev/null}{}{\@iswindows@true}}{}

\def\kpsewhich#1#2{\begingroup
  \def\@Space{ }
  \edef\kpsewhich@cmd{"|kpsewhich #2"}
  \everyeof{\noexpand}
  \catcode`\\=12
  \edef#1{\@@input\kpsewhich@cmd\@Space}
  \trimstring#1
  \global\let#1#1
\endgroup}

\kpsewhich\mathhub@path{--var-value MATHHUB}
\if@iswindows@\windows@to@path\mathhub@path\fi
\ifx\mathhub@path\@empty\else\defpath{MathHub}{\mathhub@path}\fi

\def\findmanifest#1{
  \@cpath{#1}
  \ifx\@CanPath\@Slash
    \def\manifest@mf{}
  \else\ifx\@CanPath\@empty
      \def\manifest@mf{}
  \else
    \edef\@findmanifest@path{\@CanPath/MANIFEST.MF}
    \if@iswindows@\path@to@windows\@findmanifest@path\fi
    \IfFileExists{\@findmanifest@path}{
      \message{MANIFEST.MF found at \@findmanifest@path}
      \edef\manifest@mf{\@findmanifest@path}
    }{
    \edef\@findmanifest@path{\@CanPath/META-INF/MANIFEST.MF}
    \if@iswindows@\path@to@windows\@findmanifest@path\fi
    \IfFileExists{\@findmanifest@path}{
      \message{MANIFEST.MF found at \@findmanifest@path}
      \edef\manifest@mf{\@findmanifest@path}
    }{
    \edef\@findmanifest@path{\@CanPath/meta-inf/MANIFEST.MF}
    \if@iswindows@\path@to@windows\@findmanifest@path\fi
    \IfFileExists{\@findmanifest@path}{
      \message{MANIFEST.MF found at \@findmanifest@path}
      \edef\manifest@mf{\@findmanifest@path}
    }{
      \findmanifest{\@CanPath/..}
    }}}
  \fi\fi
}
\def\split@manifest@key{
  \IfSubStr{\manifest@line}{\@Colon}{
      \StrBefore{\manifest@line}{\@Colon}[\manifest@key]
      \StrBehind{\manifest@line}{\@Colon}[\manifest@line]
      \trimstring\manifest@line
      \trimstring\manifest@key
  }{
      \def\manifest@key{}
  }
}
\def\parse@manifest@loop{
  \ifeof\@manifest
  \else
    \read\@manifest to \manifest@line\relax
    \edef\manifest@line{\expandafter\detokenize\expandafter{\manifest@line}}
    \split@manifest@key
    % id
    \IfStrEq\manifest@key{\detokenize{id}}{
        \message{archive id: \manifest@line}
        \xdef\manifest@mf@id{\manifest@line}
    }{
    % narration-base
    \IfStrEq\manifest@key{\detokenize{narration-base}}{
        \message{archive narration-base: \manifest@line}
        \xdef\manifest@mf@narr{\manifest@line}
    }{
    % namespace
    \IfStrEq\manifest@key{\detokenize{source-base}}{
        \message{archive source-base: \manifest@line}
        \xdef\manifest@mf@ns{\manifest@line}
    }{
    \IfStrEq\manifest@key{\detokenize{ns}}{
        \message{archive ns: \manifest@line}
        \xdef\manifest@mf@ns{\manifest@line}
    }{
    % dependencies
    \IfStrEq\manifest@key{\detokenize{dependencies}}{
        \message{archive dependencies: \manifest@line}
        \xdef\manifest@mf@deps{\manifest@line}
    }{

    }}}}}
    \parse@manifest@loop
  \fi
}

\edef\oldpercentcatcode{\the\catcode`\%}
\catcode`\%=12
\let\percent%
\catcode`\%=\oldpercentcatcode

\edef\pwd@cmd{\if@iswindows@ -expand-var \percent CD\percent\else -var-value PWD\fi}
\kpsewhich\mathhub@maindir\pwd@cmd
\if@iswindows@\windows@to@path\mathhub@maindir\fi
\message{PWD: \mathhub@maindir}
\findmanifest{\mathhub@maindir}
\begingroup
  \gdef\manifest@mf@id{}
  \gdef\manifest@mf@narr{}
  \gdef\manifest@mf@ns{}
  \gdef\manifest@mf@deps{}
  \newread\@manifest
  \openin\@manifest\manifest@mf
  \parse@manifest@loop
  \closein\@manifest
\endgroup
\if@iswindows@\windows@to@path\manifest@mf\fi
\mhcurrentrepos{\manifest@mf@id}
\endinput
%%
%% End of file `mathhub.sty'.

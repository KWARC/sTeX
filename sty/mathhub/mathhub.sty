%%
%% This is file `mathhub.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% mathhub.dtx  (with options: `package')
%% 
\NeedsTeXFormat{LaTeX2e}[1999/12/01]
\RequirePackage{stex-base}
\RequirePackage{keyval}
\if@latexml\RequirePackage[abspath]{currfile}\fi
\if@latexml\else\RequirePackage{xparse}\fi
\if@latexml\else\RequirePackage{xstring}\fi
\RequirePackage{pathsuris}
\RequirePackage{expl3}

\newcommand\mhcurrentrepos[1]{%
  \edef\@test{#1}%
  \ifx\@test\mh@currentrepos% if new dir = old dir
    \relax% no need to change
  \else%
    \protected@write\@auxout{}{\string\@mhcurrentrepos{#1}}%
  \fi%
  \@mhcurrentrepos{#1}% define mh@currentrepos
}%
\newcommand\@mhcurrentrepos[1]{\edef\mh@currentrepos{#1}}%
\def\modules@@first#1/#2;{#1}
\newcommand\libinput[1]{%
\edef\@mh@group{\expandafter\modules@@first\mh@currentrepos;}
\let\orig@inffile\mh@inffile\let\orig@libfile\mh@libfile
\def\mh@inffile{\MathHub{\@mh@group/meta-inf/lib/#1}}
\def\mh@libfile{\MathHub{\mh@currentrepos/lib/#1}}%
\IfFileExists\mh@inffile{\input\mh@inffile}{}%
\IfFileExists\mh@inffile{}{\IfFileExists\mh@libfile{}{%
  {\PackageError{mathhub}
    {Library file missing; cannot input #1.tex\MessageBreak%
    Both \mh@libfile.tex\MessageBreak and \mh@inffile.tex\MessageBreak%
    do not exist}%
  {Check whether the file name is correct}}}}
\IfFileExists\mh@libfile{\input\mh@libfile\relax}{}
\let\mh@inffile\orig@inffile\let\mh@libfile\orig@libfile}
\newcommand\libusepackage[2][]{%
\edef\@mh@group{\expandafter\modules@@first\mh@currentrepos;}
\let\orig@inffile\mh@inffile\let\orig@libfile\mh@libfile
\edef\mh@inffile{\MathHub{\@mh@group/meta-inf/lib/#2}}
\edef\mh@libfile{\MathHub{\mh@currentrepos/lib/#2}}%
\IfFileExists{\mh@inffile.sty}{\usepackage[#1]{\mh@inffile}}{}%
\IfFileExists {\mh@inffile.sty}{}{\IfFileExists{\mh@libfile.sty}{}{%
  {\PackageError{mathhub}
    {Library file missing; cannot use package #2.sty\MessageBreak%
    Both \mh@libfile.sty\MessageBreak and \mh@inffile.sty\MessageBreak%
    do not exist}%
  {Check whether the file name is correct}}}}
\IfFileExists{\@libfile.sty}{\usepackage[#1]{\@libfile}}{}}

% adapted from
% https://tex.stackexchange.com/questions/62010/can-i-access-system-environment-variables-from-latex-for-instance-home, check there if it breaks.

\ExplSyntaxOn
\sys_get_shell:nnN{kpsewhich ~ --var-value ~ MATHHUB} { } \MATHHUB
\tl_trim_spaces:N \MATHHUB
\ifx\MATHHUB\empty\else
\def\temp_def_path#1{\defpath{MathHub}{#1}}
\expandafter\temp_def_path\expandafter{\MATHHUB}
\fi
\ExplSyntaxOff
%\mhcurrentrepos{\StrBetween\PWD\MATHHUB{/current/}}

% find manifest.mf

\def\findmanifest#1{
  \@cpath{#1}
  \ifx\@CanPath\@Slash
    \def\manifest@mf{}
  \else\ifx\@CanPath\@empty
      \def\manifest@mf{}
  \else
    \IfFileExists{\@CanPath/MANIFEST.MF}{
      \edef\manifest@mf{\@CanPath/MANIFEST.MF}
    }{
    \IfFileExists{\@CanPath/META-INF/MANIFEST.MF}{
      \edef\manifest@mf{\@CanPath/META-INF/MANIFEST.MF}
    }{
    \IfFileExists{\@CanPath/meta-inf/MANIFEST.MF}{
      \edef\manifest@mf{\@CanPath/meta-inf/MANIFEST.MF}
    }{
      \findmanifest{\@CanPath/..}
    }}}
  \fi\fi
}

% helper function for parsing manifest.mf

\def\split@manifest@key{
  \IfSubStr{\manifest@line}{\@Colon}{
      \StrBefore{\manifest@line}{\@Colon}[\manifest@key]
      \StrBehind{\manifest@line}{\@Colon}[\manifest@line]
      \trimstring\manifest@line
      \trimstring\manifest@key
  }{
      \def\manifest@key{}
  }
}

% iterates over lines in manifest.mf

\def\parse@manifest@loop{
  \ifeof\@manifest
  \else
    \read\@manifest to \manifest@line\relax
    \split@manifest@key
    % id
    \IfStrEq\manifest@key{id}{
        \xdef\manifest@mf@id{\manifest@line}
    }{
    % narration-base
    \IfStrEq\manifest@key{narration-base}{
        \xdef\manifest@mf@narr{\manifest@line}
    }{
    % namespace
    \IfStrEq\manifest@key{source-base}{
        \xdef\manifest@mf@ns{\manifest@line}
    }{
    \IfStrEq\manifest@key{ns}{
        \xdef\manifest@mf@ns{\manifest@line}
    }{
    % dependencies
    \IfStrEq\manifest@key{dependencies}{
        \xdef\manifest@mf@deps{\manifest@line}
    }{
            
    }}}}}
    \parse@manifest@loop
  \fi
}

% find path of main file

\begingroup
  \edef\oldpercentcatcode{\the\catcode`\%}
  \catcode`\%=12
  \def\percent{%}
  \catcode`\%=\oldpercentcatcode
  \ExplSyntaxOn
    \edef\windowsstring{\detokenize{windows}}
    \edef\os_string{\expandafter\detokenize\expandafter{\c_sys_platform_str}}
    \ifx\os_string\windowsstring
      \edef\cmd_string{kpsewhich ~ -expand-var ~ \percent CD\percent}
    \else
      \edef\cmd_string{kpsewhich ~ -var-value ~ PWD}
    \fi
	\expandafter\sys_get_shell:nnN\expandafter{\cmd_string} { } \mainfile_dir
    	\tl_trim_spaces:N \mainfile_dir
	\xdef\mainfile_dir{\expandafter\detokenize\expandafter{\mainfile_dir}}
  \ExplSyntaxOff
\endgroup
\expandafter\let\expandafter\mathhub@maindir\csname mainfile_dir\endcsname

% read in and parse manifest.mf

\findmanifest{\mathhub@maindir}
\begingroup
  \gdef\manifest@mf@id{}
  \gdef\manifest@mf@narr{}
  \gdef\manifest@mf@ns{}
  \gdef\manifest@mf@deps{}
  \newread\@manifest
  \openin\@manifest\manifest@mf
  \parse@manifest@loop
  \closein\@manifest
\endgroup


\endinput
%%
%% End of file `mathhub.sty'.

%%
%% This is file `modules.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% modules.dtx  (with options: `package')
%% 
\NeedsTeXFormat{LaTeX2e}[1999/12/01]
\ProvidesPackage{modules}[2015/04/02 v1.4 Semantic Markup]
\DeclareOption{showmeta}{\PassOptionsToPackage{\CurrentOption}{metakeys}}
\newif\ifmod@show\mod@showfalse
\DeclareOption{showmods}{\mod@showtrue}
\newif\ifaux@req\aux@reqtrue
\DeclareOption{noauxreq}{\aux@reqfalse}
\newif\ifmod@qualified\mod@qualifiedfalse
\DeclareOption{qualifiedimports}{\mod@qualifiedtrue}
\ProcessOptions
\RequirePackage{sref}
\RequirePackage{xspace}
\RequirePackage{mdframed}
\RequirePackage{xstring}
\addmetakey{module}{cd}% no longer used
\addmetakey{module}{load}% ignored
\addmetakey*{module}{title}
\addmetakey*{module}{creators}
\addmetakey*{module}{contributors}
\addmetakey*{module}{srccite}
\define@key{module}{id}{%
\edef\this@module{\expandafter\noexpand\csname module@defs@#1\endcsname}%
\global\@namedef{module@defs@#1}{}%
\ifmod@qualified
\edef\this@qualified@module{\expandafter\noexpand\csname module@defs@qualified@#1\endcsname}%
\global\@namedef{module@defs@qualified@#1}{}%
\fi
\def\mod@id{#1}}
\newcounter{module}[section]
\newcommand\module@heading{\stepcounter{module}%
\ifmod@show%
\noindent{\textbf{Module} \thesection.\themodule [\mod@id]}%
\sref@label@id{Module \thesection.\themodule [\mod@id]}%
\ifx\module@title\@empty :\quad\else\quad(\module@title)\hfill\\\fi%
\fi}%mod@show
\newenvironment{module}[1][]{\begin{@module}[#1]%
\@ifundefined{mod@id}{}% only define if components are!
{\@ifundefined{mod@path}{}{\csxdef{module@\mod@id @path}{\mod@path}}
\@ifundefined{mod@ext}{}{\csxdef{module@\mod@id @ext}{\mod@ext}}}%
\module@heading}
{\end{@module}}
\ifmod@show\surroundwithmdframed{module}\fi
\newenvironment{@module}[1][]{\metasetkeys{module}{#1}}{}
\def\activate@defs#1{%
\@ifundefined{module@#1@activated}{\csname module@defs@#1\endcsname}{}%
\@namedef{module@#1@activated}{true}}
\def\export@defs#1{\@ifundefined{mod@id}{}%
{\expandafter\expandafter\expandafter\g@addto@macro\expandafter%
\this@module\expandafter{\activate@defs{#1}}}}
\newif\if@export
\newif\if@importing\@importingfalse
\gdef\imported@modules{}
\srefaddidkey{importmodule}
\addmetakey{importmodule}{load}
\addmetakey[sms]{importmodule}{ext}
\addmetakey[false]{importmodule}{conservative}[true]
\newcommand\importmodule[2][]{\metasetkeys{importmodule}{#1}%
\ifx\imported@modules\@empty\edef\imported@modules{#2}%
\else\edef\imported@modules{#2,\imported@modules}\fi%
\@exporttrue\@importmodule[\importmodule@load]{#2}{\importmodule@ext}\ignorespaces}
\newcommand\@importmodule[3][]{%
{\@importingtrue% to shut up macros while in the group opened here
\edef\@load{#1}\ifx\@load\@empty\else%
\@ifundefined{module@#2@path}{\requiremodules{#1}{#3}}%
{\edef\@path{\expandafter\csname module@#2@path\endcsname}
\IfStrEq\@load\@path% if the known path is the same as the requested one
{}% do nothing, it has already been loaded, else signal an error
{\PackageError{modules}
{Module Name Clash\MessageBreak A module with name #2 was already loaded under the path
  "\@path"\MessageBreak
The imported path "\@load" is probably a different module with the\MessageBreak
same name; this is dangerous -- not importing}
{Check whether the Module name is correct}}}
\fi}% \@load empty and end importing group
\activate@defs{#2}\if@export\export@defs{#2}\fi}
\newcommand\usemodule[2][]{\@exportfalse\importmodule[#1]{#2}}
\newcommand\importmodules[1]{\@for\@I:=#1\do{\activate@defs\@I}}%
\newenvironment{importmodulevia}[2][]{\gdef\@@doit{\importmodule[#1]{#2}}%
\ifmod@show\par\noindent importing module #2 via \@@doit\fi}
{\aftergroup\@@doit\ifmod@show end import\fi}
\newcommand\vassign[3][]{\ifmod@show\ensuremath{#2\mapsto #3}, \fi}
\newcommand\tassign[3][]{\ifmod@show #2\ensuremath{\mapsto} #3, \fi}
\newcommand\ttassign[3][]{\ifmod@show #2\ensuremath{\mapsto} ``#3'', \fi}
\newcommand\importOMDocmodule[3][]{\importmodule[#1]{#3}}
\let\metalanguage=\importmodule
\let\adoptmodule=\importmodule
\let\mod@newcommand=\providerobustcmd
\srefaddidkey{conceptdef}
\addmetakey*{conceptdef}{title}
\addmetakey{conceptdef}{subject}
\addmetakey*{conceptdef}{display}
\def\conceptdef@type{Symbol}
\newcommand\conceptdef[2][]{\metasetkeys{conceptdef}{#1}%
\ifx\conceptdef@display\st@flow\else{\stDMemph{\conceptdef@type} #2:}\fi%
\ifx\conceptdef@title\@empty~\else~(\stDMemph{\conceptdef@title})\par\fi}
\newif\if@symdeflocal
\srefaddidkey{symdef}
\define@key{symdef}{local}[true]{\@symdeflocaltrue}
\define@key{symdef}{primary}[true]{}
\define@key{symdef}{assocarg}{}
\define@key{symdef}{bvars}{}
\define@key{symdef}{bargs}{}
\addmetakey{symdef}{name}
\addmetakey*{symdef}{title}
\addmetakey*{symdef}{description}
\addmetakey{symdef}{subject}
\addmetakey*{symdef}{display}
\def\symdef{\@ifnextchar[{\@symdef}{\@symdef[]}}
\def\@symdef[#1]#2{\@ifnextchar[{\@@symdef[#1]{#2}}{\@@symdef[#1]{#2}[0]}}
\def\@mod@nc#1{\mod@newcommand{#1}[1]}
\def\@@symdef[#1]#2[#3]#4{%
\@symdeflocalfalse\metasetkeys{symdef}{#1}%
\expandafter\mod@newcommand\csname modules@#2@pres@\endcsname[#3]{#4}%
\expandafter\mod@newcommand\csname #2\endcsname[1][]%
{\csname modules@#2@pres@##1\endcsname}%
\expandafter\@mod@nc\csname mod@symref@#2\expandafter\endcsname\expandafter%
{\expandafter\mod@termref\expandafter{\mod@id}{#2}{##1}}%
\if@symdeflocal\else%
\@ifundefined{mod@id}{}{%
\expandafter\g@addto@macro\this@module%
{\expandafter\mod@newcommand\csname modules@#2@pres@\endcsname[#3]{#4}}%
\expandafter\g@addto@macro\this@module%
{\expandafter\mod@newcommand\csname #2\endcsname[1][]%
{\csname modules@#2@pres@##1\endcsname}}%
\expandafter\g@addto@macro\csname  module@defs@\mod@id\expandafter\endcsname\expandafter%
{\expandafter\@mod@nc\csname mod@symref@#2\expandafter\endcsname\expandafter%
{\expandafter\mod@termref\expandafter{\mod@id}{#2}{##1}}}%
\ifmod@qualified%
\expandafter\g@addto@macro\this@qualified@module%
{\expandafter\mod@newcommand\csname modules@#2@pres@qualified\endcsname[#3]{#4}}%
\expandafter\g@addto@macro\this@qualified@module%
{\expandafter\def\csname#2atqualified\endcsname{\csname modules@#2@pres@qualified\endcsname}}%
\fi}% mod@qualified
\fi% symdeflocal
\ifmod@show
\ifx\symdef@display\st@flow\else{\noindent\stDMemph{\symdef@type} #2:}\fi%
\ifx\symdef@title\@empty~\else~(\stDMemph{\symdef@title})\par\fi
\fi}% mod@show
\def\symdef@type{Symbol}
\def\symvariant#1{\@ifnextchar[{\@symvariant{#1}}{\@symvariant{#1}[0]}}
\def\@symvariant#1[#2]#3#4{%
\expandafter\mod@newcommand\csname modules@#1@pres@#3\endcsname[#2]{#4}%
\@ifundefined{mod@id}{}{%
\expandafter\g@addto@macro\this@module%
{\expandafter\mod@newcommand\csname modules@#1@pres@#3\endcsname[#2]{#4}}}}%
\def\resymdef{\@ifnextchar[{\@resymdef}{\@resymdef[]}}
\def\@resymdef[#1]#2{\@ifnextchar[{\@@resymdef[#1]{#2}}{\@@resymdef[#1]{#2}[0]}}
\def\@@resymdef[#1]#2[#3]#4{\PackageError{modules}
  {The \protect\resymdef macro is deprecated}{use the \protect\symvariant instead!}}
\let\abbrdef\symdef
\define@key{DefMathOp}{name}{\def\defmathop@name{#1}}
\newcommand\DefMathOp[2][]{%
\setkeys{DefMathOp}{#1}%
\symdef[#1]{\defmathop@name}{#2}}
\def\vardef{\@ifnextchar[{\@vardef}{\@vardef[]}}
\def\@vardef[#1]#2{\@ifnextchar[{\@@vardef[#1]{#2}}{\@@vardef[#1]{#2}[0]}}
\def\@@vardef[#1]#2[#3]#4{\def\@test{#1}%
\ifx\@test\@empty\@@symdef[local]{#2}[#3]{#4}\else\symdef[local,#1]{#2}[#3]{#4}\fi}
\addmetakey{symtest}{name}
\addmetakey{symtest}{variant}
\newcommand\symtest[3][]{\if@importing\else%
\metasetkeys{symtest}{#1}%
\par\noindent \textbf{Symbol}~%
\ifx\symtest@name\@empty\texttt{#2}\else\texttt{\symtest@name}\fi%
\ifx\symtest@variant\@empty\else\ (variant \texttt{\symtest@variant})\fi%
\ with semantic macro %
\texttt{\textbackslash #2\ifx\symtest@variant\@empty\else[\symtest@variant]\fi}%
: used e.g. in \ensuremath{#3}%
\fi}
\addmetakey{abbrtest}{name}
\newcommand\abbrtest[3][]{\if@importing\else%
\metasetkeys{abbrtest}{#1}%
\par\noindent \textbf{Abbreviation}~%
\ifx\abbrtest@name\@empty\texttt{#2}\else\texttt{\abbrtest@name}\fi%
: used e.g. in \ensuremath{#3}%
\fi}
\def\mod@true{true}
\addmetakey[false]{termdef}{local}
\addmetakey{termdef}{name}
\newcommand\termdef[3][]{\metasetkeys{termdef}{#1}%
\expandafter\mod@newcommand\csname#2\endcsname[0]{#3\xspace}%
\ifx\termdef@local\mod@true\else%
\@ifundefined{mod@id}{}{\expandafter\g@addto@macro\this@module%
{\expandafter\mod@newcommand\csname#2\endcsname[0]{#3\xspace}}}%
\fi}
\def\@capitalize#1{\uppercase{#1}}
\newcommand\capitalize[1]{\expandafter\@capitalize #1}
\def\mod@termref#1#2#3{\def\@test{#3}%
\@ifundefined{module@#1@path}%
{\protect\G@refundefinedtrue%
\@latex@warning{\protect\termref with unidentified cd "#1": the cd key must reference an active module}%
\def\@label{sref@#2 @target}}%
{\def\@label{sref@#2@#1@target}}%
\ifx\csname module@#1@path\endcsname\@empty% local reference
\sref@hlink@ifh{\@label}{\ifx\@test\@empty #2\else #3\fi}\else%
\def\@uri{\csname module@#1@path\endcsname.pdf\#\@label}%
\sref@href@ifh{\@uri}{\ifx\@test\@empty #2\else #3\fi}\fi}
\newcommand\mod@canonicalize[1]{#1}
\newcommand\defpath[3][]{\expandafter\newcommand\csname #2\endcsname[1]{#3/##1}}
\newcommand\requiremodules[2]{%
{\mod@showfalse\@importingtrue% save state and ensure silence while reading sms
\edef\mod@path{#1}\edef\mod@ext{#2}% set up path/ext
\input{#1.#2}}}
\newcommand\@requiremodules[2]{\if@tempswa\requiremodules{#1}{#2}\fi}
\newcommand\inputref[1]{\edef\mod@path{#1}\edef\mod@ext{tex}\input{#1}}
\def\requirepackage#1#2{\makeatletter\input{#1.sty}\makeatother}
\srefaddidkey{view}
\addmetakey*{view}{title}
\addmetakey{view}{display}
\addmetakey{view}{from}
\addmetakey{view}{to}
\addmetakey{view}{creators}
\addmetakey{view}{contributors}
\addmetakey{view}{srccite}
\addmetakey[sms]{view}{ext}
\newcounter{view}[section]
\newcommand\view@heading[4]{\if@importing\else%
\stepcounter{view}%
\edef\@display{#3}\edef\@title{#4}%
\noindent\ifx\@display\st@flow\else
{\textbf{View} {\thesection.\theview} from \textsf{#1} to \textsf{#2}}%
\sref@label@id{View \thesection.\theview}%
\ifx\@title\@empty\quad\else\quad(\@title)\fi%
\par\noindent%
\fi\ignorespaces\fi}%ifmod@show
\newenvironment{view}[3][]%
{\metasetkeys{view}{#1}\sref@target%
\begin{@view}{#2}{#3}\view@heading{#2}{#3}{\view@display}{\view@title}}
{\end{@view}\ignorespaces}
\ifmod@show\surroundwithmdframed{view}\fi
\newenvironment{@view}[2]{%from, to
\@importmodule[\view@from]{#1}{\view@ext}%
\@importmodule[\view@to]{#2}{\view@ext}}
{}
\newenvironment{viewsketch}[3][]%
{\metasetkeys{view}{#1}\sref@target%
\begin{@view}{#2}{#3}\view@heading{#2}{#3}{\view@display}{\view@title}}
{\end{@view}}
\ifmod@show\surroundwithmdframed{viewsketch}\fi
\srefaddidkey{importmhmodule}
\addmetakey{importmhmodule}{repos}
\addmetakey{importmhmodule}{path}
\addmetakey[sms]{importmhmodule}{ext}
\addmetakey[false]{importmhmodule}{conservative}[true]
\newcommand\importmhmodule[2][]{\metasetkeys{importmhmodule}{#1}%
\ifx\importmhmodule@path\@empty
\importmodule[ext=\importmhmodule@ext,id=\importmhmodule@id]{#2}\else
\edef\mh@@repos{\mh@currentrepos}%
\ifx\importmhmodule@repos\@empty\else\mhcurrentrepos{\importmhmodule@repos}\fi%
\importmodule[load=\MathHub{\mh@currentrepos/source/\importmhmodule@path},
              ext=\importmhmodule@ext,id=\importmhmodule@id]{#2}%
\mhcurrentrepos\mh@@repos\fi\ignorespaces}
\newcommand\usemhmodule[2][]{\metasetkeys{importmhmodule}{#1}%
\ifx\importmhmodule@path\@empty
\usemodule[ext=\importmhmodule@ext,id=\importmhmodule@id]{#2}\else
\edef\mh@@repos{\mh@currentrepos}%
\ifx\importmhmodule@repos\@empty\else\mhcurrentrepos{\importmhmodule@repos}\fi%
\usemodule[load=\MathHub{\mh@currentrepos/source/\importmhmodule@path},
           ext=\importmhmodule@ext,id=\importmhmodule@id]{#2}%
\mhcurrentrepos\mh@@repos\fi\ignorespaces}
\newcommand\adoptmhmodule[2][]{\metasetkeys{importmhmodule}{#1}%
\ifx\importmhmodule@path\@empty
\adoptmodule[ext=\importmhmodule@ext,id=\importmhmodule@id]{#2}\else
\edef\mh@@repos{\mh@currentrepos}%
\ifx\importmhmodule@repos\@empty\else\mhcurrentrepos{\importmhmodule@repos}\fi%
\adoptmodule[load=\MathHub{\mh@currentrepos/source/\importmhmodule@path},
             ext=\importmhmodule@ext,id=\importmhmodule@id]{#2}%
\mhcurrentrepos\mh@@repos\fi\ignorespaces}
\newcommand\mhinputref[2][]{\def\@repos{#1}%
\edef\mh@@repos{\mh@currentrepos}%
\ifx\@repos\@empty\else\mhcurrentrepos{#1}\fi%
\inputref{\MathHub{\mh@currentrepos/source/#2}}%
\mhcurrentrepos\mh@@repos\ignorespaces}
\let\mhinput\mhinputref
\newcommand\mhcurrentrepos[1]{\edef\@test{#1}%
\ifx\@test\mh@currentrepos\else%
\protected@write\@auxout{}{\string\@mhcurrentrepos{#1}}\fi%
\@mhcurrentrepos{#1}}
\newcommand\@mhcurrentrepos[1]{\edef\mh@currentrepos{#1}}
\newenvironment{importmhmodulevia}[3][]{\gdef\@@doit{\importmhmodule[#1]{#2}{#3}}%
\ifmod@show\par\noindent importing module #2 via \@@doit\fi}
{\aftergroup\@@doit\ifmod@show end import\fi}
\srefaddidkey{mhview}
\addmetakey{mhview}{display}
\addmetakey{mhview}{creators}
\addmetakey{mhview}{contributors}
\addmetakey{mhview}{srccite}
\addmetakey*{mhview}{title}
\addmetakey{mhview}{fromrepos}
\addmetakey{mhview}{torepos}
\addmetakey{mhview}{frompath}
\addmetakey{mhview}{topath}
\addmetakey[sms]{mhview}{ext}
\newenvironment{mhview}[3][]% keys, from, to
{\metasetkeys{mhview}{#1}\sref@target%
\begin{@mhview}{#2}{#3}\view@heading{#2}{#3}{\mhview@display}{\mhview@title}}
{\end{@mhview}\ignorespaces}
\ifmod@show\surroundwithmdframed{mhview}\fi
\newenvironment{@mhview}[2]{%from, to
\importmhmodule[repos=\mhview@fromrepos,path=\mhview@frompath,ext=\mhview@ext]{#1}%
\importmhmodule[repos=\mhview@torepos,path=\mhview@topath,ext=\mhview@ext]{#2}}
{}
\newenvironment{mhviewsketch}[3][]%
{\metasetkeys{mhview}{#1}\sref@target%
\begin{@mhview}{#2}{#3}\view@heading{#2}{#3}{\mhview@display}{\mhview@title}}
{\end{@mhview}\ignorespaces}
\ifmod@show\surroundwithmdframed{mhviewsketch}\fi
\newcommand\obligation[3][]{\if@importing\else Axiom #2 is proven by \sref{#3}\fi}
\newcommand\sinput[1]{\PackageError{modules}%
  {The \protect\sinput macro is deprecated}{use the \protect\input instead!}}
\newcommand\sinputref[1]{\PackageError{modules}%
  {The \protect\sinputref macro is deprecated}{use the \protect\inputref instead!}}
\define@key{module}{uses}{%
\@for\module@tmp:=#1\do{\activate@defs\module@tmp\export@defs\module@tmp}}
\define@key{module}{usesqualified}{%
\@for\module@tmp:=#1\do{\activate@defs{qualified@\module@tmp}\export@defs\module@tmp}}
\def\coolurion{\PackageWarning{modules}{coolurion is obsolete, please remove}}
\def\coolurioff{\PackageWarning{modules}{coolurioff is obsolete, please remove}}
\def\csymdef{\@ifnextchar[{\@csymdef}{\@csymdef[]}}
\def\@csymdef[#1]#2{\@ifnextchar[{\@@csymdef[#1]{#2}}{\@@csymdef[#1]{#2}[0]}}
\def\@@csymdef[#1]#2[#3]#4#5{\@@symdef[#1]{#2}[#3]{#4}}
\def\notationdef[#1]#2#3{}
\newcommand\reqmodules[2]{\ifinlist{#1}{\@register}{}{\listadd\@register{#1}\input{#1.#2}}}
\newcounter{@pl}
\DeclareListParser*{\forpathlist}{/}
\def\file@name#1{\setcounter{@pl}{0}%
\forpathlist{\stepcounter{@pl}\listadd\@pathlist}{#1}
\def\do##1{\ifnumequal{\value{@pl}}{1}{##1}{\addtocounter{@pl}{-1}}}
\dolistloop{\@pathlist}}
\def\file@path#1{\setcounter{@pl}{0}%
\forpathlist{\stepcounter{@pl}\listadd\@pathlist}{#1}
\def\do##1{\ifnumequal{\value{@pl}}{1}{}{\addtocounter{@pl}{-1}%
\ifnumequal{\value{@pl}}{1}{##1}{##1/}}}
\dolistloop{\@pathlist}}
\def\@NEWcurrentprefix{}
\def\NEWrequiremodules#1{\def\@pref{\file@path{#1}}%
\ifx\@pref\@empty\else\xdef\@NEWcurrentprefix{\@NEWcurrentprefix/\@pref}\fi%
\edef\@input@me{\@NEWcurrentprefix/\file@name{#1}}
\message{requiring \@input@me}\reqmodule{\@input@me}}
\endinput
%%
%% End of file `modules.sty'.

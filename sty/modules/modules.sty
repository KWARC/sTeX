%%
%% This is file `modules.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% modules.dtx  (with options: `package')
%% 
\NeedsTeXFormat{LaTeX2e}[1999/12/01]
\ProvidesPackage{modules}[2019/03/20 v1.4 Semantic Markup]
\newif\if@modules@html@\@modules@html@true
\DeclareOption{omdocmode}{\@modules@html@false}
\newif\if@modules@mh@\@modules@mh@false
\DeclareOption{mh}{\@modules@mh@true}
\newif\ifmod@show\mod@showfalse
\DeclareOption{showmods}{\mod@showtrue}
\newif\ifaux@req\aux@reqtrue
\DeclareOption{noauxreq}{\aux@reqfalse}
\newif\ifmod@qualified\mod@qualifiedfalse
\DeclareOption{qualifiedimports}{\mod@qualifiedtrue}
\newif\if@trwarn\@trwarnfalse
\DeclareOption{trwarn}{\@trwarntrue}
\DeclareOption*{\PassOptionsToPackage{\CurrentOption}{sref}}
\ProcessOptions
\RequirePackage{stex-base}
\RequirePackage{sref}
\RequirePackage{pathsuris}
\RequirePackage[abspath]{currfile}
\RequirePackage{standalone}
\if@modules@mh@\RequirePackage{modules-mh}\fi
\RequirePackage{xspace}
\if@latexml\else\ifmod@show\RequirePackage{mdframed}\fi\fi
\RequirePackage{presentation}
\addmetakey*{module}{title}
\addmetakey*{module}{id}
\addmetakey*{module}{creators}
\addmetakey*{module}{contributors}
\addmetakey*{module}{srccite}
\addmetakey*{module}{align}[WithTheModuleOfTheSameName]
\addmetakey*{module}{ns}
\addmetakey*{module}{narr}
\addmetakey*{module}{noalign}[true]
\ifdef{\thesection}{\newcounter{module}[section]}{\newcounter{module}}%
\newrobustcmd\module@heading{%
  \stepcounter{module}%
  \ifmod@show%
    \noindent{\textbf{Module} \thesection.\themodule [\module@id]}%
    \sref@label@id{Module \thesection.\themodule [\module@id]}%
    \ifx\module@title\@empty :\quad\else\quad(\module@title)\hfill\\\fi%
  \fi%
}% mod@show
\newenvironment{module}[1][]{%
  \begin{@module}[#1]%
    \ifcsundef{mod@path}{}{\csxdef{module@\module@id @path}{\mod@path}}%
    \ifcsundef{mod@ext}{}{\csxdef{module@\module@id @ext}{\mod@ext}}%
  \module@heading% make the headings
  \ignorespacesandpars\usemodule@maybesetcodes}{%
  \end{@module}%
  \ignorespacesafterend%
}%
\ifmod@show\surroundwithmdframed{module@om@common}\fi%
\newif\ifarchive@ns@empty@\archive@ns@empty@false
\def\set@default@ns{
  \edef\@module@ns@temp{\currfileabspath}
  \edef\@module@ns@temp{\if@iswindows@\windows@to@path\@module@ns@temp\else\@module@ns@temp\fi}
  \path@dropextension\@module@ns@temp{@module@ns@temp}
  \archive@ns@empty@false
  \unless\ifcsname mathhub@archive@ns\endcsname
    \archive@ns@empty@true
  \else
    \ifx\mathhub@archive@ns\@empty\archive@ns@empty@true\fi
  \fi
  \ifarchive@ns@empty@
    \asuri{@module@ns@temp}{file\@Colon\@Slash\@Slash\@module@ns@temp}
    \@module@ns@temp{drop extension}
    \setkeys{module}{ns=\@module@ns@tempuri}
  \else
    \asuri{@module@filepath@temp}{file\@Colon\@Slash\@Slash\@module@ns@temp}
    \asuri{@module@ns@temp}{\mathhub@archive@ns}
    \asuri{@module@archivedir}{file\@Colon\@Slash\@Slash\mathhub@archive@dir\@Slash source}
    \IfBeginWith\@module@filepath@temppath\@module@archivedirpath{
      \StrLen\@module@archivediruri[\ns@temp@length]
      \StrGobbleLeft\@module@filepath@tempuri\ns@temp@length[\@module@filepath@tempuri]
      \edef\@module@ns@tempuri{\@module@ns@tempuri\@module@filepath@tempuri}
    }{}
    \setkeys{module}{ns=\@module@ns@tempuri}
  \fi
}

\def\set@next@moduleid{
  \unless\ifcsname namespace@\module@ns @unnamedmodules\endcsname
      \csgdef{namespace@\module@ns @unnamedmodules}{0}
  \fi
  \edef\namespace@currnum{\csname namespace@\module@ns @unnamedmodules\endcsname}
  \edef\module@temp@setidname{\noexpand\setkeys{module}{id=module\namespace@currnum}}
  \module@temp@setidname
  \csxdef{namespace@\module@ns @unnamedmodules}{\the\numexpr\namespace@currnum+1}
}

\newenvironment{@module}[1][]{
  \metasetkeys{module}{#1}
  \ifx\module@ns\@empty\set@default@ns\fi
  \ifx\module@narr\@empty
    \setkeys{module}{narr=\module@ns}
  \fi
  \ifcsname module@id\endcsname
    \ifx\module@id\@empty\set@next@moduleid\fi
  \else\set@next@moduleid\fi
  \seturi[module@uri@]{\module@ns\@QuestionMark\module@id}
  \csxdef{\module@uri@uri}{\noexpand\@invoke@module{\module@uri@uri}}
  \csxdef{moduleid@\module@id}{\noexpand\@invoke@module{\module@uri@uri}}
  % TODO find a better cs name
  %\csedef{\module@id}{\noexpand\@invoke@module{\module@uri@uri}}
  \edef\this@module{%
    \expandafter\noexpand\csname module@defs@\module@uri@uri\endcsname%
  }%
  \csgdef{module@defs@\module@uri@uri}{}%
  \ifmod@qualified%
    \edef\this@qualified@module{%
      \expandafter\noexpand\csname module@defs@\module@uri@uri\endcsname%
    }%
    \csgdef{module@defs@qualified@\module@uri@uri}{}%
  \fi%
}{}%

\def\@URI{uri}

\def\@invoke@module#1#2{%
  \ifx\@URI#2%
    #1%
  \else%
    % TODO something else
    #2%
  \fi%
}

\def\activate@defs#1{%
  \edef\activate@defs@uri{\csname moduleid@#1\endcsname\@URI}%
  \ifcsundef{module@\activate@defs@uri @activated}{\csname module@defs@\activate@defs@uri\endcsname}{}%
  \@namedef{module@\activate@defs@uri @activated}{true}%
}%
\def\g@addto@macro@safe#1#2{\ifx#1\relax\def#1{}\fi\g@addto@macro#1{#2}}
\def\export@defs#1{\@ifundefined{module@id}{}{%
\expandafter\expandafter\expandafter\g@addto@macro@safe%
\expandafter\this@module\expandafter{\activate@defs{#1}}}}%
\newif\if@importing\@importingfalse
\newcommand\update@used@modules[1]{%
  \ifx\used@modules\@empty%
    \edef\used@modules{#1}%
  \else%
    \edef\used@modules{\used@modules,#1}%
  \fi}
\gdef\used@modules{}
\srefaddidkey{importmodule}
\addmetakey{importmodule}{load}
\addmetakey{importmodule}{dir}
\addmetakey[false]{importmodule}{conservative}[true]
\newcommand\importmodule[2][]{%
\metasetkeys{importmodule}{#1}%
\usemodule@maybesetcodes
\update@used@modules{#2}%
\ifx\importmodule@dir\@empty
\@importmodule[\importmodule@load]{#2}{export}%
\else\@importmodule[\importmodule@dir/#2]{#2}{export}\fi%
\ignorespacesandpars}
\newcommand\@importmodule[3][]{%
{\@importingtrue% to shut up macros while in the group opened here
\edef\@load{#1}%
\edef\@load{\expandafter\detokenize\expandafter{\@load}}%
\ifx\@load\@empty\relax\else%
\ifcsundef{module@#2@path}{\requiremodules{#1}}%
{\edef\@path{\csname module@#2@path\endcsname}%
\IfStrEq\@load\@path{\relax}% if the known path is the same as the requested one do nothing
{\PackageError{modules}% else signal an error
{Module Name Clash\MessageBreak
A module with name #2 was already loaded under the path "\@path"\MessageBreak
The imported path "\@load" is probably a different module with the\MessageBreak
same name; this is dangerous -- not importing}%
{Check whether the Module name is correct}}}%
\fi}%
\activate@defs{#2}% activate the module
\edef\@export{#3}\def\@@export{export}%prepare comparison
\ifx\@export\@@export\export@defs{#2}\fi% export the module
}%
\newcommand\usemodule[2][]{%
\metasetkeys{importmodule}{#1}%
\update@used@modules{#2}%
\ifx\importmodule@dir\@empty
\@importmodule[\importmodule@load]{#2}{noexport}%
\else\@importmodule[\importmodule@dir/#2]{#2}{noexport}\fi%
\ignorespacesandpars}
\newcommand\withusedmodules[2]{{\@for\@I:=#1\do{\activate@defs\@I}{#2}}}%
\newrobustcmd\importOMDocmodule[3][]{\importmodule[#1]{#3}}%
\let\metalanguage=\importmodule%
\let\mod@newcommand=\providerobustcmd%
\srefaddidkey{conceptdef}%
\addmetakey*{conceptdef}{title}%
\addmetakey{conceptdef}{subject}%
\addmetakey*{conceptdef}{display}%
\def\conceptdef@type{Symbol}%
\newrobustcmd\conceptdef[2][]{%
  \metasetkeys{conceptdef}{#1}%
  \ifx\conceptdef@display\st@flow\else{\emph{\conceptdef@type} #2:}\fi%
  \ifx\conceptdef@title\@empty~\else~(\emph{\conceptdef@title})\par\fi%
}%
\newif\if@symdeflocal%
\srefaddidkey{symdef}%
\define@key{symdef}{local}[true]{\@symdeflocaltrue}%
\define@key{symdef}{noverb}[all]{}%
\define@key{symdef}{align}[WithTheSymbolOfTheSameName]{}%
\define@key{symdef}{specializes}{}%
\addmetakey*{symdef}{noalign}[true]
\define@key{symdef}{primary}[true]{}%
\define@key{symdef}{assocarg}{}%
\define@key{symdef}{bvars}{}%
\define@key{symdef}{bargs}{}%
\addmetakey{symdef}{ns}%
\addmetakey{symdef}{name}%
\addmetakey*{symdef}{title}%
\addmetakey*{symdef}{description}%
\addmetakey{symdef}{subject}%
\addmetakey*{symdef}{display}%

\RequirePackage{presentation}

\def\define@in@module#1#2{
  \expandafter\edef\csname #1\endcsname{#2}
  \edef\define@in@module@temp{%
    \def\expandafter\noexpand\csname#1\endcsname%
    {#2}%
  }%
  \if@symdeflocal\else%
  \expandafter\expandafter\expandafter%
      \g@addto@macro@safe\expandafter\this@module\expandafter{\define@in@module@temp}%
  \fi%
}

\catcode`\&=12
\def\@Ampersand{&}
\catcode`\&=4



\def\symdecl#1{%
  \ifcsname module@uri@uri\endcsname%
    \seturi[symdef@uri@]{\module@uri@uri\@QuestionMark#1}%
    \define@in@module\symdef@uri@uri{\noexpand\@invoke@symbol{\symdef@uri@uri}}%
    \define@in@module{#1}{\noexpand\@invoke@symbol{\symdef@uri@uri}}%
    \message{^^JNew symbol: \symdef@uri@uri}
  \else%
    % TODO?
  \fi%
}


\def\@invoke@symbol#1{%
  \def\@invoke@symbol@first{#1}
  \symbol@args%
}

\newcommand\symbol@args[1][]{%
  \@invoke@symbol@\@invoke@symbol@first{#1}
}

\def\@invoke@symbol@#1#2{%
  % #1: URI
  % #2: options
  % TODO \setnotation variants
  \notation@parse@params{#2}{}%
  \def\notation@temp@fragment{}%
  \ifx\notation@curr@arity\@empty\else%
    \edef\notation@temp@fragment{arity=\notation@curr@arity}%
  \fi%
  \ifx\notation@curr@lang\@empty\else%
    \ifx\notation@temp@fragment\@empty%
      \edef\notation@temp@fragment{lang=\notation@curr@lang}%
    \else%
      \edef\notation@temp@fragment{\notation@temp@fragment\@Ampersand lang=\notation@curr@lang}%
    \fi%
  \fi%
  \ifx\notation@curr@variant\@empty\else%
    \ifx\notation@temp@fragment\@empty%
      \edef\notation@temp@fragment{variant=\notation@curr@variant}%
    \else%
      \edef\notation@temp@fragment{\notation@temp@fragment\@Ampersand variant=\notation@curr@variant}%
    \fi%
  \fi%
  \csname #1\@Fragment\notation@temp@fragment\endcsname%
}



\mod@newcommand\notation[2][]{%
  \edef\notation@first{#1}%
  \edef\notation@second{#2}%
  \notation@%
}

\newcommand\notation@[2][0]{%
  \notation@@[\notation@first]\notation@second[#1]{#2}%
}

\def\notation@@[#1]#2[#3]#4{%
  \expandafter\expandafter\expandafter\notation@extract@uri\csname #2\endcsname\notation@end%
  \notation@parse@params{#1}{#3}
  \let\notation@curr@todo@args\notation@curr@args%
  \def\notation@temp@notation{}%
  \StrLen\notation@curr@args[\notation@temp@arity]%
  \expandafter\renewcommand\expandafter\notation@temp@notation%
    \expandafter[\notation@temp@arity]{#4}%
  % precedence
  \IfSubStr\notation@curr@precs;{%
    \StrCut\notation@curr@precs;\notation@curr@prec\notation@curr@precs%
    \ifx\notation@curr@prec\@empty\def\notation@curr@prec{0}\fi%
  }{%
    \ifx\notation@curr@precs\@empty%
      \def\notation@curr@prec{0}%
    \else%
      \edef\notation@curr@prec{\notation@curr@precs}%
      \def\notation@curr@precs{}%
    \fi%
  }%
  % arguments
  \def\notation@curr@extargs{}
  \notation@do@args%
}

\def\notation@do@args{%
  \def\notation@nextarg@temp{}%
  \ifx\notation@curr@todo@args\@empty%
    \notation@after%
  \else%
    % argument precedence
    \IfSubStr\notation@curr@precs{x}{%
      \StrCut\notation@curr@precs{x}\notation@curr@argprec\notation@curr@precs%
    }{%
      \edef\notation@curr@argprec{\notation@curr@precs}%
      \def\notation@curr@precs{}%
    }%
    \ifx\notation@curr@argprec\@empty%
      \def\notation@curr@argprec{0}%
    \fi%
    \StrChar\notation@curr@todo@args1[\notation@argchar]%
    \StrGobbleLeft\notation@curr@todo@args1[\notation@curr@todo@args]%
    \expandafter\ifx\notation@argchar i%
      % normal argument
      % TODO something better than empty \prefix for argument precedence
      \edef\notation@nextarg@temp{{\noexpand\prefix[p=\notation@curr@argprec]{}{########1}}}%
      \expandafter\g@addto@macro@safe\expandafter\notation@curr@extargs%
        \expandafter{\notation@nextarg@temp}%
      \expandafter\expandafter\expandafter\notation@do@args%
    \else%
      % associative argument
      \expandafter\expandafter\expandafter\notation@parse@assocarg%
    \fi%
  \fi%
}

\def\notation@parse@assocarg#1{%
  \edef\notation@nextarg@temp{{\noexpand\assoc[p=\notation@curr@argprec]{\unexpanded{#1}}{########1}}}%
  \expandafter\g@addto@macro@safe\expandafter\notation@curr@extargs%
  \expandafter{\notation@nextarg@temp}%
  \notation@do@args%
}

\def\notation@after{
  \let\ex\expandafter%
  \ex\ex\ex\def\ex\ex\ex\notation@temp@notation\ex\ex\ex%
    {\ex\notation@temp@notation\notation@curr@extargs}%
  \edef\notation@temp@notation{\noexpand\prefix[p=\notation@curr@prec]{}{\ex\unexpanded\ex{\notation@temp@notation}}}
  \def\notation@temp@fragment{}
  \ifx\notation@curr@arity\@empty\else%
    \edef\notation@temp@fragment{arity=\notation@curr@arity}
  \fi%
  \ifx\notation@curr@lang\@empty\else%
    \ifx\notation@temp@fragment\@empty%
      \edef\notation@temp@fragment{lang=\notation@curr@lang}%
    \else%
      \edef\notation@temp@fragment{\notation@temp@fragment\@Ampersand lang=\notation@curr@lang}%
    \fi%
  \fi%
  \ifx\notation@curr@variant\@empty\else%
    \ifx\notation@temp@fragment\@empty%
      \edef\notation@temp@fragment{variant=\notation@curr@variant}%
    \else%
      \edef\notation@temp@fragment{\notation@temp@fragment\@Ampersand variant=\notation@curr@variant}%
    \fi%
  \fi%
  \edef\notation@csname{\notation@uri\@Fragment\notation@temp@fragment}%
  \ex\ex\ex\ex\ex\ex\ex\newcommand\ex\ex\ex\csname\ex\ex\ex\notation@csname%
    \ex\ex\ex\endcsname\ex\ex\ex[\ex\notation@temp@arity\ex]%
    \ex{\notation@temp@notation}%
  \message{^^Jnew notation: >>\notation@csname<<^^J   \meaning\notation@temp@notation}
  \edef\symdecl@temps{%
    \noexpand\newcommand\ex\noexpand\csname\notation@csname\endcsname[\notation@temp@arity]%
  }%
  \ex\ex\ex\g@addto@macro@safe\ex\this@module\ex{\symdecl@temps}%
  \ex\ex\ex\g@addto@macro@safe\ex\this@module\ex{\ex{\notation@temp@notation}}%
}

\def\notation@extract@uri#1#2\notation@end{%
  \ifx\@invoke@symbol#1%
    \edef\notation@uri{#2}%
  \else%
    \expandafter\notation@extract@uri#1#2\notation@end%
  \fi%
  %
}

\def\notation@parse@params#1#2{%
  \def\notation@curr@precs{}%
  \def\notation@curr@args{}%
  \def\notation@curr@variant{}%
  \def\notation@curr@arity{}%
  \def\notation@curr@provided@arity{#2}
  \def\notation@curr@lang{}%
  \def\notation@options@temp{#1}
  \notation@parse@params@%
  \ifx\notation@curr@args\@empty%
    \ifx\notation@curr@provided@arity\@empty%
      \notation@num@to@ia\notation@curr@arity%
    \else%
      \notation@num@to@ia\notation@curr@provided@arity%
    \fi%
  \fi%
}
\def\notation@parse@params@{%
  \IfSubStr\notation@options@temp,{%
    \StrCut\notation@options@temp,\notation@option@temp\notation@options@temp%
    \notation@parse@param%
    \notation@parse@params@%
  }{\ifx\notation@options@temp\@empty\else%
    \let\notation@option@temp\notation@options@temp%
    \notation@parse@param%
  \fi}%
}

\def\notation@parse@param{%
  \trimstring\notation@option@temp%
  \ifx\notation@option@temp\@empty\else%
    \IfSubStr\notation@option@temp={%
      \StrCut\notation@option@temp=\notation@key\notation@value%
      \trimstring\notation@key%
      \trimstring\notation@value%
      \IfStrEq\notation@key{prec}{%
        \edef\notation@curr@precs{\notation@value}%
      }{%
      \IfStrEq\notation@key{args}{%
        \edef\notation@curr@args{\notation@value}%
      }{%
      \IfStrEq\notation@key{lang}{%
        \edef\notation@curr@lang{\notation@value}%
      }{%
      \IfStrEq\notation@key{variant}{%
        \edef\notation@curr@variant{\notation@value}%
      }{%
      \IfStrEq\notation@key{arity}{%
        \edef\notation@curr@arity{\notation@value}%
      }{%
      }}}}}%
    }{%
        \edef\notation@curr@variant{\notation@option@temp}%
    }%
  \fi%
}

\def\notation@num@to@ia#1{%
  \IfInteger{#1}{
    \notation@num@to@ia@#1%
  }{%
    %
  }%
}
\def\notation@num@to@ia@#1{%
  \ifnum#1>0%
    \edef\notation@curr@args{\notation@curr@args i}%
    \expandafter\notation@num@to@ia@\expandafter{\the\numexpr#1-1\@Space}%
  \fi%
}

\def\symdef{\@ifnextchar[{\@symdef}{\@symdef[]}}%
\def\@symdef[#1]#2{\@ifnextchar[{\@@symdef[#1]{#2}}{\@@symdef[#1]{#2}[0]}}%
\def\@mod@nc#1{\mod@newcommand{#1}[1]}%
\def\ignorespacesandpars{\begingroup\catcode13=10\@ifnextchar\relax{\endgroup}{\endgroup}}
\def\ignorespacesandparsafterend#1\ignorespaces\fi{#1\fi\ignorespacesandpars}
\def\ignorespacesandpars{\ifhmode\unskip\fi\@ifnextchar\par{\expandafter\ignorespacesandpars\@gobble}{}}
\def\@@symdef[#1]#2[#3]#4{%
  \@symdeflocalfalse%
  \metasetkeys{symdef}{#1}%
  \usemodule@maybesetcodes%
  \expandafter\mod@newcommand\csname modules@#2@pres@\endcsname[#3]{#4}%
  \expandafter\mod@newcommand\csname #2\endcsname[1][]%
  {\csname modules@#2@pres@##1\endcsname}%
  \expandafter\@mod@nc\csname mod@symref@#2\expandafter\endcsname\expandafter%
  {\expandafter\mod@termref\expandafter{\module@id}{#2}{##1}}%
  \if@symdeflocal%
  \else%
    \ifcsundef{module@id}{}{%
      \expandafter\g@addto@macro@safe\this@module%
      {\expandafter\mod@newcommand\csname modules@#2@pres@\endcsname[#3]{#4}}%
      \expandafter\g@addto@macro@safe\this@module%
      {\expandafter\mod@newcommand\csname #2\endcsname[1][]%
      {\csname modules@#2@pres@##1\endcsname}}%
      \expandafter\expandafter\expandafter\g@addto@macro@safe\expandafter\this@module\expandafter%
      {\expandafter\@mod@nc\csname mod@symref@#2\expandafter\endcsname\expandafter%
      {\expandafter\mod@termref\expandafter{\module@id}{#2}{##1}}}%
      \ifmod@qualified%
        \expandafter\g@addto@macro@safe\this@qualified@module%
        {\expandafter\mod@newcommand\csname modules@#2@pres@qualified\endcsname[#3]{#4}}%
        \expandafter\g@addto@macro@safe\this@qualified@module%
        {\expandafter\def\csname#2@qualified\endcsname{\csname modules@#2@pres@qualified\endcsname}}%
      \fi%
    }% mod@qualified
  \fi% symdeflocal
  \ifmod@show%
    \ifx\symdef@display\st@flow\else{\noindent\emph{\symdef@type} #2:}\fi%
    \ifx\symdef@title\@empty~\else~(\emph{\symdef@title})\par\fi%
  \fi%
  \ignorespacesandpars%
}% mod@show
\def\symdef@type{Symbol}%
\def\symvariant#1{%
  \@ifnextchar[{\@symvariant{#1}}{\@symvariant{#1}[0]}%
  }%
\def\@symvariant#1[#2]#3#4{%
  \usemodule@maybesetcodes
  \expandafter\mod@newcommand\csname modules@#1@pres@#3\endcsname[#2]{#4}%
  \ifcsundef{module@id}{}{%
    \expandafter\g@addto@macro@safe\this@module%
    {\expandafter\mod@newcommand\csname modules@#1@pres@#3\endcsname[#2]{#4}}%
  }%
\ignorespacesandpars}%
\def\resymdef{%
  \@ifnextchar[{\@resymdef}{\@resymdef[]}%
}%
\def\@resymdef[#1]#2{%
  \@ifnextchar[{\@@resymdef[#1]{#2}}{\@@resymdef[#1]{#2}[0]}%
}%
\def\@@resymdef[#1]#2[#3]#4{%
  \PackageError{modules}%
  {The \protect\resymdef macro is deprecated}{use the \protect\symvariant instead!}%
}%
\let\abbrdef\symdef%
\define@key{DefMathOp}{name}{%
  \def\defmathop@name{#1}%
}%
\newrobustcmd\DefMathOp[2][]{%
  \setkeys{DefMathOp}{#1}%
  \symdef[#1]{\defmathop@name}{#2}%
}%
\newcommand\assdef[2][]{#2}
\let\vardef\abbrdef
\addmetakey{symtest}{name}%
\addmetakey{symtest}{variant}%
\newrobustcmd\symtest[3][]{%
  \if@importing%
  \else%
    \metasetkeys{symtest}{#1}%
    \par\noindent \textbf{Symbol}~%
    \ifx\symtest@name\@empty\texttt{#2}\else\texttt{\symtest@name}\fi%
    \ifx\symtest@variant\@empty\else\ (variant \texttt{\symtest@variant})\fi%
    \ with semantic macro %
    \texttt{\textbackslash #2\ifx\symtest@variant\@empty\else[\symtest@variant]\fi}%
    : used e.g. in \ensuremath{#3}%
  \fi%
  \ignorespacesandpars%
}%
\addmetakey{abbrtest}{name}%
\newrobustcmd\abbrtest[3][]{%
  \if@importing%
  \else%
    \metasetkeys{abbrtest}{#1}%
    \par\noindent \textbf{Abbreviation}~%
    \ifx\abbrtest@name\@empty\texttt{#2}\else\texttt{\abbrtest@name}\fi%
    : used e.g. in \ensuremath{#3}%
  \fi%
  \ignorespacesandpars}%
\def\mod@true{true}%
\addmetakey[false]{termdef}{local}%
\addmetakey{termdef}{name}%
\newrobustcmd\termdef[3][]{%
  \metasetkeys{termdef}{#1}%
  \expandafter\mod@newcommand\csname#2\endcsname[0]{#3\xspace}%
  \ifx\termdef@local\mod@true%
  \else%
    \ifcsundef{module@id}{}{%
      \expandafter\g@addto@macro@safe\this@module%
      {\expandafter\mod@newcommand\csname#2\endcsname[0]{#3\xspace}}%
    }%
  \fi%
}%
\def\@capitalize#1{\uppercase{#1}}%
\newrobustcmd\capitalize[1]{\expandafter\@capitalize #1}%
\newcommand\mod@component[1]{}
\newcommand\mod@termref[3]{\def\@test{#3}%
  \@ifundefined{module@defs@#1}{%
    \protect\G@refundefinedtrue%
    \if@trwarn
      \PackageWarning{modules}{`\protect\termref' with unidentified cd "#1":\MessageBreak
        the cd key must reference an active module}%
    \else
      \PackageError{modules}{`\protect\termref' with unidentified cd "#1"}
      {the cd key must reference an active module}%
    \fi}%
  {\def\@label{sref@#2@#1\mod@component{#1}@target}%
    \@ifundefined{module@#1@path}% local reference
    {\sref@hlink@ifh{\@label}{\ifx\@test\@empty #2\else #3\fi}%
    }%
    {\def\@uri{\csname module@#1@path\endcsname\mod@component{#1}.pdf\#\@label}%
      \sref@href@ifh{\@uri}{\ifx\@test\@empty #2\else #3\fi}%
}%
  }}%
\def\@Sms{sms}
\newif\if@smsmode\@smsmodefalse

\def\usemodule@escapechar@allowed{true}
\def\usemodule@allow#1{
  \expandafter\let\csname usemodule@allowedmacro@#1\endcsname\usemodule@escapechar@allowed
}
\def\usemodule@allowenv#1{
  \expandafter\let\csname usemodule@allowedenv@#1\endcsname\usemodule@escapechar@allowed
}

\usemodule@allow{symdef}
\usemodule@allow{abbrdef}
\usemodule@allow{importmodule}
\usemodule@allowenv{module}
\usemodule@allow{importmhmodule}
\usemodule@allow{gimport}
\usemodule@allowenv{modsig}
\usemodule@allowenv{mhmodsig}
\usemodule@allowenv{mhmodnl}
\usemodule@allowenv{modnl}
\usemodule@allow{symvariant}
\usemodule@allow{symi}
\usemodule@allow{symii}
\usemodule@allow{symiii}
\usemodule@allow{symiv}

\catcode`\.=0
.catcode`.\=13
.def.@active@slash{\}
.catcode`.<=1
.catcode`.>=2
.catcode`.{=12
.catcode`.}=12
.def.@open@brace<{>
.def.@close@brace<}>
.catcode`.\=0
\catcode`\.=12
\catcode`\{=1
\catcode`\}=2
\catcode`\<=12
\catcode`\>=12

\def\usemodule@escapechar{%
    \def\usemodule@escape@currcs{}%
    \usemodule@escape@parse@nextchar@%
}%

\long\def\usemodule@escape@parse@nextchar@#1{%
    \ifcat a#1 %
        \edef\usemodule@escape@currcs{\usemodule@escape@currcs#1}%
        \let\usemodule@do@next\usemodule@escape@parse@nextchar@%
    \else%
      \def\usemodule@last@char{#1}%
      \def\usemodule@do@next{\usemodule@escapechar@checkcs}%
    \fi%
    \usemodule@do@next%
}

\def\usemodule@escapechar@beginstring{begin}
\def\usemodule@escapechar@endstring{end}

\def\usemodule@escapechar@checkcs{
    \ifx\usemodule@escape@currcs\usemodule@escapechar@beginstring%
        \edef\usemodule@do@next{\noexpand\usemodule@escapechar@checkbeginenv\usemodule@last@char}%
    \else%
        \ifx\usemodule@escape@currcs\usemodule@escapechar@endstring%
          \edef\usemodule@do@next{\noexpand\usemodule@escapechar@checkendenv\usemodule@last@char}%
        \else%
            \expandafter\ifx\csname usemodule@allowedmacro@\usemodule@escape@currcs\endcsname%
                \usemodule@escapechar@allowed%
              \ifx\usemodule@last@char\@open@brace%
                \expandafter\let\expandafter\usemodule@do@next@ii\csname\usemodule@escape@currcs\endcsname
                \edef\usemodule@do@next{\noexpand\usemodule@converttoproperbraces\@open@brace}
              \else%
                \reset@usemodule@catcodes%
                \edef\usemodule@do@next{\expandafter\noexpand\csname\usemodule@escape@currcs\endcsname\usemodule@last@char}
              \fi%
            \else\def\usemodule@do@next{\relax\usemodule@last@char}\fi%
        \fi%
    \fi%
    \usemodule@do@next%
}

\expandafter\expandafter\expandafter\def%
\expandafter\expandafter\expandafter\usemodule@converttoproperbraces%
\expandafter\@open@brace\expandafter#\expandafter1\@close@brace{%
  \reset@usemodule@catcodes%
  \usemodule@do@next@ii{#1}%
}

\expandafter\expandafter\expandafter\def%
\expandafter\expandafter\expandafter\usemodule@escapechar@checkbeginenv%
\expandafter\@open@brace\expandafter#\expandafter1\@close@brace{%
    \expandafter\ifx\csname usemodule@allowedenv@#1\endcsname\usemodule@escapechar@allowed%
        \reset@usemodule@catcodes%
        \def\usemodule@do@next{\begin{#1}}%
    \else%
        \def\usemodule@do@next{#1}%
    \fi%
    \usemodule@do@next%
}

\expandafter\expandafter\expandafter\def%
\expandafter\expandafter\expandafter\usemodule@escapechar@checkendenv%
\expandafter\@open@brace\expandafter#\expandafter1\@close@brace{%
    \expandafter\ifx\csname usemodule@allowedenv@#1\endcsname\usemodule@escapechar@allowed%
        %\reset@usemodule@catcodes%
        \def\usemodule@do@next{\end{#1}}%
    \else%
      \def\usemodule@do@next{#1}%
    \fi%
    \usemodule@do@next%
}

\def\set@usemodule@catcodes{%
    \global\catcode`\\=13%
    \global\catcode`\#=12%
    \global\catcode`\{=12%
    \global\catcode`\}=12%
    \global\catcode`\$=12%
    \global\catcode`\^=12%
    \global\catcode`\_=12%
    \global\catcode`\&=12%
    \expandafter\let\@active@slash\usemodule@escapechar%
}

\def\reset@usemodule@catcodes{%
    \global\catcode`\\=0%
    \global\catcode`\#=6%
    \global\catcode`\{=1%
    \global\catcode`\}=2%
    \global\catcode`\$=3%
    \global\catcode`\^=7%
    \global\catcode`\_=8%
    \global\catcode`\&=4%
}

\def\usemodule@maybesetcodes{%
  \if@smsmode\set@usemodule@catcodes\fi%
}

\def\requiremodules@smsmode#1{
  \setbox\modules@import@tempbox\vbox{%
    \@smsmodetrue%
    \set@usemodule@catcodes%
    \hbadness=100000\relax%
    \hsize=10pt%
    \hfuzz=10000pt\relax%
    \input{#1.tex}%
    \reset@usemodule@catcodes%
    }%
    \usemodule@maybesetcodes
}

\newif\if@oldsmsmode\@oldsmsmodefalse
\newbox\modules@import@tempbox
\newrobustcmd\requiremodules[1]{%
  \mod@showfalse%
  \@importingtrue% save state and ensure silence while reading sms
  \edef\mod@path{#1}%
  \edef\mod@path{\expandafter\detokenize\expandafter{\mod@path}}%
  \requiremodules@smsmode{#1}%
}%
\newrobustcmd\@requiremodules[1]{%
  \if@tempswa\requiremodules{#1}\fi%
}%
\def\inputref@preskip{}
\def\inputref@postskip{}
\newrobustcmd\inputref[1]{%
  \def\@Slash{/}
  \edef\@load{#1}%
  \StrChar{\@load}{1}[\@testchar]
  \inputref@preskip%
  \ifx\@testchar\@Slash%
    \edef\mod@path{#1}%
    \edef\mod@path{\expandafter\detokenize\expandafter{\mod@path}}%
    \input{#1}%
  \else%
    \@cpath{#1}\input{\@CanPath.tex}%
  \fi%
  \inputref@postskip%
}%
\def\requirepackage#1#2{\makeatletter\input{#1.sty}\makeatother}%
\newcommand\namespace[2][]{\ignorespacesandpars}
\newrobustcmd\sinput[1]{%
  \PackageError{modules}%
  {The `\protect\sinput' macro is deprecated}{use the \protect\input instead!}%
}%
\newrobustcmd\sinputref[1]{%
  \PackageError{modules}%
  {The \protect\sinputref macro is deprecated}{use the \protect\inputref instead!}%
}%
\define@key{module}{uses}{%
  \@for\module@tmp:=#1\do{\activate@defs\module@tmp\export@defs\module@tmp}%
}%
\define@key{module}{usesqualified}{%
  \@for\module@tmp:=#1\do{\activate@defs{qualified@\module@tmp}\export@defs\module@tmp}%
}%
\def\coolurion{\PackageWarning{modules}{coolurion is obsolete, please remove}}%
\def\coolurioff{\PackageWarning{modules}{coolurioff is obsolete, please remove}}%
\def\csymdef{\@ifnextchar[{\@csymdef}{\@csymdef[]}}%
\def\@csymdef[#1]#2{%
  \@ifnextchar[{\@@csymdef[#1]{#2}}{\@@csymdef[#1]{#2}[0]}%
}%
\def\@@csymdef[#1]#2[#3]#4#5{%
  \@@symdef[#1]{#2}[#3]{#4}%
}%
\def\notationdef[#1]#2#3{}
\newrobustcmd\reqmodules[2]{%
  \ifinlist{#1}{\@register}{}{\listadd\@register{#1}\input{#1.#2}}%
}%
\newcounter{@pl}
\DeclareListParser*{\forpathlist}{/}
\def\file@name#1{%
  \setcounter{@pl}{0}%
  \forpathlist{\stepcounter{@pl}\listadd\@pathlist}{#1}
  \def\do##1{%
    \ifnumequal{\value{@pl}}{1}{##1}{\addtocounter{@pl}{-1}}
  }%
  \dolistloop{\@pathlist}%
}%
\def\file@path#1{%
  \setcounter{@pl}{0}%
  \forpathlist{\stepcounter{@pl}\listadd\@pathlist}{#1}%
  \def\do##1{%
    \ifnumequal{\value{@pl}}{1}{}{%
      \addtocounter{@pl}{-1}%
      \ifnumequal{\value{@pl}}{1}{##1}{##1/}%
    }%
  }%
  \dolistloop{\@pathlist}%
}%
\def\@NEWcurrentprefix{}
\def\NEWrequiremodules#1{%
  \def\@pref{\file@path{#1}}%
  \ifx\@pref\@empty%
  \else%
    \xdef\@NEWcurrentprefix{\@NEWcurrentprefix/\@pref}%
  \fi%
  \edef\@input@me{\@NEWcurrentprefix/\file@name{#1}}%
  \message{requiring \@input@me}\reqmodule{\@input@me}%
}%
\endinput
%%
%% End of file `modules.sty'.

package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
DefKeyVal('obs','name','Semiverbatim');
DefKeyVal('obs','algebra','Semiverbatim');
DefEnvironment('{observable} OptionalKeyVals:obs',
       "<omdoc:observable name='&GetKeyVal(#1,'name')'"
     .                    "?&defined(&GetKeyVal(#1,'algebra'))(algebra='&GetKeyVal(#1,'algebra')')()>"
     .   "#body"
     . "</omdoc:observable>\n");
DefConstructor('\obsref{}',"<omdoc:observable xref='#1'/>");
DefKeyVal('refinement','id','Semiverbatim');
DefEnvironment('{refinement} OptionalKeyVals:refinement',
       "<omdoc:refinement ?&defined(&GetKeyVal(#1,'id))(xml:id='&GetKeyVal(#1,'id')')()>"
     . "#body"
     . "</omdoc:refinement>\n");
DefKeyVal('opdef,'id','Semiverbatim');
DefEnvironment('{opdef} OptionalKeyVals:opdef',
       "<omdoc:opdef ?&defined(&GetKeyVal(#1,'id))(xml:id='&GetKeyVal(#1,'id')')()>"
     . "#body"
     . "</omdoc:opdef>\n");
DefKeyVal('system,'id','Semiverbatim');
DefEnvironment('{system} OptionalKeyVals:id',
       "<omdoc:system ?&defined(&GetKeyVal(#1,'id))(xml:id='&GetKeyVal(#1,'id)')()>"
     . "#body"
     . "</omdoc:system>\n");
DefKeyVal('realization,'id','Semiverbatim');
DefEnvironment('{realization} OptionalKeyVals:realization,
       "<omdoc:realization ?&defined(&GetKeyVal(#1,'id))(xml:id='&GetKeyVal(#1,'id')')()>"
     . "#body"
     . "</omdoc:realization>\n");
DefKeyVal('preparation,'id','Semiverbatim');
DefEnvironment('{preparation} OptionalKeyVals:preparation',
       "<omdoc:preparation ?&defined(&GetKeyVal(#1,'id))(xml:id='&GetKeyVal(#1,'id')')()>"
     . "#body"
     . "</omdoc:preparation>\n");
DefKeyVal('state','id','Semiverbatim');
DefKeyVal('state','of','Semiverbatim');
DefEnvironment('{state} OptionalKeyVals:state',
       "<omdoc:state ?&defined(&GetKeyVal(#1,'id))(xml:id='&GetKeyVal(#1,'id)')()"
     .              "?&defined(&GetKeyVal(#1,'of))(of='&GetKeyVal(#1,'of)')()>"
     .   "#body"
     . "</omdoc:state>\n");
DefKeyVal('value','id','Semiverbatim');
DefKeyVal('value','for','Semiverbatim');
DefEnvironment('{state} OptionalKeyVals:value',
       "<omdoc:value ?&defined(&GetKeyVal(#1,'id'))(xml:id='&GetKeyVal(#1,'id)')()"
     .              "?&defined(&GetKeyVal(#1,'for'))(for='&GetKeyVal(#1,'of)')()>"
     .   "#body"
     . "</omdoc:value>\n");
DefKeyVal('measurement,'id','Semiverbatim');
DefEnvironment('{measurement} OptionalKeyVals:measurement,
       "<omdoc:measurement ?&defined(&GetKeyVal(#1,'id'))(xml:id='&GetKeyVal(#1,'id)')()>"
     .   "#body"
     . "</omdoc:measurement>\n");
DefKeyVal('experiment,'id','Semiverbatim');
DefEnvironment('{experiment} OptionalKeyVals:experiment,
       "<omdoc:experiment ?&defined(&GetKeyVal(#1,'id'))(xml:id='&GetKeyVal(#1,'id)')()>"
     . "#body"
     . "</omdoc:experiment>\n");
DefKeyVal('evidence,'id','Semiverbatim');
DefEnvironment('{evidence} OptionalKeyVals:evidence,
       "<omdoc:evidence ?&defined(&GetKeyVal(#1,'id'))(xml:id='&GetKeyVal(#1,'id)')()>"
     . "#body"
     . "</omdoc:evidence>\n");
DefKeyVal('interpretation,'id','Semiverbatim');
DefEnvironment('{interpretation} OptionalKeyVals:interpretation,
       "<omdoc:interpretation ?&defined(&GetKeyVal(#1,'id'))(xml:id='&GetKeyVal(#1,'id)')()>"
     . "#body"
     . "</omdoc:interpretation>\n");
Tag('omdoc:observable',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:realization',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:preparation',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:state',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:value',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:measurement',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:experiment',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:evidence',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:interpretation',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:refinement',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:opdef',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:system',afterOpen=>\&numberIt,afterClose=>\&locateIt);
1;

% \iffalse meta-comment
% MathHub support for sTeX
% Copyright (c) 2015 Michael Kohlhase, all rights reserved
%               this file is released under the
%               LaTeX Project Public License (LPPL)
%
% The original of this file is in the public repository at 
% http://github.com/KWARC/sTeX/
% \fi
%   
% \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<*driver>
\documentclass{ltxdoc}
\usepackage{url,array,float}
\usepackage[show]{ed}
\usepackage[hyperref=auto,style=alphabetic]{biblatex}
\addbibresource{kwarcpubs.bib}
\addbibresource{extpubs.bib}
\addbibresource{kwarccrossrefs.bib}
\addbibresource{extcrossrefs.bib}
\usepackage{stex-logo,mathhub}
\usepackage{ctangit}
\usepackage{hyperref}
\makeindex
\floatstyle{boxed}
\newfloat{exfig}{thp}{lop}
\floatname{exfig}{Example}
\newcommand\tracissue[1]{\cite{sTeX:online}, \hyperlink{http://trac.kwarc.info/sTeX/ticket/#1}{issue #1}}
\begin{document}\DocInput{mathhub.dtx}\end{document}
%</driver>
% \fi
% 
%\iffalse\CheckSum{438}\fi
% 
% \GetFileInfo{mathhub.sty}
% \changes{v1.0}{2015/11/09}{moved all MH functionality into one DTX file}
% \changes{v1.0}{2016/06/11}{Deprecated \texttt{mhviewsketch}}
% 
% \MakeShortVerb{\|}
%
% \def\omdoc{OMDoc}
% \def\latexml{{\LaTeX}ML}
% \title{MathHub Support for \sTeX\thanks{Version {\fileversion} (last revised
%        {\filedate})}}
%    \author{Michael Kohlhase\\
%            Jacobs University, Bremen\\
%            \url{http://kwarc.info/kohlhase}}
% \maketitle
%
% \begin{abstract}
%   The |sref| package is part of the {\sTeX} collection, a version of {\TeX/\LaTeX} that
%   allows to markup {\TeX/\LaTeX} documents semantically without leaving the document
%   format, essentially turning {\TeX/\LaTeX} into a document format for mathematical
%   knowledge management (MKM).
%
%   The |mathhub| packages extend \sTeX with support for the MathHub.info portal 
% \end{abstract}
%
%\tableofcontents\newpage
% 
% \section{Introduction}\label{sec:intro}
% 
% Much of the \sTeX content is hosted on \textsf{MathHub} (\url{http://MathHub.info}), a
% portal and archive for flexiformal mathematics. \textsf{MathHub} offers GIT repositories
% (public and private escrow) for mathematical documentation projects, online and offline
% authoring and document development infrastructure, and a rich, interactive reading
% interface. The |modules| package supports repository-sensitive operations on
% \textsf{MathHub}.
% 
% Note that \textsf{MathHub} has two-level repository names of the form
% \meta{group}|/|\meta{repo}, where \meta{group} is a \textsf{MathHub}-unique repository
% group and \meta{repo} a repository name that is \meta{group}-unique. The file and
% directory structure of a repository is arbitrary -- except that it starts with the
% directory |source| because they are Math Archives in the sense
% of~\cite{HorIacJuc:cscpnrr11}. But this structure can be hidden from the \sTeX author
% with \textsf{MathHub}-enabled versions of the \sTeX macros, which are defined in this
% package.
%
% \paragraph{Caveat} if you want to use the \textsf{MathHub} support macros (let's call
% them \textbf{mh-variants}), then every time a module is imported or a document fragment
% is included from another repos, the mh-variant |\importmhmodule| must be used, so that
% the ``current repository'' is set accordingly. To be exact, we only need to use
% mh-variants, if the imported module or included document fragment use mh-variants.
% 
% \section{The User Interface}\label{sec:user}
% 
% \subsection{Package Options}\label{sec:user:options}
% 
% none so far
%
% \subsection{\texttt{modules-mh}: MH Variants for Modules}\label{sec:user:modules}
%
% The \DescribeMacro{\importmhmodule}|importmhmodule| macro is a variant of
% |\importmodule| with repository support. Instead of writing 
% \begin{verbatim}
% \defpath{MathHub}{/user/foo/lmh/MathHub}
% \importmodule[load=\MathHub{fooMH/bar/source/baz/foobar}]{foobar}
% \end{verbatim}
% we can simply write (assuming that |\MathHub| is defined as above)
% \begin{verbatim}
% \importmhmodule[repos=fooMH/bar,path=baz/foobar]{foobar}
% \end{verbatim}
% Note that the |\importmhmodule| form is more semantic, which allows more advanced
% document management features in \textsf{MathHub}. 
% 
% If |baz/foobar| is the ``current module'', i.e. if we are on the \textsf{MathHub} path
% \ldots|MathHub/fooMH/bar|\ldots, then stating the repository in the first optional
% argument is redundant, so we can just use
% \begin{verbatim}
% \importmhmodule[path=baz/foobar]{foobar}
% \end{verbatim}
% if no file needs to loaded, |\importmhmodule| is the same as |\importmodule|. 
%
% Of course, neither {\LaTeX} nor \latexml know about the repositories when they are
% called from a file system, so we can use the
% \DescribeMacro{\mhcurrentrepos}|\mhcurrentrepos| macro to tell them. But this is only
% needed to initialize the infrastructure in the driver file. In particular, we do not
% need to set it in in each module, since the |\importmhmodule| macro sets the current
% repository automatically.
% 
% The \DescribeMacro{\usemhmodule}|\usemhmodule| is the analog to |\usemodule|.
% 
% For this, the |modules| package supplies the mh-variants
% \DescribeMacro{\mhinputref}|\mhinputref| and \DescribeMacro{\mhinput}|\mhinput| of the
% |\inputref| macro introduced above and normal {\LaTeX} |\input| macro.
%
% \subsection{\texttt{omtext-mh}: MH Variants for OMText}\label{sec:user:modules}
%
% The \DescribeMacro{\mhcgraphics}|\mhcgraphics| macro is a variant of |\mycgraphics| with
% repository support. Instead of writing
% \begin{verbatim}
% \defpath{MathHub}{/user/foo/lmh/MathHub}
% \mycgraphics{\MathHub{fooMH/bar/source/baz/foobar}}
% \end{verbatim}
% we can simply write (assuming that |\MathHub| is defined as above)
% \begin{verbatim}
% \mhcgraphics[fooMH/bar]{baz/foobar}
% \end{verbatim}
% Note that the |\mhcgraphics| form is more semantic, which allows more advanced document
% management features in \textsf{MathHub}.
% 
% \subsection{\texttt{smultiling-mh}: MH Variants for Multilinguality}\label{sec:user:smultiling}
% \ednote{needs to be documented}
% \ednote{mhmodsig seems to be missing what happened?}
%
% \subsection{\texttt{structview-mh}: MH Variants for Structures and
% Views}\label{sec:user:structview}
% \ednote{needs to be documented}
%
% \subsection{\textsf{mikoslides-mh}: Support  for MiKo Slides}\label{sec:user:mikoslides}
% 
% The \DescribeMacro{\mhframeimage}|\mhframeimage| macro is a variant of |\frameimage|
% with repository support. Instead of writing
% \begin{verbatim}
% \defpath{MathHub}{/user/foo/lmh/MathHub}
% \frameimage{\MathHub{fooMH/bar/source/baz/foobar}}
% \end{verbatim}
% we can simply write (assuming that |\MathHub| is defined as above)
% \begin{verbatim}
% \mhframeimage[fooMH/bar]{baz/foobar}
% \end{verbatim}
% Note that the |\mhframeimage| form is more semantic, which allows more advanced document
% management features in \textsf{MathHub}.
% 
% If |baz/foobar| is the ``current module'', i.e. if we are on the \textsf{MathHub} path
% \ldots|MathHub/fooMH/bar|\ldots, then stating the repository in the first optional
% argument is redundant, so we can just use
% \begin{verbatim}
% \mhframeimage{baz/foobar}
% \end{verbatim}
%
% \subsection{\textsf{problem-mh}: Support  for Problems}\label{sec:user:problem}
% 
% The \DescribeMacro{\includemhproblem}|\includemhproblem| macro is a variant of
% |\includeproblem| with repository support. Instead of writing
% \begin{verbatim}
% \defpath{MathHub}{/user/foo/lmh/MathHub}
% \includeproblem[pts=7]{\MathHub{fooMH/bar/source/baz/foobar}}
% \end{verbatim}
% we can simply write (assuming that |\MathHub| is defined as above)
% \begin{verbatim}
% \includemhproblem[fooMH/bar]{baz/foobar}
% \end{verbatim}
% Note that the |\importmhproblem| form is more semantic, which allows more advanced
% document management features in \textsf{MathHub}. 
% 
% \subsection{\textsf{hwexam-mh}: Support  for Assignments}\label{sec:user:hwexam}
% 
% The \DescribeMacro{\includemhassignment}|\includemhassignment| macro is a variant of
% |\includeassignment| with repository support. Instead of writing
% \begin{verbatim}
% \defpath{MathHub}{/user/foo/lmh/MathHub}
% \includeassignment[pts=7]{\MathHub{fooMH/bar/source/baz/foobar}}
% \end{verbatim}
% we can simply write (assuming that |\MathHub| is defined as above)
% \begin{verbatim}
% \includemhassignment[fooMH/bar]{baz/foobar}
% \end{verbatim}
%
% \section{Limitations}\label{sec:limitations}
% 
% In this section we document known limitations. If you want to help alleviate them,
% please feel free to contact the package author. Some of them are currently discussed in
% the \sTeX GitHub repository~\cite{sTeX:github:on}. 
% \begin{compactenum}
% \item none reported yet.
% \end{compactenum}
% 
% \StopEventually{\newpage\PrintIndex\newpage\PrintChanges\printbibliography}
% \newpage
%
% \section{Implementation}\label{sec:impl}
%
% We need to set up the packages by requiring the |metakeys|
% package~\ctancite{Kohlhase:metakeys} to be loaded (in the right version).
%
%    \begin{macrocode}
%<*package>
\RequirePackage{keyval}
%    \end{macrocode}
% 
% \subsection{General Infrastructure}
%
% \begin{macro}{\mhcurrentrepos}
%   |\mhcurrentrepos| is used to initialize the current repository. If the repos has
%   changed, it writes a call to the internal macro
%   \DescribeMacro{\@mhcurrentrepos}|\@mhcurrentrepos| for the aux file and calls it. So
%   that the |\importmodule| calls there work with the correct repos.
%    \begin{macrocode}
\newcommand\mhcurrentrepos[1]{%
  \edef\@test{#1}% 
  \ifx\@test\mh@currentrepos% if new dir = old dir
    \relax% no need to change
  \else%
    \protected@write\@auxout{}{\string\@mhcurrentrepos{#1}}%
  \fi%
  \@mhcurrentrepos{#1}% define mh@currentrepos
}%
\newcommand\@mhcurrentrepos[1]{\edef\mh@currentrepos{#1}}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\libinput}
%   the |\libinput| macro inputs from the |lib| directory of the MathHub repository or the
%   |meta-inf/lib| repos of the group.
%    \begin{macrocode}
\def\modules@@first#1/#2;{#1}
\newcommand\libinput[1]{\def\@libfile{\MathHub{\mh@currentrepos/lib/#1}}%
\IfFileExists{\@libfile}{\input\@libfile}%
{\edef\@@group{\expandafter\modules@@first\mh@currentrepos;}
\edef\@inffile{\MathHub{\@@group/meta-inf/lib/#1}}
\IfFileExists{\@inffile}{\input{\@inffile}}%
{\PackageError{modules}
  {Library file missing, cannot input #1\MessageBreak%
    Both \@libfile.tex\MessageBreak and \@inffile.tex\MessageBreak do not exist}%
  {Check whether the file name is correct}}}}
%</package>
%    \end{macrocode}
% \end{macro}
%
% \subsection{\texttt{modules-mh}: MH Variants for Modules}\label{sec:impl:modules}
% 
% We set up package options and pass them on to the |modules| package, which we also
% load. 
%    \begin{macrocode}
%<*modules>
\ProvidesPackage{modules-mh}[2016/04/07 v1.0 MathHub support for the sTeX modules package]
\RequirePackage{mathhub}
%    \end{macrocode}
%
% \begin{macro}{\importmhmodule}
%   The |\importmhmodule[|\meta{key=value list}|]{module}| saves the current value of
%   |\mh@currentrepos| in a local macro |\mh@@repos|, resets |\mh@currentrepos| to the new
%   value if one is given in the optional argument, and after importing resets
%   |\mh@currentrepos| to the old value in |\mh@@repos|. We do all the |\ifx| comparison
%   with an |\expandafter|, since the values may be passed on from other key
%   bindings. Parameters will be passed to |\importmodule|.
%    \begin{macrocode}
\srefaddidkey{importmhmodule}%
\addmetakey{importmhmodule}{repos}% saves the repo's path. E.g: smglom/numberfield
\addmetakey{importmhmodule}{path}% saves the module name. E.g: naturalnumbers
\addmetakey[sms]{importmhmodule}{ext}% saves the extension: E.g: tex
\addmetakey[false]{importmhmodule}{conservative}[true]%
\newcommand\importmhmodule[2][]{%
  \metasetkeys{importmhmodule}{#1}%
  \ifx\importmhmodule@path\@empty% if module name is not set
    \importmodule[ext=\importmhmodule@ext,id=\importmhmodule@id]{#2}%
  \else%
    \edef\mh@@repos{\mh@currentrepos}% remember so that we can reset it. 
    \ifx\importmhmodule@repos\@empty% if in the same repos
      \relax% no need to change mh@currentrepos, i.e, current dirctory.
    \else%
      \mhcurrentrepos{\importmhmodule@repos}% change it. 
    \fi%
    \importmodule[load=\MathHub{\mh@currentrepos/source/\importmhmodule@path},%
    ext=\importmhmodule@ext,id=\importmhmodule@id]{#2}%
    \mhcurrentrepos{\mh@@repos}% after importing, reset to old value
  \fi%
  \ignorespaces%
}%
%    \end{macrocode}
% \end{macro}
% and now the analogs
% \begin{macro}{\usemhmodule}
%    \begin{macrocode}
\newcommand\usemhmodule[2][]{%
  \metasetkeys{importmhmodule}{#1}%
  \ifx\importmhmodule@path\@empty%
    \usemodule[ext=\importmhmodule@ext,id=\importmhmodule@id]{#2}%
  \else%
    \edef\mh@@repos{\mh@currentrepos}%
    \ifx\importmhmodule@repos\@empty%
    \else%
      \mhcurrentrepos{\importmhmodule@repos}%
    \fi%
    \usemodule[load=\MathHub{\mh@currentrepos/source/\importmhmodule@path},ext=\importmhmodule@ext,id=\importmhmodule@id]{#2}%
    \mhcurrentrepos\mh@@repos%
  \fi%
  \ignorespaces%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\mhinputref}
%    \begin{macrocode}
\newcommand\mhinputref[2][]{%
  \def\@repos{#1}%
  \edef\mh@@repos{\mh@currentrepos}%
  \ifx\@repos\@empty%
  \else%
    \mhcurrentrepos{#1}%
  \fi%
  \inputref{\MathHub{\mh@currentrepos/source/#2}}%
  \mhcurrentrepos\mh@@repos%
  \ignorespaces%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\mhinput}
%    \begin{macrocode}
\let\mhinput\mhinputref%
%</modules>
%    \end{macrocode}
% \end{macro}
%
% \subsection{\texttt{omtext-mh}: MH Variants for OMText}\label{sec:impl:mtext}
%
% We set up package options and pass them on to the |omtext| package, which we also
% load. 
%    \begin{macrocode}
%<*omtext>
\ProvidesPackage{omtext-mh}[2016/04/07 v1.0 MathHub support for the sTeX omtext package]
\RequirePackage{mathhub}
%    \end{macrocode}
%
% \begin{macro}{\mh*graphics}
%   Use the current value of |\mh@currentrepos| or the value of the |mhrepos| key if it is
%   given in |\my*graphics|.
% 
%    \begin{macrocode}
\def\Gin@mhrepos{}
\define@key{Gin}{mhrepos}{\def\Gin@mhrepos{#1}}
\newcommand\mhgraphics[2][]{\setkeys{Gin}{#1}%
\edef\mh@@repos{\mh@currentrepos}%
\ifx\Gin@mhrepos\@empty\mygraphics[#1]{\MathHub{\mh@currentrepos/source/#2}}%
\else\mygraphics[#1]{\MathHub{\Gin@mhrepos/source/#2}}\fi
\def\Gin@mhrepos{}\mhcurrentrepos\mh@@repos}
\newcommand\mhcgraphics[2][]{\begin{center}\mhgraphics[#1]{#2}\end{center}}
\newcommand\mhbgraphics[2][]{\fbox{\mhgraphics[#1]{#2}}}
\newcommand\mhcbgraphics[2][]{\begin{center}\fbox{\mhgraphics[#1]{#2}}\end{center}}
%</omtext>
%    \end{macrocode}
% \end{macro}
% 
% \subsection{\texttt{smultiling-mh}: MH Variants for Multilinguality}\label{sec:impl:smultiling}
%
% We set up package options and pass them on to the |smultiling| package, which we also
% load. 
%    \begin{macrocode}
%<*smultiling>
\ProvidesPackage{smultiling-mh}[2016/04/07 v1.0 MathHub support for the sTeX smultiling package]
\RequirePackage{mathhub}
%    \end{macrocode}
%
% \begin{macro}{mhmodnl:*}
%    \begin{macrocode}
\addmetakey{mhmodnl}{repos}
\addmetakey{mhmodnl}{path}
\addmetakey*{mhmodnl}{title}
\addmetakey*{mhmodnl}{creators}
\addmetakey*{mhmodnl}{contributors}
\addmetakey{mhmodnl}{srccite}
\addmetakey{primary}{mhmodnl}[yes]
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{mhmodnl}
%   The |mhmodnl| environment is just a layer over the |module| environment and the
%   |\importmhmodule| macro with the keys and language suitably adapted.
%    \begin{macrocode}
\newenvironment{mhmodnl}[3][]{\metasetkeys{mhmodnl}{#1}\def\@test{#1}%
\ifx\@test\@empty\begin{module}[id=#2.#3]\else\begin{module}[id=#2.#3,#1]\fi%
\edef\@repos{\ifx\mhmodnl@repos\@empty\mh@currentrepos\else\mhmodnl@repos\fi}
\if@langfiles\importmhmodule[repos=\@repos,path=#2,ext=tex]{#2}\else
\ifx\mhmodnl@path\@empty\importmodule{#2}\else%
\importmodule[ext=tex,path=\mhmodnl@load]{#2}\fi%
\fi%
\ignorespacesandpars}
{\end{module}\ignorespacesandparsafterend}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{mhviewsig}
%   The |mhviewsig| environment is just a layer over the |mhview| environment with the keys
%   suitably adapted.
%    \begin{macrocode}
\newenvironment{mhviewsig}[4][]{\def\@test{#1}\ifx\@test\@empty%
\begin{mhview}[id=#2,fromext=tex,toext=tex]{#3}{#4}\else%
\begin{mhview}[id=#2,#1,fromext=tex,toext=tex]{#3}{#4}\fi%
\ignorespacesandpars}
{\end{mhview}\ignorespacesandparsafterend}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{mhviewnl}
%   The |mhviewnl| environment is just a layer over the |mhview| environment with the
%   keys and langauge suitably adapted.\ednote{MK: we have to do something about the
%   if@langfiles situation here. But this is non-trivial, since we do not know the current
%   path, to which we could append .\meta{lang}!}
%    \begin{macrocode}
\addmetakey{mhview}{sigpath}
\addmetakey{mhview}{sigrepos}
\newenvironment{mhviewnl}[3][]{\def\@test{#1}%
  \metasetkeys{mhview}{#1}%
  \if@langfiles\requiremodules{#2}{tex}\else%
    \ifx\mhview@loadsig\@empty%
    \PackageError{smultiling-mh}%
                          {Cannot load view signature}%
                          {please specify the file name via the 'sigpath' and 'sigrepos' keys!}%
    \fi
    \ifx\mhview@sigrepos\@empty%
    \requiremodules{\MathHub{\mh@currentrepos/source/\mhview@sigpath.tex}}\else%
    \requiremodules{\MathHub{\mhview@sigrepos/source/\mhview@sigpath.tex}}\fi%
  \fi% if@langfiles
  \ifx\@test\@empty%
  \begin{mhview}[id=#2.#3,fromext=tex,toext=tex]{\csuse{views@#2@from}}{\csuse{views@#2@to}}\else%
  \begin{mhview}[id=#2.#3,#1,fromext=tex,toext=tex]{\csuse{views@#2@from}}{\csuse{views@#2@to}}\fi%
  \ignorespacesandpars}
{\end{mhview}\ignorespacesandparsafterend}
%</smultiling>
%    \end{macrocode}
% \end{environment}
%
% \subsection{\texttt{structview-mh}: MH Variants for Structures and
% Views}\label{sec:impl:structview}
%
% We set up package options and pass them on to the |structview| package, which we also
% load. 
%    \begin{macrocode}
%<*structview>
\ProvidesPackage{structview-mh}[2016/04/07 v1.0 MathHub support for the sTeX structview package]
\RequirePackage{mathhub}
%    \end{macrocode}
%
% \begin{environment}{mhstructure}
%    \begin{macrocode}
\newenvironment{mhstructure}[3][]{%
  \gdef\@@doit{\importmhmodule[#1]{#3}}%
  \ifmod@show\par\noindent structure import "#2" from module #3 \@@doit\fi%
  \ignorespacesandpars%
}{%
  \aftergroup\@@doit\ifmod@show end import\fi%
  \ignorespacesandparsafterend%
}%
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{importmhmodulevia}
%   this is now deprecated, we give an error
%    \begin{macrocode}
\newenvironment{importmhmodulevia}[2][]%
{\PackageError{structview-mh}%
  {The {importmhmodulevia} environment is deprecated}{use the {mhstructure} instead!}%
  \begin{mhstructure}[#1]{missing}{#2}}
{\end{mhstructure}}
%    \end{macrocode}
% \end{environment}
% 
%    \begin{macrocode}
\srefaddidkey{mhview}
\addmetakey{mhview}{display}
\addmetakey{mhview}{creators}
\addmetakey{mhview}{contributors}
\addmetakey{mhview}{srccite}
\addmetakey*{mhview}{title}
\addmetakey{mhview}{type}
\addmetakey{mhview}{fromrepos}
\addmetakey{mhview}{torepos}
\addmetakey{mhview}{frompath}
\addmetakey{mhview}{topath}
\addmetakey[sms]{mhview}{fromext}
\addmetakey[sms]{mhview}{toext}
%    \end{macrocode}
%
% \begin{environment}{mhview}
%   the MathHub version
%    \begin{macrocode}
\newenvironment{mhview}[3][]{% keys, from, to
  \metasetkeys{mhview}{#1}%
  \sref@target%
  \begin{@mhview}{#2}{#3}%
  \view@heading{#2}{#3}{\mhview@display}{\mhview@title}%
  \ignorespacesandpars%
}{%
  \end{@mhview}%
  \ignorespacesandparsafterend%
}%
\ifmod@show\surroundwithmdframed{mhview}\fi
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{@mhview}
%   The |@mhview| does the actual bookkeeping at the module level.
%    \begin{macrocode}
\newenvironment{@mhview}[2]{%from, to
  \importmhmodule[repos=\mhview@fromrepos,path=\mhview@frompath,ext=\mhview@fromext]{#1}%
  \importmhmodule[repos=\mhview@torepos,path=\mhview@topath,ext=\mhview@toext]{#2}%
  \csxdef{views@\mhview@id @from}{#1}%
  \csxdef{views@\mhview@id @to}{#2}%
  \ifx\mhview@fromrepos\@empty%
  \csxdef{views@\mhview@id @loadfrom}%
              {\MathHub{\mh@currentrepos/source/\mhview@frompath.\mhview@fromext}}%
  \else%
  \csxdef{views@\mhview@id @loadfrom}%
              {\MathHub{\mhview@fromrepos/source/\mhview@frompath}.\mhview@fromext}%
  \fi%
  \ifx\mhview@torepos\@empty
  \csxdef{views@\mhview@id @loadto}%
              {\MathHub{\mh@currentrepos/source/\mhview@topath}.\mhview@toext}%
  \else%
  \csxdef{views@\mhview@id @loadto}%
              {\MathHub{\mhview@torepos/source/\mhview@topath}.\mhview@toext}%
  \fi%
}{}%
%    \end{macrocode}
% \end{environment}
% 
% \begin{environment}{mhviewsketch}
%   The |mhviewsketch| environment is deprecated, we give an error
%    \begin{macrocode}
\newenvironment{mhviewsketch}[3][]%
{\PackageError{structview}%
  {The {mhviewsketch} environment is deprecated}{use the {mhview} instead!}%
  \begin{mhview}[#1]{#2}{#3}}
{\end{mhview}}
%</structview>
%    \end{macrocode}
% \end{environment}
% 
% \subsection{ \textsf{mikoslides-mh}: Support  for MiKo Slides}\label{sec:impl:mikoslides}
% 
% We set up package options and pass them on to the |mikoslides| package, which we also
% load. 
%    \begin{macrocode}
%<*mikoslides>
\ProvidesPackage{mikoslides-mh}[2016/04/07 v1.0 MathHub support for the sTeX mikoslides package]
\RequirePackage{mathhub}
%    \end{macrocode}
%
% \begin{macro}{\mhframeimage}
%   Use the current value of |\mh@currentrepos| or the value of the |mhrepos| key if it is
%   given in |\frameimage|.
%    \begin{macrocode}
\def\Gin@mhrepos{}
\define@key{Gin}{mhrepos}{\def\Gin@mhrepos{#1}}
\newcommand\mhframeimage[2][]{%
  \setkeys{Gin}{#1}%
  \edef\mh@@repos{\mh@currentrepos}%
  \ifx\Gin@mhrepos\@empty%
    \frameimage[#1]{\MathHub{\mh@currentrepos/source/#2}}%
  \else%
    \frameimage[#1]{\MathHub{\Gin@mhrepos/source/#2}}%
  \fi%
}%
%</mikoslides>
%    \end{macrocode}
% \end{macro}
%
% \subsection{\textsf{problem-mh}: Support  for Problems}\label{sec:impl:problem}
% 
% We set up package options and pass them on to the |problem| package, which we also
% load. 
%    \begin{macrocode}
%<*problem>
\ProvidesPackage{problem-mh}[2016/04/07 v1.0 MathHub support for the sTeX problem package]
\RequirePackage{mathhub}
%    \end{macrocode}
%
% \begin{macro}{\includemhproblem}
%   The |\includemhproblem| saves the current value of |\mh@currentrepos| in a local macro
%   |\mh@@repos|, resets |\mh@currentrepos| to the new value if one is given in the
%   optional argument, and after importing resets |\mh@currentrepos| to the old value in
%   |\mh@@repos|.
%    \begin{macrocode}
\newcommand\includemhproblem[2][]{\metasetkeys{inclprob}{#1}%
\edef\mh@@repos{\mh@currentrepos}%
\ifx\inclprob@mhrepos\@empty\else\mhcurrentrepos\inclprob@mhrepos\fi%
\input{\MathHub{\mh@currentrepos/source/#2}}%
\mhcurrentrepos\mh@@repos\clear@inclprob@keys}
%</problem>
%    \end{macrocode}
% \end{macro}
%
% \subsection{\textsf{hwexam-mh}: Support  for Assignments}\label{sec:impl::hwexam}
% 
% We set up package options and pass them on to the |hwexam| package, which we also
% load. 
%    \begin{macrocode}
%<*hwexam>
\ProvidesPackage{hwexam-mh}[2016/04/07 v1.0 MathHub support for the sTeX hwexam package]
\RequirePackage{mathhub}
%    \end{macrocode}
%
% \begin{macro}{\includemhassignment}
%   The |\includemhassignment| saves the current value of |\mh@currentrepos| in a local macro
%   |\mh@@repos|, resets |\mh@currentrepos| to the new value if one is given in the
%   optional argument, and after importing resets |\mh@currentrepos| to the old value in
%   |\mh@@repos|.
%    \begin{macrocode}
\newcommand\includemhassignment[2][]{\metasetkeys{inclassig}{#1}%
\edef\mh@@repos{\mh@currentrepos}%
\ifx\inclassig@mhrepos\@empty\else\mhcurrentrepos\inclassig@mhrepos\fi%
\includeassignment[#1]{\MathHub{\mh@currentrepos/source/#2}}%
\mhcurrentrepos\mh@@repos\clear@inclassig@keys}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\inputmhassignment}
%   analogous
%    \begin{macrocode}
\newcommand\inputmhassignment[2][]{\metasetkeys{inclassig}{#1}%
\edef\mh@@repos{\mh@currentrepos}%
\ifx\inclassig@mhrepos\@empty\else\mhcurrentrepos\inclassig@mhrepos\fi%
\inputassignment[#1]{\MathHub{\mh@currentrepos/source/#2}}%
\mhcurrentrepos\mh@@repos\clear@inclassig@keys}
%</hwexam>
%    \end{macrocode}
% \end{macro}
%
% \subsection{\textsf{tikzinput-mh}: Support  for Assignments}\label{sec:impl::tikzinput}
% 
% We set up package options and pass them on to the |tikzinput| package, which we also
% load. 
%    \begin{macrocode}
%<*tikzinput>
\ProvidesPackage{tikzinput-mh}[2016/04/07 v1.0 MathHub support for the sTeX tikzinput package]
\RequirePackage{mathhub}
\RequirePackage{pathsuris}
%    \end{macrocode}
%
%    \begin{macrocode}
\define@key{Gin}{mhrepos}{\def\Gin@mhrepos{#1}}
\newcommand\mhtikzinput[2][]{\def\Gin@mhrepos{}\setkeys{Gin}{#1}%
\edef\mh@@repos{\mh@currentrepos}%
\ifx\Gin@mhrepos\@empty\tikzinput[#1]{\MathHub{\mh@currentrepos/source/#2}}%
\else\tikzinput[#1]{\MathHub{\Gin@mhrepos/source/#2}}\fi
\def\Gin@mhrepos{}\mhcurrentrepos\mh@@repos}
\newcommand\cmhtikzinput[2][]{\begin{center}\mhtikzinput[#1]{#2}\end{center}}
%</tikzinput>
%    \end{macrocode}
% \Finale
\endinput
% \iffalse
%%% Local Variables: 
%%% mode: doctex
%%% TeX-master: t
%%% End: 
% \fi


% \iffalse meta-comment
% MathHub support for sTeX
% Copyright (c) 2015 Michael Kohlhase, all rights reserved
%               this file is released under the
%               LaTeX Project Public License (LPPL)
%
% The original of this file is in the public repository at 
% http://github.com/KWARC/sTeX/
% \fi
%   
% \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<*driver>
\documentclass{ltxdoc}
\usepackage[utf8]{inputenc}
\usepackage{url,array,float,amssymb}
\usepackage[show]{ed}
\usepackage[hyperref=auto,style=alphabetic]{biblatex}
\addbibresource{kwarcpubs.bib}
\addbibresource{extpubs.bib}
\addbibresource{kwarccrossrefs.bib}
\addbibresource{extcrossrefs.bib}
\usepackage{stex-logo,mathhub}
\usepackage{ctangit}
\usepackage{hyperref}
\makeindex
\floatstyle{boxed}
\newfloat{exfig}{thp}{lop}
\floatname{exfig}{Example}
\newcommand\githubissue[1]{\cite{sTeX:github:on}, \hyperlink{https://github.com/KWARC/sTeX/issues/#1}{issue #1}}
\begin{document}
\RecordChanges
\DocInput{mathhub.dtx}
\end{document}
%</driver>
% \fi
% 
%\iffalse\CheckSum{438}\fi
% 
% \GetFileInfo{mathhub.sty}
% \changes{v1.0}{2015/11/09}{moved all MH functionality into one DTX file}
% \changes{v1.0}{2016/06/11}{Deprecated \texttt{mhviewsketch}}
% \changes{v1.1}{2017/11/09}{Changed the semantics of \texttt{libinput} to input first the
% \texttt{meta-inf}-level and then repos-level file; this allows more sharing and does not
% break MathHub content (only one of them currently exists)}
% 
% \MakeShortVerb{\|}
%
% \def\omdoc{OMDoc}
% \def\latexml{{\LaTeX}ML}
% \title{MathHub Support for \sTeX\thanks{Version {\fileversion} (last revised
% {\filedate})}}
% \author{Michael Kohlhase\\
%   FAU Erlangen-N\"urnberg\\
%   \url{http://kwarc.info/kohlhase}}
% \maketitle
%
% \begin{abstract}
%   The |sref| package is part of the {\sTeX} collection, a version of {\TeX/\LaTeX} that
%   allows to markup {\TeX/\LaTeX} documents semantically without leaving the document
%   format, essentially turning {\TeX/\LaTeX} into a document format for mathematical
%   knowledge management (MKM).
%
%   The |mathhub| packages extend \sTeX with support for \textsf{MathHub} file system
%   layout, which has co-eveolved with the \textsf{MathHub.info} portal for active
%   documents, but is useful for organizing collections of \sTeX documents in its own
%   right.
% \end{abstract}
%
%\tableofcontents\newpage
% 
% \section{Introduction}\label{sec:intro}
% 
% As \sTeX files tend to be highly interlinked semantically one of the most important
% practical problems to solve for managing larger collections is the management of
% (relative or absolute) paths. The |mathhub| package provides an infrastructure for
% supporting a regular $\leadsto$ manageable file system layout schema that has
% co-eveolved with the \textsf{MathHub.info} portal for active documents, but is useful
% for organizing collections of \sTeX documents in its own right. In particular, since the
% layout scheme is supported by the |lmh| tool (\underline{l}ocal
% \underline{m}ath\underline{h}ub)~\cite{lmh:on}, which automates many management tasks.
% 
% \textsf{MathHub} (\url{http://MathHub.info}), is a portal and archive for flexiformal
% mathematics. It hosts much of the \sTeX content \textsf{MathHub} on GIT repositories
% (public and private escrow) for mathematical documentation projects. \textsf{MathHub}
% supports online and offline (via |lmh|) authoring and document development
% infrastructure, and a rich, interactive reading interface. 
% 
% The \textbf{\textsf{MathHub} file system layout} has a \textbf{\textsf{MathHub} root
% folder} (e.g. |~/localmh/MathHub|) which contains all \sTeX sources. These are organized
% in a two-level folder system that is compatible by GIT repository managers like
% GitHub~\cite{GitHub:on} and GitLab~\cite{GitLab:on}. Even though it is not necessary for
% the |mathhub| package we will assume that these are GIT repositories, which have names
% of the form \meta{group}|/|\meta{repo}, where \meta{group} is a \textsf{MathHub}-unique
% repository group and \meta{repo} a repository name that is \meta{group}-unique. The file
% and directory structure of a repository is arbitrary -- except that it starts with the
% directory |source| because they are Math Archives in the sense
% of~\cite{HorIacJuc:cscpnrr11}. But this structure can be hidden from the \sTeX author
% with \textsf{MathHub}-enabled versions of the \sTeX macros (let's call them
% \textbf{mh-variants}), which are defined in the |mh|-packages of the |mathhub| bundle,
% which we document in this manual.
% 
% \ednote{document lmh here, how to install, what it does (build system)}
%
% \section{The User Interface}\label{sec:user}
% 
% \subsection{Package Options}\label{sec:user:options}
% 
% none so far
%
% \subsection{\texttt{mathhub.sty}: General Infrastructure}\label{sec:impl:infra}
% 
% Generally, the \TeX formatter |pdflatex| needs to know the file system paths of the
% referenced \sTeX files: usually long relative paths. The |pathsuris|
% package~\cite{ZhaKoh:pus:ctan} from the \sTeX bundle makes this somewhat more palatable
% by supplying the |\defpath| macro, which we can use to set the \textsf{MathHub} root
% path, e.g. by |\defpath{MathHub}{/user/foo/localmh/MathHub}| (we will assume this
% setting for all examples below). 
% 
% The next information needed for referencing in the \textsf{MathHub} file system layout
% is the repository of the referencing file and that of the referenced one. The latter
% will be part of the mh-variants of the referencing commands introduced below, the
% former, can be declared by the \DescribeMacro{\mhcurrentrepos}|\mhcurrentrepos| macro
% relative to the \textsf{MathHub} root path. Thus a typical top-level \sTeX file will
% have lines like the following in the preamble: 
% 
% \begin{verbatim}
% \defpath{MathHub}{/user/foo/localmh/MathHub}
% \mhcurrentrepos{group/repos}
% \end{verbatim}
% They declare that it resides at the path \url{/user/foo/localmh/MathHub/group/repos} and
% declares the \textsf{MathHub} root path. But this fixed declaration makes the \sTeX
% files less mobile, therefore it is a better idea to externalize these declarations into
% an external file (usually called |localpaths.tex| that is not under GIT control since it
% contains system-specific path information) and |\input| that in the \sTeX file
% instead. Indeed |lmh| can generate these files automatically, which simplifies the
% management significantly.
% 
% Given a systematic grouping in the \textsf{MathHub} file layout scheme, \sTeX files in
% the same repository (and often even in the same group) share much of the preamble
% material. Thus it makes sense to centralize that in external (shared) files and situate
% it at the group and repository levels: at the group level. Fort the group level, the
% \textsf{MathHub} file system layout uses a specical repository
% \meta{group}|/meta-inf/lib| and at the repository level we use
% \meta{group}|/|\meta{repos}|/lib| for such files. The
% \DescribeMacro{\libinput}|\libinput| macro supports this practice:
% |\libinput{|\meta{filename}|}| macro inputs the files
% \meta{group}|/meta-inf/lib/|\meta{filename} and then
% \meta{group}|/|\meta{repos}|/lib/|\meta{filename} if they exist. Thus a typical
% top-level \sTeX file has the following lines in the preamble:
% \begin{verbatim}
% \input{localpaths}
% \libinput{preamble}
% \end{verbatim}
% The \DescribeMacro{\libusepackage}|\libusepackage| is analogous. 
% \ednote{explain the pre.tex and post.tex setup for sTeX modules (see the omdoc package)}
%
% \subsection{\texttt{omdoc--mh.sty}: MH Document Infrastructure}\label{sec:user:modules}
%
% The \DescribeMacro{\addmhbibresource}|\addmhbibresource| macro is a variant of
% |\addbibresource| from {bib\LaTeX} with repository support. Concretely,
% |\addmhbibresource[|\meta{repos}|]{|\meta{path}|}| expands to
% |\addbibresource{|\meta{MathHub}|/|\meta{reponame}|/|\meta{path}|}|, where
% \meta{reponame} is \meta{repo} if that is non-empty and the current repository
% else. Note that in contrast to the other MH variants, this does not add the |/source/|
% into the path, since {bib\TeX} files are often put into the |lib| directory parallel to
% |source|.
%
% 
% \subsection{\texttt{modules-mh.sty}: MH Variants for Modules}\label{sec:user:modules}
%
% The \DescribeMacro{\importmhmodule}|\importmhmodule| macro is a variant of
% |\importmodule| with repository support. Instead of writing 
% \begin{verbatim}
% \importmodule[load=\MathHub{fooMH/bar/source/baz/foobar}]{foobar}
% \end{verbatim}
% we can simply write (assuming that |\MathHub| is defined as above)
% \begin{verbatim}
% \importmhmodule[repos=fooMH/bar,path=baz/foobar]{foobar}
% \end{verbatim}
% Note that the |\importmhmodule| form is more semantic, which allows more advanced
% document management features in \textsf{MathHub}. 
% 
% If |baz/foobar| is the ``current module'', i.e. if we are on the \textsf{MathHub} path
% \ldots|MathHub/fooMH/bar|\ldots, then stating the repository in the first optional
% argument is redundant, so we can just use
% \begin{verbatim}
% \importmhmodule[path=baz/foobar]{foobar}
% \end{verbatim}
% if no file needs to loaded, |\importmhmodule| is the same as |\importmodule|. 
%
% Of course, neither {\LaTeX} nor \latexml know about the repositories when they are
% called from a file system, so we can use the
% \DescribeMacro{\mhcurrentrepos}|\mhcurrentrepos| macro to tell them. But this is only
% needed to initialize the infrastructure in the driver file. In particular, we do not
% need to set it in in each module, since the |\importmhmodule| macro sets the current
% repository automatically.
% 
% The \DescribeMacro{\usemhmodule}|\usemhmodule| is the analog to |\usemodule|.
% 
% For this, the |modules| package supplies the mh-variants
% \DescribeMacro{\mhinputref}|\mhinputref| and \DescribeMacro{\mhinput}|\mhinput| of the
% |\inputref| macro introduced above and normal {\LaTeX} |\input| macro. 
%
% \paragraph{Caveat} if you want to use the \textsf{MathHub} support macros, then every
% time a module is imported or a document fragment is included from another repos, the
% mh-variant |\importmhmodule| must be used, so that the ``current repository'' is set
% accordingly. To be exact, we only need to use mh-variants, if the imported module or
% included document fragment use mh-variants.
% 
% \subsection{\texttt{omtext-mh.sty}: MH Variants for OMText}\label{sec:user:modules}
%
% The \DescribeMacro{\mhcgraphics}|\mhcgraphics| macro is a variant of |\mycgraphics| with
% repository support. Instead of writing
% \begin{verbatim}
% \mycgraphics{\MathHub{fooMH/bar/source/baz/foobar}}
% \end{verbatim}
% we can simply write (assuming that |\MathHub| is defined as above)
% \begin{verbatim}
% \mhcgraphics[fooMH/bar]{baz/foobar}
% \end{verbatim}
% Note that the |\mhcgraphics| form is more semantic, which allows more advanced document
% management features in \textsf{MathHub}.
% 
% \subsection{\texttt{smultiling-mh.sty}: MH Variants for Multilinguality}\label{sec:user:smultiling}
% \ednote{needs to be documented}
% \ednote{mhmodsig seems to be missing what happened?}
%
% \subsection{\texttt{structview-mh.sty}: MH Variants for Structures and
% Views}\label{sec:user:structview}
% \ednote{needs to be documented}
%
% \subsection{\textsf{mikoslides-mh.sty}: Support  for MiKo Slides}\label{sec:user:mikoslides}
% 
% The \DescribeMacro{\mhframeimage}|\mhframeimage| macro is a variant of |\frameimage|
% with repository support. Instead of writing
% \begin{verbatim}
% \frameimage{\MathHub{fooMH/bar/source/baz/foobar}}
% \end{verbatim}
% we can simply write (assuming that |\MathHub| is defined as above)
% \begin{verbatim}
% \mhframeimage[fooMH/bar]{baz/foobar}
% \end{verbatim}
% Note that the |\mhframeimage| form is more semantic, which allows more advanced document
% management features in \textsf{MathHub}.
% 
% If |baz/foobar| is the ``current module'', i.e. if we are on the \textsf{MathHub} path
% \ldots|MathHub/fooMH/bar|\ldots, then stating the repository in the first optional
% argument is redundant, so we can just use
% \begin{verbatim}
% \mhframeimage{baz/foobar}
% \end{verbatim}
%
% If we want to transclude a the contents of a file as a note, we can use the
% \DescribeMacro{\nmhinputref}|\nmhinputref| macro. |\nmhinputref[foo]{bar}| is equivalent
% to
%
%\begin{verbatim}
% \begin{note}
% \inputref[foo]{bar}
% \end{note}
% \end{verbatim}
%
% \subsection{\textsf{problem-mh.sty}: Support  for Problems}\label{sec:user:problem}
% 
% The \DescribeMacro{\includemhproblem}|\includemhproblem| macro is a variant of
% |\includeproblem| with repository support. Instead of writing
% \begin{verbatim}
% \includeproblem[pts=7]{\MathHub{fooMH/bar/source/baz/foobar}}
% \end{verbatim}
% we can simply write (assuming that |\MathHub| is defined as above)
% \begin{verbatim}
% \includemhproblem[mhrepos=fooMH/bar,pts=7]{baz/foobar}
% \end{verbatim}
% Note that the |\importmhproblem| form is more semantic, which allows more advanced
% document management features in \textsf{MathHub}. 
% 
% \subsection{\textsf{hwexam-mh.sty}: Support  for Assignments}\label{sec:user:hwexam}
% 
% The \DescribeMacro{\includemhassignment}|\includemhassignment| macro is a variant of
% |\includeassignment| with repository support. Instead of writing
% \begin{verbatim}
% \includeassignment[number=3]{\MathHub{fooMH/bar/source/baz/foobar}}
% \end{verbatim}
% we can simply write (assuming that |\MathHub| is defined as above)
% \begin{verbatim}
% \includemhassignment[mhrepos=fooMH/bar,number=3]{baz/foobar}
% \end{verbatim}
%
% \subsection{\textsf{lstmh.sty}: Support  for Listings}\label{sec:user:lst}
% 
% The \DescribeMacro{\lstinputmhlisting}|\lstinputmhlisting| macro is a variant of
% |\lstinputlisting| with repository support. Instead of writing
% \begin{verbatim}
% \lstinputlisting[language=XML]{\MathHub{fooMH/bar/source/baz/foobar.xml}}
% \end{verbatim}
% we can simply write (assuming that |\MathHub| is defined as above)
% \begin{verbatim}
% \lstinputmhlisting[mhrepos=fooMH/bar,language=XML]{baz/foobar.xml}
% \end{verbatim}
%
% \section{Limitations}\label{sec:limitations}
% 
% In this section we document known limitations. If you want to help alleviate them,
% please feel free to contact the package author. Some of them are currently discussed in
% the \sTeX GitHub repository~\cite{sTeX:github:on}. 
% \begin{enumerate}
% \item none reported yet.
% \end{enumerate}
% 
% \StopEventually{\newpage\PrintIndex\newpage\PrintChanges\printbibliography}
% \newpage
%
% \section{Implementation}\label{sec:impl}
%
% We need to set up the packages by requiring the |metakeys|
% package~\ctancite{Kohlhase:metakeys} to be loaded (in the right version).
%
%    \begin{macrocode}
%<*package>
\RequirePackage{keyval}
%    \end{macrocode}
% 
% \subsection{\texttt{mathhub.sty}: General Infrastructure}\label{sec:impl:infra}
%
% \begin{macro}{\mhcurrentrepos}
%   |\mhcurrentrepos| is used to initialize the current repository. If the repos has
%   changed, it writes a call to the internal macro
%   \DescribeMacro{\@mhcurrentrepos}|\@mhcurrentrepos| for the aux file and calls it. So
%   that the |\importmodule| calls there work with the correct repos.
%    \begin{macrocode}
\newcommand\mhcurrentrepos[1]{%
  \edef\@test{#1}%
  \ifx\@test\mh@currentrepos% if new dir = old dir
    \relax% no need to change
  \else%
    \protected@write\@auxout{}{\string\@mhcurrentrepos{#1}}%
  \fi%
  \@mhcurrentrepos{#1}% define mh@currentrepos
}%
\newcommand\@mhcurrentrepos[1]{\edef\mh@currentrepos{#1}}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\libinput}
%   the |\libinput| macro inputs from the |lib| directory of the MathHub repository and
%   then the |meta-inf/lib| repos of the group, if they exist.
%    \begin{macrocode}
\def\modules@@first#1/#2;{#1}
\newcommand\libinput[1]{%
\def\@libfile{\MathHub{\mh@currentrepos/lib/#1}}%
\edef\@@group{\expandafter\modules@@first\mh@currentrepos;}
\edef\@inffile{\MathHub{\@@group/meta-inf/lib/#1}}
\IfFileExists\@inffile{\input\@inffile}{}%
\IfFileExists\@libfile{\input\@libfile}{}%
\IfFileExists\@inffile{}{\IfFileExists\@libfile{}{%
  {\PackageError{mathhub}
    {Library file missing; cannot input #1.tex\MessageBreak%
    Both \@libfile.tex\MessageBreak and \@inffile.tex\MessageBreak%
    do not exist}%
  {Check whether the file name is correct}}}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\libusepackage}
%   the |\libusepackage| is analogous to |\libinput|
%    \begin{macrocode}
\newcommand\libusepackage[2][]{%
\def\@libfile{\MathHub{\mh@currentrepos/lib/#2}}%
\edef\@@group{\expandafter\modules@@first\mh@currentrepos;}
\edef\@inffile{\MathHub{\@@group/meta-inf/lib/#2}}
\IfFileExists{\@inffile.sty}{\usepackage[#1]{\@inffile}}{}%
\IfFileExists{\@libfile.sty}{\usepackage[#1]{\@libfile}}{}%
\IfFileExists{\@inffile.sty}{}{\IfFileExists{\@libfile.sty}{}{%
  {\PackageError{mathhub}
    {Library file missing; cannot use package #2.sty\MessageBreak%
    Both \@libfile.sty\MessageBreak and \@inffile.sty\MessageBreak%
    do not exist}%
  {Check whether the file name is correct}}}}}
%</package>
%    \end{macrocode}
% \end{macro}
%
% \subsection{\texttt{omdoc--mh.sty}: MH Document Infrastructure}\label{sec:impl:modules}
%
%    \begin{macrocode}
%<*omdoc>
\ProvidesPackage{omdoc-mh}[2018/11/25 v1.1 MathHub support for OMDoc Documents]
\RequirePackage{mathhub}
%    \end{macrocode}
%
% \begin{macro}{\addmhbibresource}
%    \begin{macrocode}
\newcommand\addmhbibresource[2][]{%
  \def\@repos{#1}%
  \ifx\@repos\@empty%
  \addbibresource{\MathHub{\mh@currentrepos/#2}}%
  \else
  \addbibresource{\MathHub{\@repos/#2}}%
  \fi%
  \ignorespaces}%
%</omdoc>
%    \end{macrocode}
% \end{macro}
%
% \subsection{\texttt{modules-mh.sty}: MH Variants for Modules}\label{sec:impl:modules}
% 
%    \begin{macrocode}
%<*modules>
\ProvidesPackage{modules-mh}[2018/11/25 v1.1 MathHub support for the sTeX modules package]
\RequirePackage{mathhub}
%    \end{macrocode}
%
% \begin{macro}{\importmhmodule}
%   The |\importmhmodule[|\meta{key=value list}|]{module}| saves the current value of
%   |\mh@currentrepos| in a local macro |\mh@@repos|, resets |\mh@currentrepos| to the new
%   value if one is given in the optional argument, and after importing resets
%   |\mh@currentrepos| to the old value in |\mh@@repos|. We do all the |\ifx| comparison
%   with an |\expandafter|, since the values may be passed on from other key
%   bindings. Parameters will be passed to |\importmodule|.
%    \begin{macrocode}
\srefaddidkey{importmhmodule}%
\addmetakey{importmhmodule}{repos}% saves the repo's path. E.g: smglom/numberfield
\addmetakey{importmhmodule}{path}% saves the module name. E.g: naturalnumbers
\addmetakey[sms]{importmhmodule}{ext}% saves the extension: E.g: tex
\addmetakey[false]{importmhmodule}{conservative}[true]%
\newcommand\importmhmodule[2][]{%
  \metasetkeys{importmhmodule}{#1}%
  \ifx\importmhmodule@path\@empty% if module name is not set
    \importmodule[ext=\importmhmodule@ext,id=\importmhmodule@id]{#2}%
  \else%
    \edef\mh@@repos{\mh@currentrepos}% remember so that we can reset it. 
    \ifx\importmhmodule@repos\@empty% if in the same repos
      \relax% no need to change mh@currentrepos, i.e, current directory.
    \else%
      \mhcurrentrepos{\importmhmodule@repos}% change it. 
    \fi%
    \importmodule[load=\MathHub{\mh@currentrepos/source/\importmhmodule@path},%
    ext=\importmhmodule@ext,id=\importmhmodule@id]{#2}%
    \mhcurrentrepos{\mh@@repos}% after importing, reset to old value
  \fi%
  \ignorespaces%
}%
%    \end{macrocode}
% \end{macro}
% and now the analogs
% \begin{macro}{\usemhmodule}
%    \begin{macrocode}
\newcommand\usemhmodule[2][]{%
  \metasetkeys{importmhmodule}{#1}%
  \ifx\importmhmodule@path\@empty%
    \usemodule[ext=\importmhmodule@ext,id=\importmhmodule@id]{#2}%
  \else%
    \edef\mh@@repos{\mh@currentrepos}%
    \ifx\importmhmodule@repos\@empty%
    \else%
      \mhcurrentrepos{\importmhmodule@repos}%
    \fi%
    \usemodule[load=\MathHub{\mh@currentrepos/source/\importmhmodule@path},ext=\importmhmodule@ext,id=\importmhmodule@id]{#2}%
    \mhcurrentrepos\mh@@repos%
  \fi%
  \ignorespaces%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\mhinputref}
%    \begin{macrocode}
\newcommand\mhinputref[2][]{%
  \def\@repos{#1}%
  \edef\mh@@repos{\mh@currentrepos}%
  \ifx\@repos\@empty%
  \else%
    \mhcurrentrepos{#1}%
  \fi%
  \inputref{\MathHub{\mh@currentrepos/source/#2}}%
  \mhcurrentrepos\mh@@repos%
  \ignorespaces%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\mhinput}
%    \begin{macrocode}
\let\mhinput\mhinputref%
%</modules>
%    \end{macrocode}
% \end{macro}
%
% \subsection{\texttt{omtext-mh.sty}: MH Variants for OMText}\label{sec:impl:mtext}
%
%    \begin{macrocode}
%<*omtext>
\ProvidesPackage{omtext-mh}[2018/11/25 v1.1 MathHub support for the sTeX omtext package]
\RequirePackage{mathhub}
%    \end{macrocode}
%
% \begin{macro}{\mh*graphics}
%   Use the current value of |\mh@currentrepos| or the value of the |mhrepos| key if it is
%   given in |\my*graphics|.
% 
%    \begin{macrocode}
\def\Gin@mhrepos{}
\define@key{Gin}{mhrepos}{\def\Gin@mhrepos{#1}}
\newcommand\mhgraphics[2][]{\setkeys{Gin}{#1}%
\edef\mh@@repos{\mh@currentrepos}%
\ifx\Gin@mhrepos\@empty\mygraphics[#1]{\MathHub{\mh@currentrepos/source/#2}}%
\else\mygraphics[#1]{\MathHub{\Gin@mhrepos/source/#2}}\fi
\def\Gin@mhrepos{}\mhcurrentrepos\mh@@repos}
\newcommand\mhcgraphics[2][]{\begin{center}\mhgraphics[#1]{#2}\end{center}}
\newcommand\mhbgraphics[2][]{\fbox{\mhgraphics[#1]{#2}}}
\newcommand\mhcbgraphics[2][]{\begin{center}\fbox{\mhgraphics[#1]{#2}}\end{center}}
%</omtext>
%    \end{macrocode}
% \end{macro}
% 
% \subsection{\texttt{smultiling-mh.sty}: MH Variants for Multilinguality}\label{sec:impl:smultiling}
%
%    \begin{macrocode}
%<*smultiling>
\ProvidesPackage{smultiling-mh}[2018/11/25 v1.1 MathHub support for the sTeX smultiling package]
\RequirePackage{mathhub}
%    \end{macrocode}
%
% \begin{macro}{mhmodnl:*}
%    \begin{macrocode}
\addmetakey{mhmodnl}{repos}
\addmetakey{mhmodnl}{path}
\addmetakey*{mhmodnl}{title}
\addmetakey*{mhmodnl}{creators}
\addmetakey*{mhmodnl}{contributors}
\addmetakey{mhmodnl}{srccite}
\addmetakey{primary}{mhmodnl}[yes]
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{mhmodnl}
%   The |mhmodnl| environment is just a layer over the |module| environment and the
%   |\importmhmodule| macro with the keys and language suitably adapted.
%    \begin{macrocode}
\newenvironment{mhmodnl}[3][]{\metasetkeys{mhmodnl}{#1}\def\@test{#1}%
\ifx\@test\@empty\begin{module}[id=#2.#3]\else\begin{module}[id=#2.#3,#1]\fi%
\def\smultiling@language{#3}%
\edef\@repos{\ifx\mhmodnl@repos\@empty\mh@currentrepos\else\mhmodnl@repos\fi}
\if@langfiles\importmhmodule[repos=\@repos,path=#2,ext=tex]{#2}\else
\ifx\mhmodnl@path\@empty\importmodule{#2}\else\importmodule[ext=tex,path=\mhmodnl@load]{#2}\fi%
\fi%
\ignorespacesandpars}
{\end{module}\ignorespacesandparsafterend}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{mhviewsig}
%   The |mhviewsig| environment is just a layer over the |mhview| environment with the keys
%   suitably adapted.
%    \begin{macrocode}
\newenvironment{mhviewsig}[4][]{% keys, id, from, to 
\def\@test{#1}\ifx\@test\@empty%
\begin{mhview}[id=#2,ext=tex]{#3}{#4}\else%
\begin{mhview}[id=#2,#1,ext=tex]{#3}{#4}\fi%
\ignorespacesandpars}
{\end{mhview}\ignorespacesandparsafterend}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{mhviewnl}
%   The |mhviewnl| environment is just a layer over the |mhview| environment with the
%   keys and language suitably adapted.\ednote{MK: we have to do something about the
%   if@langfiles situation here. But this is non-trivial, since we do not know the current
%   path, to which we could append .\meta{lang}!}
%    \begin{macrocode}
\newenvironment{mhviewnl}[5][]{% keys, id, lang, from, to
\def\@test{#1}\ifx\@test\@empty%
\begin{mhview}[id=#2.#3,ext=tex]{#4}{#5}\else%
\begin{mhview}[id=#2.#3,#1,ext=tex]{#4}{#5}\fi%
\ignorespacesandpars}
{\end{mhview}\ignorespacesandparsafterend}
%</smultiling>
%    \end{macrocode}
% \end{environment}
%
% \subsection{\texttt{structview-mh.sty}: MH Variants for Structures and
% Views}\label{sec:impl:structview}
%
%    \begin{macrocode}
%<*structview>
\ProvidesPackage{structview-mh}[2018/11/25 v1.1 MathHub support for the sTeX structview package]
\RequirePackage{mathhub}
%    \end{macrocode}
%
% \begin{environment}{mhstructure}
%    \begin{macrocode}
\newenvironment{mhstructure}[3][]{%
  \gdef\@@doit{\importmhmodule[#1]{#3}}%
  \ifmod@show\par\noindent structure import "#2" from module #3 \@@doit\fi%
  \ignorespacesandpars%
}{%
  \aftergroup\@@doit\ifmod@show end import\fi%
  \ignorespacesandparsafterend%
}%
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{importmhmodulevia}
%   this is now deprecated, we give an error
%    \begin{macrocode}
\newenvironment{importmhmodulevia}[2][]%
{\PackageError{structview-mh}%
  {The {importmhmodulevia} environment is deprecated}{use the {mhstructure} instead!}%
  \begin{mhstructure}[#1]{missing}{#2}}
{\end{mhstructure}}
%    \end{macrocode}
% \end{environment}
% 
%    \begin{macrocode}
\srefaddidkey{mhview}
\addmetakey{mhview}{display}
\addmetakey{mhview}{creators}
\addmetakey{mhview}{contributors}
\addmetakey{mhview}{srccite}
\addmetakey*{mhview}{title}
\addmetakey{mhview}{type}
\addmetakey{mhview}{fromrepos}
\addmetakey{mhview}{torepos}
\addmetakey{mhview}{frompath}
\addmetakey{mhview}{topath}
\addmetakey[sms]{mhview}{ext}
%    \end{macrocode}
%
% \begin{environment}{mhview}
%   the MathHub version
%    \begin{macrocode}
\newenvironment{mhview}[3][]{% keys, from, to
  \metasetkeys{mhview}{#1}%
  \sref@target%
  \begin{@mhview}{#2}{#3}%
  \view@heading{#2}{#3}{\mhview@display}{\mhview@title}%
  \ignorespacesandpars%
}{%
  \end{@mhview}%
  \ignorespacesandparsafterend%
}%
\ifmod@show\surroundwithmdframed{mhview}\fi
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{@mhview}
%   The |@mhview| does the actual bookkeeping at the module level.
%    \begin{macrocode}
\newenvironment{@mhview}[2]{%from, to
  \importmhmodule[repos=\mhview@fromrepos,path=\mhview@frompath,ext=\mhview@ext]{#1}%
  \importmhmodule[repos=\mhview@torepos,path=\mhview@topath,ext=\mhview@ext]{#2}%
}{}%
%    \end{macrocode}
% \end{environment}
% 
% \begin{environment}{mhviewsketch}
%   The |mhviewsketch| environment is deprecated, we give an error
%    \begin{macrocode}
\newenvironment{mhviewsketch}[3][]%
{\PackageError{structview}%
  {The {mhviewsketch} environment is deprecated}{use the {mhview} instead!}%
  \begin{mhview}[#1]{#2}{#3}}
{\end{mhview}}
%</structview>
%    \end{macrocode}
% \end{environment}
% 
% \subsection{ \textsf{mikoslides-mh.sty}: Support  for MiKo Slides}\label{sec:impl:mikoslides}
% 
%    \begin{macrocode}
%<*mikoslides>
\ProvidesPackage{mikoslides-mh}[2018/11/25 v1.1 MathHub support for the sTeX mikoslides package]
\RequirePackage{mathhub}
%    \end{macrocode}
%
% \begin{macro}{\mhframeimage}
%   Use the current value of |\mh@currentrepos| or the value of the |mhrepos| key if it is
%   given in |\frameimage|.
%    \begin{macrocode}
\def\Gin@mhrepos{}
\define@key{Gin}{mhrepos}{\def\Gin@mhrepos{#1}}
\newcommand\mhframeimage[2][]{%
  \setkeys{Gin}{#1}%
  \edef\mh@@repos{\mh@currentrepos}%
  \ifx\Gin@mhrepos\@empty%
    \frameimage[#1]{\MathHub{\mh@currentrepos/source/#2}}%
  \else%
    \frameimage[#1]{\MathHub{\Gin@mhrepos/source/#2}}%
  \fi%
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\nmhinputref}
%    \begin{macrocode}
\newcommand\nmhinputref[2][]{\ifnotes\mhinputref[#1]{#2}\fi}
%</mikoslides>
%    \end{macrocode}
% \end{macro}
%
% \subsection{\textsf{problem-mh.sty}: Support  for Problems}\label{sec:impl:problem}
% 
%    \begin{macrocode}
%<*problem>
\ProvidesPackage{problem-mh}[2018/11/25 v1.1 MathHub support for the sTeX problem package]
\RequirePackage{mathhub}
%    \end{macrocode}
%
% \begin{macro}{\includemhproblem}
%   The |\includemhproblem| saves the current value of |\mh@currentrepos| in a local macro
%   |\mh@@repos|, resets |\mh@currentrepos| to the new value if one is given in the
%   optional argument, and after importing resets |\mh@currentrepos| to the old value in
%   |\mh@@repos|.
%    \begin{macrocode}
\newcommand\includemhproblem[2][]{\metasetkeys{inclprob}{#1}%
\edef\mh@@repos{\mh@currentrepos}%
\ifx\inclprob@mhrepos\@empty\else\mhcurrentrepos\inclprob@mhrepos\fi%
\input{\MathHub{\mh@currentrepos/source/#2}}%
\mhcurrentrepos\mh@@repos\clear@inclprob@keys}
%</problem>
%    \end{macrocode}
% \end{macro}
%
% \subsection{\textsf{hwexam-mh.sty}: Support  for Assignments}\label{sec:impl::hwexam}
% 
%    \begin{macrocode}
%<*hwexam>
\ProvidesPackage{hwexam-mh}[2018/11/25 v1.1 MathHub support for the sTeX hwexam package]
\RequirePackage{mathhub}
%    \end{macrocode}
%
% \begin{macro}{\includemhassignment}
%   The |\includemhassignment| saves the current value of |\mh@currentrepos| in a local macro
%   |\mh@@repos|, resets |\mh@currentrepos| to the new value if one is given in the
%   optional argument, and after importing resets |\mh@currentrepos| to the old value in
%   |\mh@@repos|.
%    \begin{macrocode}
\newcommand\includemhassignment[2][]{\metasetkeys{inclassig}{#1}%
\edef\mh@@repos{\mh@currentrepos}%
\ifx\inclassig@mhrepos\@empty\else\mhcurrentrepos\inclassig@mhrepos\fi%
\includeassignment[#1]{\MathHub{\mh@currentrepos/source/#2}}%
\mhcurrentrepos\mh@@repos\clear@inclassig@keys}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\inputmhassignment}
%   analogous
%    \begin{macrocode}
\newcommand\inputmhassignment[2][]{\metasetkeys{inclassig}{#1}%
\edef\mh@@repos{\mh@currentrepos}%
\ifx\inclassig@mhrepos\@empty\else\mhcurrentrepos\inclassig@mhrepos\fi%
\inputassignment[#1]{\MathHub{\mh@currentrepos/source/#2}}%
\mhcurrentrepos\mh@@repos\clear@inclassig@keys}
%</hwexam>
%    \end{macrocode}
% \end{macro}
%
% \subsection{\textsf{tikzinput-mh.sty}: Support  for Assignments}\label{sec:impl:tikzinput}
% 
%    \begin{macrocode}
%<*tikzinput>
\ProvidesPackage{tikzinput-mh}[2018/11/25 v1.1 MathHub support for the sTeX tikzinput package]
\RequirePackage{mathhub}
\RequirePackage{pathsuris}
%    \end{macrocode}
%
%    \begin{macrocode}
\define@key{Gin}{mhrepos}{\def\Gin@mhrepos{#1}}
\newcommand\mhtikzinput[2][]{\def\Gin@mhrepos{}\setkeys{Gin}{#1}%
\edef\mh@@repos{\mh@currentrepos}%
\ifx\Gin@mhrepos\@empty\tikzinput[#1]{\MathHub{\mh@currentrepos/source/#2}}%
\else\mhcurrentrepos\Gin@mhrepos\tikzinput[#1]{\MathHub{\Gin@mhrepos/source/#2}}\fi
\def\Gin@mhrepos{}\mhcurrentrepos\mh@@repos}
\newcommand\cmhtikzinput[2][]{\begin{center}\mhtikzinput[#1]{#2}\end{center}}
%</tikzinput>
%    \end{macrocode}
%
% \subsection{\textsf{lstmh.sty}: Support  for Listings}\label{sec:impl:lst}
% 
%    \begin{macrocode}
%<*lst>
\ProvidesPackage{lstmh}[2018/11/25 v1.1 MathHub support for the listings package]
\RequirePackage{mathhub}
\RequirePackage{pathsuris}
%    \end{macrocode}
%
%    \begin{macrocode}
\define@key{lst}{mhrepos}{\def\lst@mhrepos{#1}}
\newcommand\lstinputmhlisting[2][]{\def\lst@mhrepos{}\setkeys{lst}{#1}%
\edef\mh@@repos{\mh@currentrepos}%
\ifx\lst@mhrepos\@empty\lstinputlisting[#1]{\MathHub{\mh@currentrepos/source/#2}}%
\else\lstinputlisting[#1]{\MathHub{\lst@mhrepos/source/#2}}\fi
\def\lst@mhrepos{}\mhcurrentrepos\mh@@repos}
\newcommand\clstinputmhlisting[2][]{\begin{center}\lstinputmhlisting[#1]{#2}\end{center}}
%</lst>
%    \end{macrocode}
% \Finale
\endinput
% \iffalse
%%% Local Variables: 
%%% mode: doctex
%%% TeX-master: t
%%% End: 
% \fi


%  LocalWords:  iffalse NeedsTeXFormat mathhub.dtx mathhub.sty mhviewsketch omdoc latexml
%  LocalWords:  maketitle sref mathhub co-eveolved organizing tableofcontents newpage lmh
%  LocalWords:  leadsto HorIacJuc:cscpnrr11 textbf mh-variants mhcurrentrepos libinput
%  LocalWords:  mhcurrentrepos modules-mh.sty importmhmodule importmhmodule foobar ldots
%  LocalWords:  initialize usemhmodule usemhmodule usemodule mhinputref mhinputref keyval
%  LocalWords:  mhinput mhinput inputref mh-variant omtext-mh.sty mhcgraphics mhcgraphics
%  LocalWords:  mycgraphics smultiling-mh.sty mhmodsig structview-mh.sty mhframeimage ifx
%  LocalWords:  mikoslides-mh.sty mhframeimage frameimage problem-mh.sty includemhproblem
%  LocalWords:  includemhproblem includeproblem importmhproblem hwexam-mh.sty lstmh.sty
%  LocalWords:  includemhassignment includemhassignment includeassignment lstinputlisting
%  LocalWords:  lstinputmhlisting lstinputmhlisting printbibliography sec:impl metakeys
%  LocalWords:  ctancite newcommand mh@currentrepos expandafter modules-mh srefaddidkey
%  LocalWords:  addmetakey smglom numberfield metasetkeys importmhmodule@ext,id omtext
%  LocalWords:  ignorespaces mhrepos mhgraphics setkeys mygraphics mhbgraphics fbox 2,ext
%  LocalWords:  mhcbgraphics smultiling-mh mhmodnl srccite newenvironment tex,path mhview
%  LocalWords:  smultiling@language ignorespacesandpars ignorespacesandparsafterend 1,ext
%  LocalWords:  mhviewsig mhviewnl 3,ext structview-mh mhstructure gdef ifmod@show topath
%  LocalWords:  noindent aftergroup importmhmodulevia torepos surroundwithmdframed hwexam
%  LocalWords:  mhview@fromrepos,path mhview@frompath,ext mhview@torepos,path mikoslides
%  LocalWords:  mhview@topath,ext problem-mh inclprob inclassig inputmhassignment lst
%  LocalWords:  inputassignment tikzinput-mh.sty tikzinput pathsuris mhtikzinput lstmh
%  LocalWords:  cmhtikzinput doctex organized pdflatex defpath externalize

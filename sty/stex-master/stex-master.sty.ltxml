use LaTeXML::Package;
use strict;
use warnings;

# RequirePackage("standalone");
# RequirePackage("xspace");
# RequirePackage("metakeys");
# RequirePackage("xstring");
# RequirePackage("mdframed");

# TODO standalone

RequirePackage("etoolbox");

# xstring (move to a separate package binding?)

DefMacro('\IfBeginWith OptionalMatch:* {}{}{}{}', sub {
    my ($gullet,$star,$stratks,$strbtks,$tcase,$fcase)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));

    if(substr($stra,0,length($strb)) eq $strb) {
        return $tcase;
    } else {
        return $fcase;
    }
});

DefMacro('\IfSubStr OptionalMatch:* {}{}{}{}', sub {
    my ($gullet,$star,$stratks,$strbtks,$tcase,$fcase)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));

    if(index($stra,$strb) != -1) {
        return $tcase;
    } else {
        return $fcase;
    }
});


DefMacro('\StrCut OptionalMatch:* []{}{}{}{}', sub {
    my ($gullet,$num,$stratks,$strbtks,$macroa,$macrob)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));

    # TODO match for [] empty?

    my ($first,$last) = join $strb,(split($strb,$stra))[0..insert number here];

});


#InputDefinitions('filehook', type => 'sty', noltxml => 1);
#InputDefinitions('standalone', type => 'sty', noltxml => 1);
#InputDefinitions('xstring', type => 'sty', noltxml => 1);

RawTeX('\newif\if@latexml\@latexmltrue');

DefMacro('\kpsewhich{}{}', sub {
    my($gullet,$arga,$argb)=@_;
    my $kpse = pathname_kpsewhich(ToString(Expand($argb)));

    # check if $arga->getCatcode == CC_CS

    (T_CS('\def'),$arga,T_BEGIN,Explode($kpse),T_END);
    # TokenizeInternal('\def'.ToString($arga).'{'.$kpse.'}')->unlist;
    },
locked => 1);

InputDefinitions('metakeys', type => 'sty', noltxml => 1);
InputDefinitions('stex-master', type => 'sty', noltxml => 1);


#DefMacro('\kpsewhich{}{}', sub {
#    my($gullet,$arga,$argb)=@_;
#    my $kpse = pathname_kpsewhich(ToString(Expand($argb)));

#    print("\nReturn: ".'\def'.ToString($arga).'{'.$kpse.
#        '}\if@iswindows@\windows@to@path'.ToString($arga).'\fi');

#    return Tokenize('\def'.ToString($arga).'{'.$kpse.
#        '}\if@iswindows@\windows@to@path'.ToString($arga).'\fi');
#    }
#);

#DefMacro('\kpsewhich{}{}', sub {
#    my($gullet,$arga,$argb)=@_;
#    my $kpse = pathname_kpsewhich(ToString(Expand($argb)));
#    RawTeX('\def'.ToString($arga).'{'.$kpse.
#        '}\if@iswindows@\windows@to@path'.ToString($arga).'\fi');
#    ();
#    }
#); 

# metakeys

#open my $fh, '<', pathname_kpsewhich('metakeys.sty') or die "Can't open file $!";
#my $sty_text = do { local $/;<$fh> };
#RawTeX($sty_text);

# stex-master

#open $fh, '<', pathname_kpsewhich('stex-master.sty') or die "Can't open file $!";
#$sty_text = do { local $/;<$fh> };
#RawTeX($sty_text);

1;
use LaTeXML::Package;
use strict;
use warnings;

# RequirePackage("standalone");
# RequirePackage("xspace");
# RequirePackage("metakeys");
# RequirePackage("xstring");
# RequirePackage("mdframed");

# TODO standalone

RequirePackage("etoolbox");

# xstring (move to a separate package binding?)

DefMacro('\IfBeginWith OptionalMatch:* {}{}{}{}', sub {
    my ($gullet,$star,$stratks,$strbtks,$tcase,$fcase)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));

    if(substr($stra,0,length($strb)) eq $strb) {
        return $tcase;
    } else {
        return $fcase;
    }
});

DefMacro('\IfEndWith OptionalMatch:* {}{}{}{}', sub {
    my ($gullet,$star,$stratks,$strbtks,$tcase,$fcase)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));

#    print("\nEndWith Input: \"".$stra."\" and \"".$strb."\" ");

    if(substr($stra,length($stra)-length($strb)) eq $strb) {
#        print("true\n");
        return $tcase;
    } else {
#        print("false\n");
        return $fcase;
    }
});

DefMacro('\IfSubStr OptionalMatch:* {}{}{}{}', sub {
    my ($gullet,$star,$stratks,$strbtks,$tcase,$fcase)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));

    if(index($stra,$strb) != -1) {
        return $tcase;
    } else {
        return $fcase;
    }
});

DefMacro('\IfStrEq OptionalMatch:* {}{}{}{}', sub {
    my ($gullet,$star,$stratks,$strbtks,$tcase,$fcase)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));

    if($stra eq $strb) {
        return $tcase;
    } else {
        return $fcase;
    }
});

DefMacro('\StrBefore OptionalMatch:* []{}{}[]', sub{
    my ($gullet,$star,$num,$stratks,$strbtks,$macro)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));

    if(defined $num) {$num = ToString(Expand($num))-1;} else {$num = 0;}

    my $first = join $strb,(split(quotemeta($strb),$stra))[0..$num];

    if($first eq $stra) {$first = "";}

#   print("\nStrBefore Input: \"".$stra."\" and \"".$strb."\" - ".ToString($macro)."\nOutput: \"".$first."\"\n");

    if(defined $macro) {
        (T_CS('\def'),$macro,T_BEGIN,Explode($first),T_END);
    } else {Explode($first);}
});

DefMacro('\StrBehind OptionalMatch:* []{}{}[]', sub{
    my ($gullet,$star,$num,$stratks,$strbtks,$macro)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));

    if(defined $num) {$num = ToString(Expand($num))-1;} else {$num = 0;}

    #print STDERR "\nStrBehind num: ".$num."\n";

    my $first = join $strb,(split(quotemeta($strb),$stra))[0..$num];
    my $last = substr($stra,length($first)+length($strb));

   #print STDERR "\nStrBehind Input: \"".$stra."\" and \"".$strb."\" - ".ToString($macro)."\nOutput: \"".$last."\"\n";

    if(defined $macro) {
        (T_CS('\def'),$macro,T_BEGIN,Explode($last),T_END);
    } else {Explode($last);}
});


DefMacro('\StrCut OptionalMatch:* []{}{}{}{}', sub {
    my ($gullet,$star,$num,$stratks,$strbtks,$macroa,$macrob)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));


    if(defined $num) {$num = ToString(Expand($num))-1;} else {$num = 0;}

    my $first = join $strb,(split(quotemeta($strb),$stra))[0..$num];

    my $last = substr($stra,length($first)+length($strb));

 #  print("\nStrCut Input: \"".$stra."\" and \"".$strb."\" - ".ToString($macroa)." ".ToString($macrob)."\nOutput: \"".$first."\" and \"".$last."\"\n");

    (
        T_CS('\def'),$macroa,T_BEGIN,Explode($first),T_END,
        T_CS('\def'),$macrob,T_BEGIN,Explode($last),T_END,
    );

});

DefMacro('\StrGobbleLeft {}{}[]', sub {
    my ($gullet,$stratks,$num,$macro)=@_;
    my $stra = ToString(Expand($stratks));
    $num = ToString(Expand($num));

    if ($num >= length($stra)) {$stra="";} else
        {$stra = substr($stra,$num);}

    if(defined $macro) {
        (T_CS('\def'),$macro,T_BEGIN,Explode($stra),T_END);
    } else {Explode($stra);}
});

DefMacro('\StrGobbleRight {}{}[]', sub {
    my ($gullet,$stratks,$num,$macro)=@_;
    my $stra = ToString(Expand($stratks));
    $num = ToString(Expand($num));

    $stra = substr($stra,0,length($stra)-$num);

    if(defined $macro) {
        (T_CS('\def'),$macro,T_BEGIN,Explode($stra),T_END);
    } else {Explode($stra);}
});

DefMacro('\StrCount {}{}[]', sub {
    my ($gullet,$stratks,$strbtks,$macro)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));

    my $count = () = $stra =~ /$strb/g;

   #print STDERR "\nStrCount Input: \"".$stra."\" and \"".$strb."\" - ".ToString($macro)."\nOutput: ".$count;

    if(defined $macro) {
        (T_CS('\def'),$macro,T_BEGIN,Explode($count),T_END);
    } else {Explode($count);}
});

DefMacro('\StrLen {}[]', sub {
    my ($gullet,$strtks,$macro)=@_;
    my $stra = ToString(Expand($strtks));

   #print STDERR "\nStrCount Input: \"".$stra."\" and \"".$strb."\" - ".ToString($macro)."\nOutput: ".$count;

    if(defined $macro) {
        (T_CS('\def'),$macro,T_BEGIN,Explode(length($stra)),T_END);
    } else {Explode(length($stra));}
});

#InputDefinitions('filehook', type => 'sty', noltxml => 1);
#InputDefinitions('standalone', type => 'sty', noltxml => 1);
#InputDefinitions('xstring', type => 'sty', noltxml => 1);

RawTeX('\newif\if@latexml\@latexmltrue');

DefMacro('\kpsewhich{}{}', sub {
    my($gullet,$arga,$argb)=@_;
    my $kpse = pathname_kpsewhich(ToString(Expand($argb)));

    # check if $arga->getCatcode == CC_CS

    (T_CS('\def'),$arga,T_BEGIN,Explode($kpse),T_END);
    # TokenizeInternal('\def'.ToString($arga).'{'.$kpse.'}')->unlist;
    },
locked => 1);

DefMacro('\surroundwithmdframed {}', sub {();}); # TODO

# InputDefinitions('mdframed', type => 'sty', noltxml => 1);
InputDefinitions('metakeys', type => 'sty', noltxml => 1);
InputDefinitions('stex-master', type => 'sty', noltxml => 1);


#DefMacro('\kpsewhich{}{}', sub {
#    my($gullet,$arga,$argb)=@_;
#    my $kpse = pathname_kpsewhich(ToString(Expand($argb)));

#    print("\nReturn: ".'\def'.ToString($arga).'{'.$kpse.
#        '}\if@iswindows@\windows@to@path'.ToString($arga).'\fi');

#    return Tokenize('\def'.ToString($arga).'{'.$kpse.
#        '}\if@iswindows@\windows@to@path'.ToString($arga).'\fi');
#    }
#);

#DefMacro('\kpsewhich{}{}', sub {
#    my($gullet,$arga,$argb)=@_;
#    my $kpse = pathname_kpsewhich(ToString(Expand($argb)));
#    RawTeX('\def'.ToString($arga).'{'.$kpse.
#        '}\if@iswindows@\windows@to@path'.ToString($arga).'\fi');
#    ();
#    }
#); 

# metakeys

#open my $fh, '<', pathname_kpsewhich('metakeys.sty') or die "Can't open file $!";
#my $sty_text = do { local $/;<$fh> };
#RawTeX($sty_text);

# stex-master

#open $fh, '<', pathname_kpsewhich('stex-master.sty') or die "Can't open file $!";
#$sty_text = do { local $/;<$fh> };
#RawTeX($sty_text);

1;
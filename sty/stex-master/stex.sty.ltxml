use LaTeXML::Package;
use strict;
use warnings;

my $stexmode = 0;

#my $rng = '/home/jazzpirate/work/Software/ext/sTeX/sty/stex-master/sTeX';
my $rng = 'sTeX';

my $paths = [@LaTeXML::Common::Model::RelaxNG::PATHS, @{ $STATE->lookupValue('SEARCHPATHS') }];
if (my $schemadoc = LaTeXML::Common::XML::RelaxNG->new($rng.'.rng', searchpaths => $paths)) {
    RelaxNGSchema($rng);
    $stexmode = 1;
} else {
    print STDERR "\nHere2!\n";
}

#RelaxNGSchema('/home/jazzpirate/work/Software/ext/sTeX/sty/stex-master/sTeX');
RegisterNamespace('stex','http://kwarc.info/ns/sTeX');
RegisterDocumentNamespace('stex','http://kwarc.info/ns/sTeX');

# XSTRING ------------------------------------------------------------------------------------------


DefMacro('\IfBeginWith OptionalMatch:* {}{}{}{}', sub {
    my ($gullet,$star,$stratks,$strbtks,$tcase,$fcase)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));

    if(substr($stra,0,length($strb)) eq $strb) {
        return $tcase;
    } else {
        return $fcase;
    }
},locked => 1);

DefMacro('\IfEndWith OptionalMatch:* {}{}{}{}', sub {
    my ($gullet,$star,$stratks,$strbtks,$tcase,$fcase)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));

#    print("\nEndWith Input: \"".$stra."\" and \"".$strb."\" ");

    if(substr($stra,length($stra)-length($strb)) eq $strb) {
#        print("true\n");
        return $tcase;
    } else {
#        print("false\n");
        return $fcase;
    }
},locked => 1);

DefMacro('\IfSubStr OptionalMatch:* {}{}{}{}', sub {
    my ($gullet,$star,$stratks,$strbtks,$tcase,$fcase)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));

    if(index($stra,$strb) != -1) {
        return $tcase;
    } else {
        return $fcase;
    }
},locked => 1);

DefMacro('\IfStrEq OptionalMatch:* {}{}{}{}', sub {
    my ($gullet,$star,$stratks,$strbtks,$tcase,$fcase)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));

    if($stra eq $strb) {
        return $tcase;
    } else {
        return $fcase;
    }
},locked => 1);

sub is_integer {
    defined $_[0] && $_[0] =~ /^[+-]?\d+$/;
}

sub is_float {
    defined $_[0] && $_[0] =~ /^[+-]?(?!\.(?!\d)|$)\d*(?:\.\d*)?$/;
}

DefMacro('\IfInteger {}{}{}', sub {
    my ($gullet,$strtks,$tcase,$fcase)=@_;
    my $stra = ToString(Expand($strtks));

    if(is_integer($stra)) {
        return $tcase;
    } else {
        return $fcase;
    }
},locked => 1);

DefMacro('\IfDecimal {}{}{}', sub {
    my ($gullet,$strtks,$tcase,$fcase)=@_;
    my $stra = ToString(Expand($strtks));

    if(is_float($stra)) {
        my @ls = split(quotemeta('.'),$stra);
        my $int = $ls[0];
        my $dec = $ls[1];
        my @reti = (T_CS('\def'),T_CS('\integerpart'),T_BEGIN,Explode($int),T_END);
        my @retdec = (T_CS('\def'),T_CS('\decimalpart'),T_BEGIN,Explode($dec),T_END);
        return (@reti,@retdec,$tcase);
    } else {
        if (is_integer($stra)) {
            my @reta = (T_CS('\def'),T_CS('\@xs@afterdecimal'),T_BEGIN,Explode('X'),T_END);
            my @retb = (T_CS('\def'),T_CS('\afterdecimal'),T_BEGIN,Explode('X'),T_END);
            return (@reta,@retb,$fcase);
        } else {
            # TODO
            my @reta = (T_CS('\def'),T_CS('\@xs@afterdecimal'),T_BEGIN,Explode(''),T_END);
            my @retb = (T_CS('\def'),T_CS('\afterdecimal'),T_BEGIN,Explode(''),T_END);
            return (@reta,@retb,$fcase);
        };
    }
},locked => 1);

DefMacro('\StrBefore OptionalMatch:* []{}{}[]', sub{
    my ($gullet,$star,$num,$stratks,$strbtks,$macro)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));

    if(defined $num) {$num = ToString(Expand($num))-1;} else {$num = 0;}

    my $first = join $strb,(split(quotemeta($strb),$stra))[0..$num];

    if($first eq $stra) {$first = "";}

#   print("\nStrBefore Input: \"".$stra."\" and \"".$strb."\" - ".ToString($macro)."\nOutput: \"".$first."\"\n");

    if(defined $macro) {
        (T_CS('\def'),$macro,T_BEGIN,Explode($first),T_END);
    } else {Explode($first);}
},locked => 1);

DefMacro('\StrBehind OptionalMatch:* []{}{}[]', sub{
    my ($gullet,$star,$num,$stratks,$strbtks,$macro)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));

    if(defined $num) {$num = ToString(Expand($num))-1;} else {$num = 0;}

    #print STDERR "\nStrBehind num: ".$num."\n";

    my $first = join $strb,(split(quotemeta($strb),$stra))[0..$num];
    my $last = substr($stra,length($first)+length($strb));

   #print STDERR "\nStrBehind Input: \"".$stra."\" and \"".$strb."\" - ".ToString($macro)."\nOutput: \"".$last."\"\n";

    if(defined $macro) {
        (T_CS('\def'),$macro,T_BEGIN,Explode($last),T_END);
    } else {Explode($last);}
},locked => 1);


DefMacro('\StrCut OptionalMatch:* []{}{}{}{}', sub {
    my ($gullet,$star,$num,$stratks,$strbtks,$macroa,$macrob)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));


    if(defined $num) {$num = ToString(Expand($num))-1;} else {$num = 0;}

    my $first = join $strb,(split(quotemeta($strb),$stra))[0..$num];

    my $last = "";

    if ($first eq $stra) {} else {
        $last = substr($stra,length($first)+length($strb));
    }


   # print("\nStrCut Input: \"".$stra."\" and \"".$strb."\" - ".ToString($macroa)." ".ToString($macrob)."\nOutput: \"".$first."\" and \"".$last."\"\n");

    (
        T_CS('\def'),$macroa,T_BEGIN,Explode($first),T_END,
        T_CS('\def'),$macrob,T_BEGIN,Explode($last),T_END,
    );

},locked => 1);

DefMacro('\StrGobbleLeft {}{}[]', sub {
    my ($gullet,$stratks,$num,$macro)=@_;
    my $stra = ToString(Expand($stratks));
    $num = ToString(Expand($num));

    if ($num >= length($stra)) {$stra="";} else
        {$stra = substr($stra,$num);}

    if(defined $macro) {
        (T_CS('\def'),$macro,T_BEGIN,Explode($stra),T_END);
    } else {Explode($stra);}
},locked => 1);

DefMacro('\StrLeft {}{}[]', sub {
    my ($gullet,$stratks,$num,$macro)=@_;
    my $stra = ToString(Expand($stratks));
    $num = ToString(Expand($num));

    if ($num >= length($stra)) {$stra="";} else
        {$stra = substr($stra,0,$num);}

    if(defined $macro) {
        (T_CS('\def'),$macro,T_BEGIN,Explode($stra),T_END);
    } else {Explode($stra);}
},locked => 1);


DefMacro('\StrGobbleRight {}{}[]', sub {
    my ($gullet,$stratks,$num,$macro)=@_;
    my $stra = ToString(Expand($stratks));
    $num = ToString(Expand($num));

    $stra = substr($stra,0,length($stra)-$num);

    if(defined $macro) {
        (T_CS('\def'),$macro,T_BEGIN,Explode($stra),T_END);
    } else {Explode($stra);}
},locked => 1);

DefMacro('\StrMid{}{}{}[]', sub {
    my ($gullet,$strtks,$numa,$numb,$macro)=@_;
    my $stra = ToString(Expand($strtks));
    $numa = ToString(Expand($numa))-1;
    $numb = ToString(Expand($numb)) - $numa - 1;

    my $strb = substr($stra,$numa,$numb);

    # print STDERR "\nStrMid: \"".$stra."\": ".$numa." and ".$numb."\nReturn: ".$strb."\n";

    if(defined $macro) {
        (T_CS('\def'),$macro,T_BEGIN,Explode($strb),T_END);
    } else {Explode($strb);}
},locked => 1);

DefMacro('\StrChar OptionalMatch:* {}{}[]', sub {
    my ($gullet,$star,$strtks,$num,$macro)=@_;
    my $stra = ToString(Expand($strtks));
    $num = ToString(Expand($num)) - 1;

    # print STDERR "\nStrChar: \"".$stra."\" and ".$num."\nReturn: ".substr($stra,$num,1)."\n";

    if(defined $macro) {
        (T_CS('\def'),$macro,T_BEGIN,Explode(substr($stra,$num,1)),T_END);
    } else {Explode(substr($stra,$num,1));}
},locked => 1);

DefMacro('\StrCount {}{}[]', sub {
    my ($gullet,$stratks,$strbtks,$macro)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = quotemeta(ToString(Expand($strbtks)));

    #print STDERR "\nStrCount Input: \"".$stra."\" and \"".$strb."\" - ".ToString($macro);

    my $count = () = $stra =~ /$strb/g;

    #print STDERR "\nOutput: ".$count;

    if(defined $macro) {
        (T_CS('\def'),$macro,T_BEGIN,Explode($count),T_END);
    } else {Explode($count);}
},locked => 1);

DefMacro('\StrLen {}[]', sub {
    my ($gullet,$strtks,$macro)=@_;
    my $stra = ToString(Expand($strtks));

   #print STDERR "\nStrCount Input: \"".$stra."\" and \"".$strb."\" - ".ToString($macro)."\nOutput: ".$count;

    if(defined $macro) {
        (T_CS('\def'),$macro,T_BEGIN,Explode(length($stra)),T_END);
    } else {Explode(length($stra));}
},locked => 1);

DefMacro('\StrPosition []{}{}[]', sub {
    my ($gullet,$num,$stratks,$strbtks,$macro)=@_;
    my $stra = ToString(Expand($stratks));
    my $strb = ToString(Expand($strbtks));
    if (defined $num) {$num = ToString(Expand($num))-1;} else {$num = 0;}

    my $first = join $strb,(split(quotemeta($strb),$stra))[0..$num];


    if(defined $macro) {
        (T_CS('\def'),$macro,T_BEGIN,Explode(length($stra)+1),T_END);
    } else {Explode(length($stra)+1);}
},locked => 1);

# STEX --------------------------------------------------------------------------------------------------------------------------


if($stexmode) {RawTeX('\newif\if@latexml\@latexmltrue');}

DefMacro('\surroundwithmdframed',sub {}, locked => 1);

DefMacro('\@kpsewhich{}{}', sub {
    my($gullet,$arga,$argb)=@_;
    my $kpse = pathname_kpsewhich(ToString(Expand($argb)));

    # check if $arga->getCatcode == CC_CS

    (T_CS('\def'),$arga,T_BEGIN,Explode($kpse),T_END);
    # TokenizeInternal('\def'.ToString($arga).'{'.$kpse.'}')->unlist;
    },
locked => 1);

InputDefinitions('stex', type => 'sty', noltxml => 1);

use LaTeXML::Core::Rewrite;
use Scalar::Util qw/reftype/;

sub AttachSourceRefs {
    my ($document,$child) = @_;
    if (defined($document->getNodeBox($child))) {
        if(substr($child,0,5) eq "<Math") {}
        else {
            my $sref = $document->getNodeBox($child)->getLocator;
            if (reftype $sref eq reftype {}) {
                my $filename = $$sref{source};
                my $fromLine = $$sref{fromLine};
                my $toLine = $$sref{toLine};
                my $fromCol = $$sref{fromCol};
                my $toCol = $$sref{toCol};
                my $refline = $filename."#(".$fromLine.";".$fromCol.")(".$toLine.";".$toCol.")";
                $child->setAttribute('stex:sourceref',$refline);
                #my $new = $child->addNewChild('http://kwarc.info/ns/sTeX', 'sourceref');
                #$new->setAttribute('resource',$refline);
                #$new->setAttribute('_font','');
                map {AttachSourceRefs($document,$_)} $document->getChildElements($child);
            }
        }
    }
}

sub PropagateAttributes {
    my ($document,$whatsit) = @_;
    my $node = $document->getNode;
    my $current = $document->getLastChildElement($node) || $node;
    my @nodes = $current->childNodes();
    if ($current->getAttribute('property') eq 'stex:arg') {
        $current->setAttribute('stex:arg',$current->getAttribute('resource'));
        $current->removeAttribute('property');
        $current->removeAttribute('resource');
        if (scalar(@nodes) == 1) {
            my $child = $nodes[0];
            if(!$child->hasAttribute('stex:arg')) {
                $child->setAttribute('stex:arg',$current->getAttribute('stex:arg'));
                if ($current->hasAttribute('stex:visible')) {
                    $child->setAttribute('stex:visible',$current->getAttribute('stex:visible'));
                }
                $document->replaceNode($current,$child);
            }
        }
    } else {
        if (scalar(@nodes) == 1) {
            my $child = $nodes[0];
            if(!$child->hasAttribute('property') && !$child->hasAttribute('resource') && !$child->hasAttribute('stex:arg')) {
                $child->setAttribute('property',$current->getAttribute('property'));
                $child->setAttribute('resource',$current->getAttribute('resource'));
                if ($current->hasAttribute('stex:visible')) {
                    $child->setAttribute('stex:visible',$current->getAttribute('stex:visible'));
                }
                $document->replaceNode($current,$child);
            }
        }
    }
}

sub PropagateVisible {
    my ($document,$whatsit) = @_;
    my $node = $document->getNode;
    my $current = $document->getLastChildElement($node) || $node;
    my @nodes = $current->childNodes();
    if (scalar(@nodes) == 1) {
        my $child = $nodes[0];
        $child->setAttribute('stex:visible','false');
        $document->replaceNode($current,$child);
    }
}

if ($stexmode) {
    DefConstructor('\latexml@annotate@invisible{}{}{}',
        '<stex:annotation property="stex:#1" resource="#2" stex:visible="false">#3</stex:annotation>',
        afterConstruct => sub {
            my ($document,$node) = @_;
            PropagateAttributes($document,$node);
       }
    );

    DefConstructor('\latexml@annotate@text{}{}{}',
        '<stex:annotationtext property="stex:#1" resource="#2">#3</stex:annotationtext>',
        afterConstruct => sub {
            my ($document,$whatsit) = @_;
            my $node = $document->getNode;
            my $current = $document->getLastChildElement($node) || $node;
            if ($current->getAttribute('property') eq 'stex:arg') {
                $current->setAttribute('stex:arg',$current->getAttribute('resource'));
                $current->removeAttribute('property');
                $current->removeAttribute('resource');
            }
       }
    );

    DefConstructor('\latexml@invisible@text{}',
        '<stex:annotation stex:visible="false">#1</stex:annotation>',
        afterConstruct => sub {
            my ($document,$node) = @_;
            PropagateVisible($document,$node);
       }
    );

    DefEnvironment('{latexml@annotateenv}{}{}',
        '<stex:annotationenv property="stex:#1" resource="#2">#body</stex:annotationenv>',
    locked => 1);

    DefConstructor('\latexml@invisible@math{}', 
        '<ltx:XMArg role="sTeX" stex:visible="false">#1</ltx:XMArg>',
        afterConstruct => sub {
            my ($document,$node) = @_;
            PropagateVisible($document,$node);
       },
    locked => 1);

    DefConstructor('\latexml@annotate@math{}{}{}', 
       '<ltx:XMArg role="sTeX" property="stex:#1" resource="#2">#3</ltx:XMArg>',
       afterConstruct => sub {
            my ($document,$node) = @_;
            PropagateAttributes($document,$node);
       },
    #    '<ltx:XMApp class="stex:#1_#2"><ltx:XMTok/><ltx:XMArg>#3</ltx:XMArg></ltx:XMApp>',
#        afterConstruct => sub {
#            my ($document,$whatsit) = @_;
#            my $node = $document->getNode;
#            my $current = $document->getLastChildElement($node) || $node;
#            my @nodes = $document->getChildElements($current);
#            if (scalar(@nodes) == 1) {
#                my $child = $nodes[0];
#                my $class = $current->getAttribute('class');
#                my $childclass = $child->getAttribute('class');
#                if (defined($childclass)) {
#                    $current->setAttribute('class',$class.' '.$childclass);
#                }
#            }
#        },
    locked => 1);

    DefRewrite(
        xpath => '*',
        replace => sub {
            my ($document,$node) = @_;
            AttachSourceRefs($document,$node);
            #map {AttachSourceRefs($_)} $document->getChildElements($node);
            $document->getNode->appendChild($node);
        }
    );

}


1;

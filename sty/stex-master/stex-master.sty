%%
%% This is file `stex-master.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% stex-master.dtx  (with options: `package')
%% 
\NeedsTeXFormat{LaTeX2e}[1999/12/01]
\ProvidesPackage{stex-master}[2020/11/10 v2.0 Semantic Markup]
\newif\if@modules@html@\@modules@html@true
\DeclareOption{omdocmode}{\@modules@html@false}
\newif\ifmod@show\mod@showfalse
\DeclareOption{showmods}{\mod@showtrue}
\newif\ifextrefs\extrefsfalse
\DeclareOption{extrefs}{\extrefstrue}
\ProcessOptions
\RequirePackage{standalone}
\RequirePackage{xspace}
\RequirePackage{metakeys}
\protected\def\stex{%
  \@ifundefined{texorpdfstring}%
  {\let\texorpdfstring\@firstoftwo}%
  {}%
  \texorpdfstring{\raisebox{-.5ex}S\kern-.5ex\TeX}{sTeX}\xspace%
}
\def\sTeX{\stex}
\newif\if@latexml\@latexmlfalse
\RequirePackage{xstring}
\RequirePackage{etoolbox}
\newrobustcmd\defpath[3][]{%
  \expandafter\newcommand\csname #2\endcsname[1]{#3/##1}%
}%
\def\pathsuris@setcatcodes{%
    \edef\pathsuris@oldcatcode@hash{\the\catcode`\#}%
    \catcode`\#=12\relax%
    \edef\pathsuris@oldcatcode@slash{\the\catcode`\/}%
    \catcode`\/=12\relax%
    \edef\pathsuris@oldcatcode@colon{\the\catcode`\:}%
    \catcode`\:=12\relax%
    \edef\pathsuris@oldcatcode@qm{\the\catcode`\?}%
    \catcode`\?=12\relax%
}
\def\pathsuris@resetcatcodes{%
    \catcode`\#\pathsuris@oldcatcode@hash\relax%
    \catcode`\/\pathsuris@oldcatcode@slash\relax%
    \catcode`\:\pathsuris@oldcatcode@colon\relax%
    \catcode`\?\pathsuris@oldcatcode@qm\relax%
}
\def\@ToTop{..}
\def\@Slash{/}
\def\@Colon{:}
\def\@Space{ }
\def\@QuestionMark{?}
\def\@Dot{.}
\catcode`\&=12
\def\@Ampersand{&}
\catcode`\&=4
\pathsuris@setcatcodes
\def\@Fragment{#}
\pathsuris@resetcatcodes
\catcode`\.=0
.catcode`.\=12
.let.@BackSlash\
.catcode`.\=0
\catcode`\.=12
\edef\old@percent@catcode{\the\catcode`\%}
\catcode`\%=12
\let\@Percent%
\catcode`\%=\old@percent@catcode
\def\@cpath#1{%
    \edef\pathsuris@cpath@temp{#1}%
    \def\@CanPath{}%
    \IfBeginWith\pathsuris@cpath@temp\@Slash{%
      \@cpath@loop%
      \edef\@CanPath{\@Slash\@CanPath}%
    }{%
        \IfBeginWith\pathsuris@cpath@temp{\@Dot\@Slash}{%
            \StrGobbleLeft\pathsuris@cpath@temp2[\pathsuris@cpath@temp]%
            \@cpath@loop%
        }{%
            \ifx\pathsuris@cpath@temp\@Dot\else%
            \@cpath@loop\fi%
        }%
    }%
    \IfEndWith\@CanPath\@Slash{%
      \ifx\@CanPath\@Slash\else%
        \StrGobbleRight\@CanPath1[\@CanPath]%
      \fi%
    }{}%
}

\def\@cpath@loop{%
    \IfSubStr\pathsuris@cpath@temp\@Slash{%
        \StrCut\pathsuris@cpath@temp\@Slash\pathsuris@cpath@temp@a\pathsuris@cpath@temp%
        \ifx\pathsuris@cpath@temp@a\@ToTop%
            \ifx\@CanPath\@empty%
                \edef\@CanPath{\@ToTop}%
            \else%
                \edef\@CanPath{\@CanPath\@Slash\@ToTop}%
            \fi%
            \@cpath@loop%
        \else%
        \ifx\pathsuris@cpath@temp@a\@Dot%
            \@cpath@loop%
        \else%
        \IfBeginWith\pathsuris@cpath@temp\@ToTop{%
            \StrBehind{\pathsuris@cpath@temp}{\@ToTop}[\pathsuris@cpath@temp]%
            \IfBeginWith\pathsuris@cpath@temp\@Slash{%
                \edef\pathsuris@cpath@temp{\@CanPath\pathsuris@cpath@temp}%
            }{%
                \ifx\@CanPath\@empty\else%
                    \edef\pathsuris@cpath@temp{\@CanPath\@Slash\pathsuris@cpath@temp}
                \fi%
            }%
            \def\@CanPath{}%
            \@cpath@loop%
        }{%
            \ifx\@CanPath\@empty%
                \edef\@CanPath{\pathsuris@cpath@temp@a}%
            \else%
                \edef\@CanPath{\@CanPath\@Slash\pathsuris@cpath@temp@a}%
            \fi%
            \@cpath@loop
        }%
        \fi\fi%
    }{
        \ifx\@CanPath\@empty%
            \edef\@CanPath{\pathsuris@cpath@temp}%
        \else%
            \edef\@CanPath{\@CanPath\@Slash\pathsuris@cpath@temp}%
        \fi%
    }%
}
\newcommand\cpath[1]{%
    \@cpath{#1}%
    \@CanPath%
}
\def\path@filename#1#2{%
    \edef\filename@oldpath{#1}%
    \StrCount\filename@oldpath\@Slash[\filename@lastslash]%
    \ifnum\filename@lastslash>0%
        \StrBehind[\filename@lastslash]\filename@oldpath\@Slash[\filename@oldpath]%
        \edef#2{\filename@oldpath}%
    \else%
        \edef#2{\filename@oldpath}%
    \fi%
}
\newif\if@iswindows@\@iswindows@false
\IfFileExists{nul:}{\IfFileExists{/dev/null}{}{\@iswindows@true}}{}
\newif\if@windowstopath@inpath@
\def\windows@to@path#1{
    \@windowstopath@inpath@false
    \def\windows@temp{}
    \edef\windows@path{#1}
    \ifx\windows@path\@empty\else
        \expandafter\windows@path@loop\windows@path\windows@path@end
    \fi
    \let#1\windows@temp
}
\def\windows@path@loop#1#2\windows@path@end{
    \def\windows@temp@b{#2}
    \ifx\windows@temp@b\@empty
        \def\windows@continue{}
    \else
        \def\windows@continue{\windows@path@loop#2\windows@path@end}
    \fi
    \if@windowstopath@inpath@
        \ifx#1\@BackSlash
            \edef\windows@temp{\windows@temp\@Slash}
        \else
            \edef\windows@temp{\windows@temp#1}
        \fi
    \else
        \ifx#1:
            \edef\windows@temp{\@Slash\windows@temp}
            \@windowstopath@inpath@true
        \else
            \edef\windows@temp{\windows@temp#1}
        \fi
    \fi
    \windows@continue
}
\def\path@to@windows#1{
    \@windowstopath@inpath@false
    \def\windows@temp{}
    \edef\windows@path{#1}
    \edef\windows@path{\expandafter\@gobble\windows@path}
    \ifx\windows@path\@empty\else
        \expandafter\path@windows@loop\windows@path\windows@path@end
    \fi
    \let#1\windows@temp
}
\def\path@windows@loop#1#2\windows@path@end{
    \def\windows@temp@b{#2}
    \ifx\windows@temp@b\@empty
        \def\windows@continue{}
    \else
        \def\windows@continue{\path@windows@loop#2\windows@path@end}
    \fi
    \if@windowstopath@inpath@
        \ifx#1/
            \edef\windows@temp{\windows@temp\@BackSlash}
        \else
            \edef\windows@temp{\windows@temp#1}
        \fi
    \else
        \ifx#1/
            \edef\windows@temp{\windows@temp:\@BackSlash}
            \@windowstopath@inpath@true
        \else
            \edef\windows@temp{\windows@temp#1}
        \fi
    \fi
    \windows@continue
}
\def\trimstring#1{%
    \edef\pathsuris@trim@temp{#1}%
    \IfBeginWith\pathsuris@trim@temp\@Space{%
        \StrGobbleLeft\pathsuris@trim@temp1[#1]%
        \trimstring{#1}%
    }{%
        \IfEndWith\pathsuris@trim@temp\@Space{%
            \StrGobbleRight\pathsuris@trim@temp1[#1]%
            \trimstring{#1}%
        }{%
            \edef#1{\pathsuris@trim@temp}%
        }%
    }%
}
\def\kpsewhich#1#2{\begingroup%
  \edef\kpsewhich@cmd{"|kpsewhich #2"}%
  \everyeof{\noexpand}%
  \catcode`\\=12%
  \edef#1{\@@input\kpsewhich@cmd\@Space}%
  \trimstring#1%
  \if@iswindows@\windows@to@path#1\fi%
  \xdef#1{\expandafter\detokenize\expandafter{#1}}%
\endgroup}
\edef\pwd@cmd{\if@iswindows@ -expand-var \percent CD\percent\else -var-value PWD\fi}
\kpsewhich\stex@maindir\pwd@cmd
\edef\stex@mainfile{\stex@maindir\@Slash\jobname}
\edef\stex@mainfile{\expandafter\detokenize\expandafter{\stex@mainfile}}
\def\stex@currfile@stack{}

\def\stex@currfile@push#1{%
    \edef\stex@temppath{#1}%
    \edef\stex@temppath{\expandafter\detokenize\expandafter{\stex@temppath}}%
  \edef\stex@currfile@stack{\stex@currfile\ifx\stex@currfile@stack\@empty\else,\stex@currfile@stack\fi}
  \IfBeginWith\stex@temppath\@Slash{\@cpath{\stex@temppath}}{%
    \@cpath{\stex@maindir\@Slash#1}%
  }
  \let\stex@currfile\@CanPath%
  \path@filename\stex@currfile\stex@currfilename%
  \StrLen\stex@currfilename[\stex@currfile@tmp]%
  \StrGobbleRight\stex@currfile{\the\numexpr\stex@currfile@tmp+1 }[\stex@currpath]%
  \global\let\stex@currfile\stex@currfile%
  \global\let\stex@currpath\stex@currpath%
  \global\let\stex@currfilename\stex@currfilename%
}
\def\stex@currfile@pop{%
  \ifx\stex@currfile@stack\@empty%
    \global\let\stex@currfile\stex@mainfile%
    \global\let\stex@currpath\stex@maindir%
    \global\let\stex@currfilename\jobname%
  \else%
    \StrCut\stex@currfile@stack,\stex@currfile\stex@currfile@stack%
    \path@filename\stex@currfile\stex@currfilename%
    \StrLen\stex@currfilename[\stex@currfile@tmp]%
    \StrGobbleRight\stex@currfile{\the\numexpr\stex@currfile@tmp+1 }[\stex@currpath]%
    \global\let\stex@currfile\stex@currfile%
    \global\let\stex@currpath\stex@currpath%
    \global\let\stex@currfilename\stex@currfilename%
  \fi%
}
\def\stexinput#1{
    \edef\temp@path{#1}
    \if@iswindows@\path@to@windows\temp@path\fi%
    \stex@currfile@push\temp@path%
    \IfFileExists\stex@currfile{\input{\stex@currfile}}{%
        \PackageError{stex-currfile}{File does not exist (#1): \stex@currfile}{}%
    }%
    \stex@currfile@pop%
}
\stex@currfile@pop
\kpsewhich\mathhub@path{--var-value MATHHUB}
\if@iswindows@\windows@to@path\mathhub@path\fi
\ifx\mathhub@path\@empty%
  \PackageWarning{stex}{MATHHUB system variable not found or wrongly set}{}
  \defpath{MathHub}{}
\else\defpath{MathHub}\mathhub@path\fi
\def\findmanifest#1{
  \@cpath{#1}
  \ifx\@CanPath\@Slash
    \def\manifest@mf{}
  \else\ifx\@CanPath\@empty
      \def\manifest@mf{}
  \else
    \edef\@findmanifest@path{\@CanPath/MANIFEST.MF}
    \if@iswindows@\path@to@windows\@findmanifest@path\fi
    \IfFileExists{\@findmanifest@path}{
      %\message{MANIFEST.MF found at \@findmanifest@path}
      \edef\manifest@mf{\@findmanifest@path}
      \xdef\temp@archive@dir{\expandafter\detokenize\expandafter{\@CanPath}}
    }{
    \edef\@findmanifest@path{\@CanPath/META-INF/MANIFEST.MF}
    \if@iswindows@\path@to@windows\@findmanifest@path\fi
    \IfFileExists{\@findmanifest@path}{
      %\message{MANIFEST.MF found at \@findmanifest@path}
      \edef\manifest@mf{\@findmanifest@path}
      \xdef\temp@archive@dir{\expandafter\detokenize\expandafter{\@CanPath}}
    }{
    \edef\@findmanifest@path{\@CanPath/meta-inf/MANIFEST.MF}
    \if@iswindows@\path@to@windows\@findmanifest@path\fi
    \IfFileExists{\@findmanifest@path}{
      %\message{MANIFEST.MF found at \@findmanifest@path}
      \edef\manifest@mf{\@findmanifest@path}
      \xdef\temp@archive@dir{\expandafter\detokenize\expandafter{\@CanPath}}
    }{
      \findmanifest{\@CanPath/..}
    }}}
  \fi\fi
}
\def\split@manifest@key{
  \IfSubStr{\manifest@line}{\@Colon}{
      \StrBefore{\manifest@line}{\@Colon}[\manifest@key]
      \StrBehind{\manifest@line}{\@Colon}[\manifest@line]
      \trimstring\manifest@line
      \trimstring\manifest@key
  }{
      \def\manifest@key{}
  }
}
\def\parse@manifest@loop{
  \ifeof\@manifest
  \else
    \read\@manifest to \manifest@line\relax
    \edef\manifest@line{\expandafter\detokenize\expandafter{\manifest@line}}
    \split@manifest@key
    % id
    \IfStrEq\manifest@key{\detokenize{id}}{
        \xdef\manifest@mf@id{\manifest@line}
    }{
    % narration-base
    \IfStrEq\manifest@key{\detokenize{narration-base}}{
        \xdef\manifest@mf@narr{\manifest@line}
    }{
    % namespace
    \IfStrEq\manifest@key{\detokenize{source-base}}{
        \xdef\manifest@mf@ns{\manifest@line}
    }{
    \IfStrEq\manifest@key{\detokenize{ns}}{
        \xdef\manifest@mf@ns{\manifest@line}
    }{
    % dependencies
    \IfStrEq\manifest@key{\detokenize{dependencies}}{
        \xdef\manifest@mf@deps{\manifest@line}
    }{
    }}}}}
    \parse@manifest@loop
  \fi
}
\newread\@manifest
\def\parsemanifest#1#2{%
  \gdef\temp@archive@dir{}%
  \findmanifest{#2}%
  \begingroup%
    \gdef\manifest@mf@id{}%
    \gdef\manifest@mf@narr{}%
    \gdef\manifest@mf@ns{}%
    \gdef\manifest@mf@deps{}%
    \openin\@manifest\manifest@mf%
    \parse@manifest@loop%
    \closein\@manifest%
  \endgroup%
  \if@iswindows@\windows@to@path\manifest@mf\fi%
  \cslet{#1id}\manifest@mf@id%
  \cslet{#1narr}\manifest@mf@narr%
  \cslet{#1ns}\manifest@mf@ns%
  \cslet{#1deps}\manifest@mf@deps%
  \ifcsvoid{manifest@mf@id}{}{%
    \cslet{#1dir}\temp@archive@dir%
  }%
}
\def\setcurrentreposinfo#1{%
  \ifcsdef{mathhub@dir@#1}{%
    \@inmhrepostrue
    \edef\mh@currentrepos{#1}%
    \expandafter\let\expandafter\currentrepos@dir\csname mathhub@dir@#1\endcsname%
    \expandafter\let\expandafter\currentrepos@narr\csname mathhub@narr@#1\endcsname%
    \expandafter\let\expandafter\currentrepos@ns\csname mathhub@ns@#1\endcsname%
    \expandafter\let\expandafter\currentrepos@deps\csname mathhub@deps@#1\endcsname%
  }{%
    \parsemanifest{currentrepos@}{\MathHub{#1}}%
    \@setcurrentreposinfo%
    \ifcsvoid{currentrepos@dir}{\PackageError{stex}{No archive with %
      name #1 found!}{make sure that #1 is directly in your MATHHUB folder %
      and contains a MANIFEST.MF, either directly in #1 or in a meta-inf %
      subfolder.}}{\@inmhrepostrue}%
  }%
}

\def\@setcurrentreposinfo{%
  \edef\mh@currentrepos{\currentrepos@id}%
  \ifcsvoid{currentrepos@dir}{}{%
    \csxdef{mathhub@dir@\currentrepos@id}{\currentrepos@dir}%
    \csxdef{mathhub@narr@\currentrepos@id}{\currentrepos@narr}%
    \csxdef{mathhub@ns@\currentrepos@id}{\currentrepos@ns}%
    \csxdef{mathhub@deps@\currentrepos@id}{\currentrepos@deps}%
  }
}
\newif\if@inmhrepos\@inmhreposfalse
\ifcsvoid{stex@maindir}{}{
\parsemanifest{currentrepos@}\stex@maindir
\@setcurrentreposinfo
\ifcsvoid{currentrepos@dir}{\PackageWarning{stex}{Not currently in a MathHub repository}{}}{%
  \message{Current repository: \mh@currentrepos}
}
}
\if@latexml\else\ifmod@show\RequirePackage{mdframed}\fi\fi
\def\ignorespacesandpars{\begingroup\catcode13=10\@ifnextchar\relax{\endgroup}{\endgroup}}
\def\ignorespacesandparsafterend#1\ignorespaces\fi{#1\fi\ignorespacesandpars}
\def\ignorespacesandpars{\ifhmode\unskip\fi\@ifnextchar\par{\expandafter\ignorespacesandpars\@gobble}{}}
\addmetakey*{module}{title}
\addmetakey*{module}{name}
\addmetakey*{module}{creators}
\addmetakey*{module}{contributors}
\addmetakey*{module}{srccite}
\addmetakey*{module}{ns}
\addmetakey*{module}{narr}
\ifdef{\thesection}{\newcounter{module}[section]}{\newcounter{module}}%
\newrobustcmd\module@heading{%
  \stepcounter{module}%
  \ifmod@show%
  \noindent{\textbf{Module} \thesection.\themodule [\module@name]}%
  \sref@label@id{Module \thesection.\themodule [\module@name]}%
    \ifx\module@title\@empty :\quad\else\quad(\module@title)\hfill\\\fi%
  \fi%
}%
\newenvironment{module}[1][]{%
  \begin{@module}[#1]%
  \module@heading% make the headings
  \ignorespacesandpars\parsemodule@maybesetcodes}{%
  \end{@module}%
  \ignorespacesafterend%
}%
\ifmod@show\surroundwithmdframed{module@om@common}\fi%
\def\g@addto@macro@safe#1#2{\ifx#1\relax\def#1{}\fi\g@addto@macro#1{#2}}
\def\addto@thismodule#1{%
  \@ifundefined{this@module}{}{%
    \expandafter\g@addto@macro@safe\this@module{#1}%
  }%
}
\def\addto@thismodulex#1{%
\@ifundefined{this@module}{}{%
  \edef\addto@thismodule@exp{#1}%
  \expandafter\expandafter\expandafter\g@addto@macro@safe%
  \expandafter\this@module\expandafter{\addto@thismodule@exp}%
}}
\newif\ifarchive@ns@empty@\archive@ns@empty@false
\def\set@default@ns{%
  \edef\@module@ns@temp{\stex@currpath}%
  \if@iswindows@\windows@to@path\@module@ns@temp\fi%
  \archive@ns@empty@false%
  \ifcsvoid{mh@currentrepos}{\archive@ns@empty@true}%
  {\expandafter\ifx\csname mathhub@ns@\mh@currentrepos\endcsname\@empty\archive@ns@empty@true\fi%
  }%
  \ifarchive@ns@empty@%
    \edef\@module@ns@tempuri{file\@Colon\@Slash\@Slash\@module@ns@temp}%
  \else%
    \edef\@module@filepath@temppath{\@module@ns@temp}%
    \edef\@module@ns@tempuri{\csname mathhub@ns@\mh@currentrepos\endcsname}%
    \edef\@module@archivedirpath{\csname mathhub@dir@\mh@currentrepos\endcsname\@Slash source}%
    \edef\@module@archivedirpath{\expandafter\detokenize\expandafter{\@module@archivedirpath}}%
    \IfBeginWith\@module@filepath@temppath\@module@archivedirpath{%
      \StrLen\@module@archivedirpath[\ns@temp@length]%
      \StrGobbleLeft\@module@filepath@temppath\ns@temp@length[\@module@filepath@temprest]%
      \edef\@module@ns@tempuri{\@module@ns@tempuri\@module@filepath@temprest}%
    }{}%
  \fi%
  \IfEndWith\@module@ns@tempuri\@Slash{\StrGobbleRight\@module@ns@tempuri1[\@module@ns@tempuri]}{}%
  \setkeys{module}{ns=\@module@ns@tempuri}%
}
\def\set@next@moduleid{%
  \unless\ifcsname namespace@\module@ns @unnamedmodules\endcsname%
      \csgdef{namespace@\module@ns @unnamedmodules}{0}%
  \fi%
  \edef\namespace@currnum{\csname namespace@\module@ns @unnamedmodules\endcsname}%
  \edef\module@temp@setidname{\noexpand\setkeys{module}{name=module\namespace@currnum}}%
  \module@temp@setidname%
  \csxdef{namespace@\module@ns @unnamedmodules}{\the\numexpr\namespace@currnum+1}%
}
\newenvironment{@module}[1][]{%
  \metasetkeys{module}{#1}%
  \ifcsvoid{module@name}{\let\module@name\module@id}{}% % TODO deprecate
  \ifx\module@ns\@empty\set@default@ns\fi%
  \ifx\module@narr\@empty%
    \setkeys{module}{narr=\module@ns}%
  \fi%
  \ifcsvoid{module@name}{\set@next@moduleid}{}%
  \let\module@id\module@name% % TODO deprecate
  \edef\module@uri{\module@ns\@QuestionMark\module@name}%
  \csgdef{module@names@\module@uri}{}%
  \csgdef{module@imports@\module@uri}{}%
  \csxdef{\module@uri}{\noexpand\@invoke@module{\module@uri}}%
  \expandafter\global\expandafter\let\csname Module\module@name\expandafter\endcsname\csname\module@uri\endcsname%
  \edef\this@module{%
    \expandafter\noexpand\csname module@defs@\module@uri\endcsname%
  }%
  \csdef{module@defs@\module@uri}{}%
  \ifcsvoid{mh@currentrepos}{}{%
    \@inmhrepostrue%
    \addto@thismodulex{\expandafter\edef\expandafter\noexpand\csname mh@old@repos@\module@uri\endcsname%
      {\noexpand\mh@currentrepos}}%
    \addto@thismodulex{\noexpand\setcurrentreposinfo{\mh@currentrepos}}%
  }%
}{%
  \if@inmhrepos%
  \@inmhreposfalse%
  \addto@thismodulex{\noexpand\setcurrentreposinfo{\expandafter\noexpand\csname mh@old@repos@\module@uri\endcsname}}%
  \fi%
}%
\def\@URI{uri}
\def\@invoke@module#1#2{%
  \ifx\@URI#2%
    #1%
  \else%
    % TODO something else
    #2%
  \fi%
}
\newif\if@smsmode\@smsmodefalse
\def\parsemodule@escapechar@allowed{true}
\def\parsemodule@allow#1{
  \expandafter\let\csname parsemodule@allowedmacro@#1\endcsname\parsemodule@escapechar@allowed
}
\def\parsemodule@allowenv#1{
  \expandafter\let\csname parsemodule@allowedenv@#1\endcsname\parsemodule@escapechar@allowed
}
\def\parsemodule@escapechar@beginstring{begin}
\def\parsemodule@escapechar@endstring{end}
\parsemodule@allow{symdef}
\parsemodule@allow{abbrdef}
\parsemodule@allow{importmodule}
\parsemodule@allowenv{module}
\parsemodule@allow{importmhmodule}
\parsemodule@allow{gimport}
\parsemodule@allowenv{modsig}
\parsemodule@allowenv{mhmodsig}
\parsemodule@allowenv{mhmodnl}
\parsemodule@allowenv{modnl}
\parsemodule@allow{symvariant}
\parsemodule@allow{symi}
\parsemodule@allow{symii}
\parsemodule@allow{symiii}
\parsemodule@allow{symiv}
\parsemodule@allow{notation}
\parsemodule@allow{symdecl}
\catcode`\.=0
.catcode`.\=13
.def.@active@slash{\}
.catcode`.<=1
.catcode`.>=2
.catcode`.{=12
.catcode`.}=12
.def.@open@brace<{>
.def.@close@brace<}>
.catcode`.\=0
\catcode`\.=12
\catcode`\{=1
\catcode`\}=2
\catcode`\<=12
\catcode`\>=12
  \def\set@parsemodule@catcodes{%
      \global\catcode`\\=13%
      \global\catcode`\#=12%
      \global\catcode`\{=12%
      \global\catcode`\}=12%
      \global\catcode`\$=12%$
      \global\catcode`\^=12%
      \global\catcode`\_=12%
      \global\catcode`\&=12%
      \expandafter\let\@active@slash\parsemodule@escapechar%
  }
  \def\reset@parsemodule@catcodes{%
      \global\catcode`\\=0%
      \global\catcode`\#=6%
      \global\catcode`\{=1%
      \global\catcode`\}=2%
      \global\catcode`\$=3%$
      \global\catcode`\^=7%
      \global\catcode`\_=8%
      \global\catcode`\&=4%
  }
  \def\parsemodule@maybesetcodes{%
    \if@smsmode\set@parsemodule@catcodes\fi%
  }

\def\parsemodule@escapechar{%
    \def\parsemodule@escape@currcs{}%
    \parsemodule@escape@parse@nextchar@%
}%
\long\def\parsemodule@escape@parse@nextchar@#1{%
    \ifcat a#1\relax%
        \edef\parsemodule@escape@currcs{\parsemodule@escape@currcs#1}%
        \let\parsemodule@do@next\parsemodule@escape@parse@nextchar@%
    \else%
      \def\parsemodule@last@char{#1}%
      \def\parsemodule@do@next{\parsemodule@escapechar@checkcs}%
    \fi%
    \parsemodule@do@next%
}
\def\parsemodule@escapechar@checkcs{%
    \ifx\parsemodule@escape@currcs\parsemodule@escapechar@beginstring%
        \edef\parsemodule@do@next{\noexpand\parsemodule@escapechar@checkbeginenv\parsemodule@last@char}%
    \else%
        \ifx\parsemodule@escape@currcs\parsemodule@escapechar@endstring%
          \edef\parsemodule@do@next{\noexpand\parsemodule@escapechar@checkendenv\parsemodule@last@char}%
        \else%
            \expandafter\ifx\csname parsemodule@allowedmacro@\parsemodule@escape@currcs\endcsname%
                \parsemodule@escapechar@allowed%
              \ifx\parsemodule@last@char\@open@brace%
                \expandafter\let\expandafter\parsemodule@do@next@ii\csname\parsemodule@escape@currcs\endcsname%
                \edef\parsemodule@do@next{\noexpand\parsemodule@converttoproperbraces\@open@brace}%
              \else%
                \reset@parsemodule@catcodes%
                \edef\parsemodule@do@next{\expandafter\noexpand\csname\parsemodule@escape@currcs\endcsname\parsemodule@last@char}%
              \fi%
            \else\def\parsemodule@do@next{\relax\parsemodule@last@char}\fi%
        \fi%
    \fi%
    \parsemodule@do@next%
}
\expandafter\expandafter\expandafter\def%
\expandafter\expandafter\expandafter\parsemodule@converttoproperbraces%
\expandafter\@open@brace\expandafter#\expandafter1\@close@brace{%
  \reset@parsemodule@catcodes%
  \parsemodule@do@next@ii{#1}%
}
\expandafter\expandafter\expandafter\def%
\expandafter\expandafter\expandafter\parsemodule@escapechar@checkbeginenv%
\expandafter\@open@brace\expandafter#\expandafter1\@close@brace{%
    \expandafter\ifx\csname parsemodule@allowedenv@#1\endcsname\parsemodule@escapechar@allowed%
        \reset@parsemodule@catcodes%
        \def\parsemodule@do@next{\begin{#1}}%
    \else%
        \def\parsemodule@do@next{#1}%
    \fi%
    \parsemodule@do@next%
}
\expandafter\expandafter\expandafter\def%
\expandafter\expandafter\expandafter\parsemodule@escapechar@checkendenv%
\expandafter\@open@brace\expandafter#\expandafter1\@close@brace{%
    \expandafter\ifx\csname parsemodule@allowedenv@#1\endcsname\parsemodule@escapechar@allowed%
        %\reset@parsemodule@catcodes%
        \def\parsemodule@do@next{\end{#1}}%
    \else%
      \def\parsemodule@do@next{#1}%
    \fi%
    \parsemodule@do@next%
}
\newrobustcmd\@requiremodules[1]{%
  \if@tempswa\requiremodules{#1}\fi%
}%
  \newrobustcmd\requiremodules[1]{%
    \mod@showfalse%
    \edef\mod@path{#1}%
    \edef\mod@path{\expandafter\detokenize\expandafter{\mod@path}}%
    \requiremodules@smsmode{#1}%
  }%
  \newbox\modules@import@tempbox
  \def\requiremodules@smsmode#1{%
    \setbox\modules@import@tempbox\vbox{%
      \@smsmodetrue%
      \set@parsemodule@catcodes%
      \hbadness=100000\relax%
      \hfuzz=10000pt\relax%
      \vbadness=100000\relax%
      \vfuzz=10000pt\relax%
      \stexinput{#1.tex}%
      \reset@parsemodule@catcodes%
      }%
      \parsemodule@maybesetcodes%
  }
\newif\if@symdeflocal\@symdeflocalfalse
\def\define@in@module#1#2{
  \expandafter\edef\csname #1\endcsname{#2}%
  \edef\define@in@module@temp{%
    \def\expandafter\noexpand\csname#1\endcsname%
    {#2}%
  }%
  \if@symdeflocal\else%
    \expandafter\g@addto@macro@safe\csname module@defs@\module@uri%
    \expandafter\endcsname\expandafter{\define@in@module@temp}%
  \fi%
}
\addmetakey{symdecl}{name}%

\newcommand\symdecl[2][]{%
  \ifcsdef{this@module}{%
    \metasetkeys{symdecl}{#1}%
    \ifcsvoid{symdecl@name}{\edef\symdecl@name{#2}}{}%
    \edef\symdef@uri{\module@uri\@QuestionMark\symdecl@name}%
    \ifcsvoid{\symdef@uri}{
      \ifcsvoid{module@names@\module@uri}{%
        \csxdef{module@names@\module@uri}{\symdecl@name}%
      }{%
        \csxdef{module@names@\module@uri}{\symdecl@name,%
          \csname module@names@\module@uri\endcsname}%
      }%
      \define@in@module\symdef@uri{\noexpand\@invoke@symbol{\symdef@uri}}%
      \define@in@module{#2}{\noexpand\@invoke@symbol{\symdef@uri}}%
    }{%
    % not compatible with circular dependencies, e.g. test/omdoc/07-modules/smstesta.tex
      \PackageWarning{stex}{symbol already defined: \symdef@uri}{%
        You need to pick a fresh name for your symbol%
      }%
      \define@in@module\symdef@uri{\noexpand\@invoke@symbol{\symdef@uri}}%
      \define@in@module{#2}{\noexpand\@invoke@symbol{\symdef@uri}}%
    }%
  }{%
    \PackageError{stex}{\detokenize{\symdecl} not in a module}{You need to be in a module%
    in order to declare a new symbol}
  }%
  \if@insymdef@\else\parsemodule@maybesetcodes\fi%
}
\def\modules@getURIfromName#1{%
  % TODO check whether #1 is a URI
  \def\notation@uri{}%
  \def\modules@getURI@name{#1}%
  \ifcsvoid{this@module}{}{%
    \expandafter\modules@getURIfromModule\expandafter{\module@uri}%
    \ifx\notation@uri\@empty%
      \edef\modules@getURI@modules{\csname module@imports@\module@uri\endcsname}%
      \expandafter\@for\expandafter\@I\expandafter:\expandafter=\modules@getURI@modules\do{%
        \ifx\notation@uri\@empty%
          \expandafter\modules@getURIfromModule\expandafter{\@I}%
        \fi%
      }%
    \fi%
    \ifx\notation@uri\@empty%
      \def\notation@extract@uri@currcs{}%
      \notation@extracturifrommacro{#1}%
    \fi%
    \ifx\notation@uri\@empty%
      \PackageError{modules}{No symbol with name, URI or macroname \detokenize{#1} found!}{}%
    \fi%
  }%
}

\def\modules@getURIfromModule#1{%
  \edef\modules@getURI@names{\csname module@names@#1\endcsname}%
  \expandafter\@for\expandafter\@I\expandafter:\expandafter=%
  \modules@getURI@names\do{%
    \ifx\notation@uri\@empty%
      \ifx\@I\modules@getURI@name%
        \edef\notation@uri{#1\@QuestionMark\@I}%
      \fi%
    \fi%
  }%
}

\def\notation@extracturifrommacro#1{%
  \ifcsvoid{#1}{}{%
    \expandafter\let\expandafter\notation@extract@uri@nextcs\csname#1\endcsname%
    \ifx\notation@extract@uri@nextcs\notation@extract@uri@currcs\else%
      \let\notation@extract@uri@currcs\notation@extract@uri@nextcs%
      \expandafter\notation@extract@uriII\notation@extract@uri@nextcs\notation@end%
    \fi%
  }%
}
\long\def\notation@extract@uriII#1#2\notation@end{%
  \def\notation@extract@check@temp{#2}
  \ifx\@invoke@symbol#1%
    \edef\notation@uri{#2}%
  \else%
    \ifx\notation@extract@check@temp\@empty\else%
      \expandafter\def\expandafter\notation@extract@uri@nextcs\expandafter{#1{#2}}%
      \notation@extract@uri{notation@extract@uri@nextcs}%
    \fi%
  \fi%
}
\providerobustcmd\notation[2][]{%
  \edef\notation@first{#1}%
  \edef\notation@second{#2}%
  \notation@%
}

\newcommand\notation@[2][0]{%
  \edef\notation@donext{\noexpand\notation@@[\notation@first]%
    {\notation@second}[#1]}%
  \notation@donext{#2}%
}

\def\notation@@[#1]#2[#3]#4{%
  \modules@getURIfromName{#2}%
  \notation@parse@params{#1}{#3}
  \let\notation@curr@todo@args\notation@curr@args%
  \def\notation@temp@notation{}%
  \StrLen\notation@curr@args[\notation@temp@arity]%
  \expandafter\renewcommand\expandafter\notation@temp@notation%
    \expandafter[\notation@temp@arity]{#4}%
  % precedence
  \IfSubStr\notation@curr@precs;{%
    \StrCut\notation@curr@precs;\notation@curr@prec\notation@curr@precs%
    \ifx\notation@curr@prec\@empty\def\notation@curr@prec{0}\fi%
  }{%
    \ifx\notation@curr@precs\@empty%
      \ifnum\notation@temp@arity=0\relax%
        \edef\notation@curr@prec{\infprec}%
      \else%
        \def\notation@curr@prec{0}%
      \fi%
    \else%
      \edef\notation@curr@prec{\notation@curr@precs}%
      \def\notation@curr@precs{}%
    \fi%
  }%
  % arguments
  \def\notation@curr@extargs{}
  \def\notation@nextarg@index{1}%
  \notation@do@args%
}

\def\notation@do@args{%
  \def\notation@nextarg@temp{}%
  \ifx\notation@curr@todo@args\@empty%
    \notation@after%
  \else%
    % argument precedence
    \IfSubStr\notation@curr@precs{x}{%
      \StrCut\notation@curr@precs{x}\notation@curr@argprec\notation@curr@precs%
    }{%
      \edef\notation@curr@argprec{\notation@curr@precs}%
      \def\notation@curr@precs{}%
    }%
    \ifx\notation@curr@argprec\@empty%
      \let\notation@curr@argprec\notation@curr@prec%
    \fi%
    \StrChar\notation@curr@todo@args1[\notation@argchar]%
    \StrGobbleLeft\notation@curr@todo@args1[\notation@curr@todo@args]%
    \expandafter\ifx\notation@argchar i%
      % normal argument
      \edef\notation@nextarg@temp{{\noexpand\notation@argprec{\notation@curr@argprec}{########\notation@nextarg@index}}}%
      \edef\notation@nextarg@index{\the\numexpr\notation@nextarg@index+1 }
      \expandafter\g@addto@macro@safe\expandafter\notation@curr@extargs%
        \expandafter{\notation@nextarg@temp}%
      \expandafter\expandafter\expandafter\notation@do@args%
    \else%
      % associative argument
      \expandafter\expandafter\expandafter\notation@parse@assocarg%
    \fi%
  \fi%
}

\def\notation@parse@assocarg#1{%
  \edef\notation@nextarg@temp{{\noexpand\notation@argprec{\notation@curr@argprec}{\noexpand\notation@assoc{\unexpanded{#1}}{########1}}}}%{{\noexpand\assoc[p=\notation@curr@argprec]{\unexpanded{#1}}{########1}}}%
  \edef\notation@nextarg@index{\the\numexpr\notation@nextarg@index+1 }%
  \expandafter\g@addto@macro@safe\expandafter\notation@curr@extargs%
  \expandafter{\notation@nextarg@temp}%
  \notation@do@args%
}

\protected\def\safe@newcommand#1{%
  \ifdefined#1\expandafter\renewcommand\else\expandafter\newcommand\fi#1%
}

\def\notation@after{
  \let\ex\expandafter%
  \ex\ex\ex\def\ex\ex\ex\notation@temp@notation\ex\ex\ex%
    {\ex\notation@temp@notation\notation@curr@extargs}%
  \edef\notation@temp@notation{\noexpand\notation@symprec{\notation@curr@prec}{\ex\unexpanded\ex{\notation@temp@notation}}}%
  \def\notation@temp@fragment{}%
  \ifx\notation@curr@arity\@empty\else%
    \edef\notation@temp@fragment{arity=\notation@curr@arity}
  \fi%
  \ifx\notation@curr@lang\@empty\else%
    \ifx\notation@temp@fragment\@empty%
      \edef\notation@temp@fragment{lang=\notation@curr@lang}%
    \else%
      \edef\notation@temp@fragment{\notation@temp@fragment\@Ampersand lang=\notation@curr@lang}%
    \fi%
  \fi%
  \ifx\notation@curr@variant\@empty\else%
    \ifx\notation@temp@fragment\@empty%
      \edef\notation@temp@fragment{variant=\notation@curr@variant}%
    \else%
      \edef\notation@temp@fragment{\notation@temp@fragment\@Ampersand variant=\notation@curr@variant}%
    \fi%
  \fi%
  \edef\notation@csname{\notation@uri\@Fragment\notation@temp@fragment}%
  \ifcsvoid{\notation@csname}{%
    \ex\ex\ex\ex\ex\ex\ex\newcommand\ex\ex\ex\csname\ex\ex\ex\notation@csname%
      \ex\ex\ex\endcsname\ex\ex\ex[\ex\notation@temp@arity\ex]%
      \ex{\notation@temp@notation}%
    \edef\symdecl@temps{%
      \noexpand\safe@newcommand\ex\noexpand\csname\notation@csname\endcsname[\notation@temp@arity]%
    }%
    \ex\g@addto@macro@safe\csname module@defs@\module@uri\ex\endcsname\ex{\symdecl@temps}%
    \ex\g@addto@macro@safe\csname module@defs@\module@uri\ex\endcsname\ex{\ex{\notation@temp@notation}}%
  }{%
    \PackageWarning{modules}{notation already defined: \notation@csname}{%
      Choose a different set of notation options (variant,lang,arity)%
    }%
  }%
  \parsemodule@maybesetcodes%
}

\def\notation@parse@params#1#2{%
  \def\notation@curr@precs{}%
  \def\notation@curr@args{}%
  \def\notation@curr@variant{}%
  \def\notation@curr@arity{}%
  \def\notation@curr@provided@arity{#2}
  \def\notation@curr@lang{}%
  \def\notation@options@temp{#1}
  \notation@parse@params@%
  \ifx\notation@curr@args\@empty%
    \ifx\notation@curr@provided@arity\@empty%
      \notation@num@to@ia\notation@curr@arity%
    \else%
      \notation@num@to@ia\notation@curr@provided@arity%
    \fi%
  \fi%
}
\def\notation@parse@params@{%
  \IfSubStr\notation@options@temp,{%
    \StrCut\notation@options@temp,\notation@option@temp\notation@options@temp%
    \notation@parse@param%
    \notation@parse@params@%
  }{\ifx\notation@options@temp\@empty\else%
    \let\notation@option@temp\notation@options@temp%
    \notation@parse@param%
  \fi}%
}

\def\notation@parse@param{%
  \trimstring\notation@option@temp%
  \ifx\notation@option@temp\@empty\else%
    \IfSubStr\notation@option@temp={%
      \StrCut\notation@option@temp=\notation@key\notation@value%
      \trimstring\notation@key%
      \trimstring\notation@value%
      \IfStrEq\notation@key{prec}{%
        \edef\notation@curr@precs{\notation@value}%
      }{%
      \IfStrEq\notation@key{args}{%
        \edef\notation@curr@args{\notation@value}%
      }{%
      \IfStrEq\notation@key{lang}{%
        \edef\notation@curr@lang{\notation@value}%
      }{%
      \IfStrEq\notation@key{variant}{%
        \edef\notation@curr@variant{\notation@value}%
      }{%
      \IfStrEq\notation@key{arity}{%
        \edef\notation@curr@arity{\notation@value}%
      }{%
      }}}}}%
    }{%
        \edef\notation@curr@variant{\notation@option@temp}%
    }%
  \fi%
}

\def\notation@num@to@ia#1{%
  \IfInteger{#1}{
    \notation@num@to@ia@#1%
  }{%
    %
  }%
}
\def\notation@num@to@ia@#1{%
  \ifnum#1>0%
    \edef\notation@curr@args{\notation@curr@args i}%
    \expandafter\notation@num@to@ia@\expandafter{\the\numexpr#1-1\@Space}%
  \fi%
}
\def\notation@assoc#1#2{% function, argv
  \let\@tmpop=\relax% do not print the function the first time round
  \@for\@I:=#2\do{\@tmpop% print the function
    % write the i-th argument with locally updated precedence
    \@I%
    \def\@tmpop{#1}%
  }%
}%

\def\notation@lparen{(}
\def\notation@rparen{)}
\def\infprec{1000000}
\def\neginfprec{-\infprec}

\newcount\notation@downprec
\notation@downprec=\neginfprec

\newif\if@displaymode\@displaymodefalse
\expandafter\everydisplay\expandafter{\the\everydisplay\@displaymodetrue}
\let\old@displaystyle\displaystyle
\def\displaystyle{\old@displaystyle\@displaymodetrue}

\def\dobrackets#1{% avoiding groups at all costs to ensure \parray still works!
  \def\notation@innertmp{#1}%
  \let\ex\expandafter%
  \if@displaymode%
    \ex\ex\ex\left\ex\ex\ex\notation@lparen%
    \ex\notation@resetbrackets\ex\notation@innertmp%
    \ex\right\notation@rparen%
  \else%
    \ex\ex\ex\notation@lparen%
    \ex\notation@resetbrackets\ex\notation@innertmp%
    \notation@rparen%
  \fi%
}

\def\withbrackets#1#2#3{%
  \edef\notation@lparen{#1}%
  \edef\notation@rparen{#2}%
  #3%
  \notation@resetbrackets%
}

\def\notation@resetbrackets{%
  \def\notation@lparen{(}%
  \def\notation@rparen{)}%
}

\def\notation@symprec#1#2{%
  \ifnum#1>\notation@downprec\relax%
    \notation@resetbrackets#2%
  \else%
    \ifnum\notation@downprec=\infprec\relax%
      \notation@resetbrackets#2%
    \else
      \if@inparray@
        \notation@resetbrackets#2
      \else\dobrackets{#2}\fi%
  \fi\fi%
}

\newif\if@inparray@\@inparray@false

\def\notation@argprec#1#2{%
  \def\notation@innertmp{#2}
  \edef\notation@downprec@temp{\number#1}%
  \notation@downprec=\expandafter\notation@downprec@temp%
  \expandafter\relax\expandafter\notation@innertmp%
  \expandafter\notation@downprec\expandafter=\number\notation@downprec\relax%
}
\protected\def\@invoke@symbol#1{%
  \def\@invoke@symbol@first{#1}%
  \symbol@args%
}
\newcommand\symbol@args[1][]{%
  \ifmmode\def\invoke@symbol@next{\@invoke@symbol@math\@invoke@symbol@first{#1}}%
  \else\def\invoke@symbol@next{\@invoke@symbol@text\@invoke@symbol@first{#1}}\fi%
  \invoke@symbol@next%
}
\def\@invoke@symbol@math#1#2{%
  % #1: URI
  % #2: options
  % TODO \setnotation variants
  \notation@parse@params{#2}{}%
  \def\notation@temp@fragment{}%
  \ifx\notation@curr@arity\@empty\else%
    \edef\notation@temp@fragment{arity=\notation@curr@arity}%
  \fi%
  \ifx\notation@curr@lang\@empty\else%
    \ifx\notation@temp@fragment\@empty%
      \edef\notation@temp@fragment{lang=\notation@curr@lang}%
    \else%
      \edef\notation@temp@fragment{\notation@temp@fragment\@Ampersand lang=\notation@curr@lang}%
    \fi%
  \fi%
  \ifx\notation@curr@variant\@empty\else%
    \ifx\notation@temp@fragment\@empty%
      \edef\notation@temp@fragment{variant=\notation@curr@variant}%
    \else%
      \edef\notation@temp@fragment{\notation@temp@fragment\@Ampersand variant=\notation@curr@variant}%
    \fi%
  \fi%
  \csname #1\@Fragment\notation@temp@fragment\endcsname%
}
\def\@invoke@symbol@text#1#2{%
    % TODO
}
\def\setstexlang#1{%
  \def\stex@lang{#1}%
}%
\setstexlang{en}
\def\setstexvariant#1#2{%
  % TODO
}
\def\setstexvariants#1{%
  \def\stex@variants{#1}%
}
\newcommand\@sref@def[3]{\csgdef{sref@#1@#2}{#3}}
\ifextrefs%
  \newwrite\refs@file%
\else%
  \def\refs@file{\@auxout}%
\fi%
\newcommand\sref@def[3]{%
  \protected@write\refs@file{}{\string\@sref@def{#1}{#2}{#3}}%
}%
\newcommand\sref@label[2]{%
  \sref@def{\ifcsundef{sref@part}{}{\sref@part @}#2}{page}{\thepage}%
  \sref@def{\ifcsundef{sref@part}{}{\sref@part @}#2}{label}{#1}%
}%
\newcommand\sreflabel[2]{\sref@label{#1 \@currentlabel}{#2}}
\def\sref@id{} % make sure that defined
\newcommand\sref@label@id[1]{%
  \ifx\sref@id\@empty%
    \relax%
  \else%
    \sref@label{#1}{\sref@id}%
  \fi%
}%
\addmetakey*{module}{id} % TODO: deprecate properly
\addmetakey*{module}{load}
\addmetakey*{module}{path}
\addmetakey*{module}{dir}
\addmetakey*{module}{align}[WithTheModuleOfTheSameName]
\addmetakey*{module}{noalign}[true]

\newif\if@insymdef@\@insymdef@false
\define@key{symdef}{local}[true]{\@symdeflocaltrue}%
\define@key{symdef}{noverb}[all]{}%
\define@key{symdef}{align}[WithTheSymbolOfTheSameName]{}%
\define@key{symdef}{specializes}{}%
\addmetakey*{symdef}{noalign}[true]
\define@key{symdef}{primary}[true]{}%
\define@key{symdef}{assocarg}{}%
\define@key{symdef}{bvars}{}%
\define@key{symdef}{bargs}{}%
\addmetakey{symdef}{lang}%
\addmetakey{symdef}{prec}%
\addmetakey{symdef}{arity}%
\addmetakey{symdef}{variant}%
\addmetakey{symdef}{ns}%
\addmetakey{symdef}{args}%
\addmetakey{symdef}{name}%
\addmetakey*{symdef}{title}%
\addmetakey*{symdef}{description}%
\addmetakey{symdef}{subject}%
\addmetakey*{symdef}{display}%
\def\symdef{\@ifnextchar[{\@symdef}{\@symdef[]}}%
\def\@symdef[#1]#2{\@ifnextchar[{\@@symdef[#1]{#2}}{\@@symdef[#1]{#2}[0]}}%
\def\@@symdef[#1]#2[#3]{%
  \@insymdef@true%
  \metasetkeys{symdef}{#1}%
  \edef\symdef@tmp@optpars{\ifcsvoid{symdef@name}{[]}{[name=\symdef@name]}}%
  \expandafter\symdecl\symdef@tmp@optpars{#2}%
  \@insymdef@false%
  \notation[#1]{#2}[#3]%
}% mod@show
\def\symdef@type{Symbol}%
\providecommand{\stDMemph}[1]{\textbf{#1}}
\def\symvariant#1{%
  \@ifnextchar[{\@symvariant{#1}}{\@symvariant{#1}[0]}%
  }%
\def\@symvariant#1[#2]#3#4{%
  \notation[#3]{#1}[#2]{#4}%
\ignorespacesandpars}%
\endinput
%%
%% End of file `stex-master.sty'.

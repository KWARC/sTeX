# -*- CPERL -*-
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
DeclareOption('langfiles',sub {AssignValue('smultiling_langfiles',1,'global');});
DeclareOption(undef,sub {PassOptions('babel','sty',ToString(Digest(T_CS('\CurrentOption')))); });
ProcessOptions();
RequirePackage('babel');
RequirePackage('modules');
RawTeX('
\newcommand\smg@select@lang{}
\newcommand\smg@select@language[1]{\def\smg@lang{#1}\smg@select@lang}
\newcommand\smg@register@language[2]%
{\@ifundefined{smul@#1@loaded}{}{\appto\smg@select@lang%
{\expandafter\ifstrequal\expandafter\smg@lang{#1}{\selectlanguage{#2}}{}}}}
\smg@register@language{af}{afrikaans}
\smg@register@language{de}{ngerman}
\smg@register@language{fr}{french}%
\smg@register@language{he}{hebrew}
\smg@register@language{hu}{hungarian}
\smg@register@language{id}{indonesian}
\smg@register@language{ms}{malay}
\smg@register@language{nn}{nynorsk}
\smg@register@language{pt}{portuguese}
\smg@register@language{ru}{russian}
\smg@register@language{uk}{ukrainian}
\smg@register@language{en}{english}
\smg@register@language{es}{spanish}
\smg@register@language{sq}{albanian}
\smg@register@language{bg}{bulgarian}
\smg@register@language{ca}{catalan}
\smg@register@language{hr}{croatian}
\smg@register@language{cs}{czech}
\smg@register@language{da}{danish}
\smg@register@language{nl}{dutch}
\smg@register@language{eo}{esperanto}
\smg@register@language{et}{estonian}
\smg@register@language{fi}{finnish}
\smg@register@language{ka}{georgian}
\smg@register@language{el}{greek}
\smg@register@language{is}{icelandic}
\smg@register@language{it}{italian}
\smg@register@language{la}{latin}
\smg@register@language{no}{norsk}
\smg@register@language{pl}{polish}
\smg@register@language{sr}{serbian}
\smg@register@language{sk}{slovak}
\smg@register@language{sl}{slovenian}
\smg@register@language{sv}{swedish}
\smg@register@language{th}{thai}
\smg@register@language{tr}{turkish}
\smg@register@language{vi}{vietnamese}
\smg@register@language{cy}{welsh}
\smg@register@language{hi}{hindi}
\newenvironment{modsig}[2][]{%
\def\@test{#1}\ifx\@test\@empty\begin{module}[id=#2]\else\begin{module}[id=#2,#1]\fi}
{\end{module}}
\newenvironment{viewsig}[4][]{\def\@test{#1}\ifx\@test\@empty%
\begin{view}[id=#2,ext=tex]{#3}{#4}\else\begin{view}[id=#2,#1,ext=tex]{#3}{#4}\fi}
{\end{view}}
\newenvironment{mhviewsig}[4][]{\def\@test{#1}\ifx\@test\@empty%
\begin{mhview}[id=#2,ext=tex]{#3}{#4}\else\begin{mhview}[id=#2,#1,ext=tex]{#3}{#4}\fi}
{\end{mhview}}
');
DefConstructor('\symi OptionalMatch:* {}',
     "<omdoc:symbol ?#1(role='primary')(role='secondary') name='#2'/>");
DefConstructor('\symii OptionalMatch:* {} {}',
     "<omdoc:symbol ?#1(role='primary')(role='secondary') name='#2-#3'/>");
DefConstructor('\symiii OptionalMatch:* {} {} {}',
     "<omdoc:symbol ?#1(role='primary')(role='secondary') name='#2-#3-#4'/>");
DefKeyVal('modnl','title','Semiverbatim');
DefKeyVal('modnl','load','Semiverbatim');
DefKeyVal('modnl','creators','Semiverbatim');
DefKeyVal('modnl','contributors','Semiverbatim');
DefKeyVal('modnl','primary','Semiverbatim');
DefEnvironment('{modnl} OptionalKeyVals:modnl {}{}',
         "<omdoc:theory "
         . 'xml:id="#2.#3">'
         .   "?&defined(&GetKeyVal(#1,'creators'))(<dc:creator>&GetKeyVal(#1,'creators')</dc:creator>)()"
         .   "?&defined(&GetKeyVal(#1,'title'))(<dc:title>&GetKeyVal(#1,'title')</dc:title>)()"
         .   "?&defined(&GetKeyVal(#1,'contributors'))(<dc:contributor>&GetKeyVal(#1,'contributors')</dc:contributor>)()"
         .   "#body"
         . "</omdoc:theory>",
  afterDigestBegin=>sub {
    my ($stomach, $whatsit) = @_;
    my $keyval = $whatsit->getArg(1);
    my $signature = ToString($whatsit->getArg(2));
    if ($keyval) {
      # If we're not given load, AND the langfiles option is in effect,
      # default to #2
      if ((! $keyval->getValue('load')) && (LookupValue('smultiling_langfiles'))) {
        $keyval->setValue('load',$signature); }
      # Always load a TeX file
      $keyval->setValue('ext','tex'); }
    importmoduleI($stomach,$whatsit)});
DefKeyVal('mhmodnl','title','Semiverbatim');
DefKeyVal('mhmodnl','repos','Semiverbatim');
DefKeyVal('mhmodnl','path','Semiverbatim');
DefKeyVal('mhmodnl','creators','Semiverbatim');
DefKeyVal('mhmodnl','contributors','Semiverbatim');
DefKeyVal('mhmodnl','primary','Semiverbatim');
DefEnvironment('{mhmodnl} OptionalKeyVals:mhmodnl {}{}',
         "<omdoc:theory "
         . 'xml:id="#2.#3">'
         .   "?&defined(&GetKeyVal(#1,'creators'))(<dc:creator>&GetKeyVal(#1,'creators')</dc:creator>)()"
         .   "?&defined(&GetKeyVal(#1,'title'))(<dc:title>&GetKeyVal(#1,'title')</dc:title>)()"
         .   "?&defined(&GetKeyVal(#1,'contributors'))(<dc:contributor>&GetKeyVal(#1,'contributors')</dc:contributor>)()"
         .   "#body"
         . "</omdoc:theory>",
  afterDigestBegin=>sub {
    my ($stomach, $whatsit) = @_;
    my $keyval = $whatsit->getArg(1);
    my $signature = ToString($whatsit->getArg(2));
    my $repos = ToString(GetKeyVal($keyval,'torepos'));
    my $current_repos = LookupValue('current_repos');
    if (!$repos) { $repos = $current_repos; }
    my $defpaths = LookupValue('defpath');
    my $load_path = ($$defpaths{MathHub}).$repos.'/source/'.$signature;

    if ($keyval) {
      # If we're not given load, AND the langfiles option is in effect,
      # default to #2
      if ((! $keyval->getValue('path')) && (LookupValue('smultiling_langfiles'))) {
        $keyval->setValue('load',$load_path); }
      # Always load a TeX file
      $keyval->setValue('ext','tex'); }
    importmoduleI($stomach,$whatsit)});
RawTeX('
\newenvironment{viewnl}[5][]{\def\@test{#1}\ifx\@test\@empty%
\begin{viewsketch}[id=#2.#3,ext=tex]{#4}{#5}\else%
\begin{viewsketch}[id=#2.#3,#1,ext=tex]{#4}{#5}\fi%
\smg@select@language{#3}}
{\end{viewsketch}}
\newenvironment{mhviewnl}[5][]{\def\@test{#1}\ifx\@test\@empty%
\begin{mhviewsketch}[id=#2.#3,ext=tex]{#4}{#5}\else%
\begin{mhviewsketch}[id=#2.#3,#1,ext=tex]{#4}{#5}\fi%
\smg@select@language{#3}}
{\end{mhviewsketch}}
');
1;

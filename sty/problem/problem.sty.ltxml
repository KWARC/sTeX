# -*- CPERL -*-
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
RawTeX('
\newif\ifexnotes\exnotesfalse
\newif\ifhints\hintsfalse
\newif\ifsolutions\solutionsfalse
\newif\ifpts\ptsfalse
\newif\ifmin\minfalse
\newif\ifboxed\boxedfalse
');
DeclareOption('notes', '');
DeclareOption('hints', '');
DeclareOption('solutions', '');
DeclareOption('pts', '');
DeclareOption('min', '');
DeclareOption('boxed', '');
DeclareOption(undef,sub {PassOptions('sref','sty',ToString(Digest(T_CS('\CurrentOption')))); });
ProcessOptions();
RequirePackage('sref');
RegisterNamespace('prob'=>"http://omdoc.org/ontology/problems#");
RegisterDocumentNamespace('prob'=>"http://omdoc.org/ontology/problems#");
DefEnvironment('{problem} OptionalKeyVals:problem',
 "<omdoc:exercise ?&GetKeyVal(#1,'id')(xml:id='&GetKeyVal(#1,'id')')()>"
.    "?&GetKeyVal(#1,'title')(<dc:title>&GetKeyVal(#1,'title')</dc:title>)()"
 .    "?&GetKeyVal(#1,'min')("
   .       "<omdoc:meta property='prob:solvedinminutes' prob:dummy='for the namespace'>"
 .          "&GetKeyVal(#1,'min')"
   .       "</omdoc:meta>)()"
 .    "?&GetKeyVal(#1,'pts')("
   .       "<omdoc:meta property='prob:points' prob:dummy='for the namespace'>"
 .         "&GetKeyVal(#1,'pts')"
   .       "</omdoc:meta>)()"
   .   "#body"
   ."</omdoc:exercise>",
   afterDigest => sub {
     my ($stomach,$kv)=@_;
     my $kvi = LookupValue('inclprob');
     my @keys = qw(id title min pts);
     my @vals = $kvi && map($kvi->getValue($_), @keys);
     foreach my $i(0..$#vals) {
       $kv->setValue($keys[$i],$vals[$i]) if $vals[$i];
     }
     return;});#$
DefConstructor('\startsolutions','');
DefConstructor('\stopsolutions','');
DefKeyVal('soln','id','Semiverbatim');
DefKeyVal('soln','height','Semiverbatim');
DefKeyVal('soln','for','Semiverbatim');
DefKeyVal('soln','creators','Semiverbatim');
DefKeyVal('soln','contributors','Semiverbatim');
DefEnvironment('{solution} OptionalKeyVals:soln',
       "<omdoc:solution ?&GetKeyVals(#1,'for')(for='&GetKeyVal(#1,'for')')()>"
     .   "#body"
     . "</omdoc:solution>");
DefEnvironment('{exnote}',"<omdoc:hint>#body</omdoc:hint>");
DefEnvironment('{hint}',"<omdoc:hint>#body</omdoc:hint>");
DefConstructor('\pts{}',"");
DefConstructor('\min{}',"");
DefKeyVal('prob','pts','Semiverbatim');
DefKeyVal('prob','min','Semiverbatim');
DefKeyVal('prob','title','Semiverbatim');
DefKeyVal('prob','refnum','Semiverbatim');
DefConstructor('\includeproblem OptionalKeyVals:prob Semiverbatim',
   "<omdoc:exercise tref='#2'>"
.  "?&GetKeyVal(#1,'title')(<dc:title>&GetKeyVal(#1,'title')</dc:title>)()"
.  "?&GetKeyVal(#1,'min')("
 .     "<omdoc:meta property='prob:solvedinminutes' prob:dummy='for the namespace'>"
.       "&GetKeyVal(#1,'min')"
 .     "</omdoc:meta>)()"
.  "?&GetKeyVal(#1,'pts')("
 .     "<omdoc:meta property='prob:points' prob:dummy='for the namespace'>"
.       "&GetKeyVal(#1,'pts')"
 .     "</omdoc:meta>)()"
 ."</omdoc:exercise>",
 afterDigest => sub{
   my ($stomach,$kv) = @_;
   AssignValue('inclprob',$kv) if $kv;
 });
Tag('omdoc:exercise',afterOpen=>\&numberIt);
Tag('omdoc:solution',afterOpen=>\&numberIt);
Tag('omdoc:hint',afterOpen=>\&numberIt);
sub includemhproblem {
  my ($gullet,$keyval,$arg2) = @_;
  my $repo_path;
  if ($keyval) {
    $repo_path = ToString(GetKeyVal($keyval,'mhrepos')); }
  if (! $repo_path) {
    $repo_path = ToString(Digest(T_CS('\mh@currentrepos'))); }
  else {
    $keyval->setValue('mhrepos',undef); }
  my $mathhub_base = ToString(Digest('\MathHub{}'));
  my $finalpath = $mathhub_base.$repo_path.'/source/'.ToString($arg2);
  return Invocation(T_CS('\includeproblem'), $keyval, T_OTHER($finalpath)); }#$
DefKeyVal('inclprob','mhrepos','Semiverbatim');
DefMacro('\includemhproblem OptionalKeyVals:inclprob {}', \&includemhproblem);
Tag('omdoc:exercise',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:solution',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:hint',afterOpen=>\&numberIt,afterClose=>\&locateIt);
1;

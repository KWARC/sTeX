% \iffalse meta-comment
% A path canonicalizer
%
% The original of this file is in the public repository at 
% http://github.com/sLaTeX/sTeX/
% \fi
%  
% \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{pathsuris}[2020/09/30 v2.1 Paths and URIs for sTeX]
%
%<*driver>
\documentclass{ltxdoc}
\usepackage[utf8]{inputenc}
\usepackage{pathsuris,stex-logo}
\usepackage{url,array,float,textcomp}
\usepackage[show]{ed}
\usepackage[hyperref=auto,style=alphabetic]{biblatex}
\addbibresource{kwarcpubs.bib}
\addbibresource{extpubs.bib}
\addbibresource{kwarccrossrefs.bib}
\addbibresource{extcrossrefs.bib}
\def\scsys#1{{{\sc #1}}\index{#1@{\sc #1}}\xspace}
\def\latexml{\scsys{LaTeXML}}
\begin{document}
\RecordChanges
\DocInput{pathsuris.dtx}
\end{document} 
%</driver>
% \fi
%
% \iffalse\CheckSum{113}\fi
%
% \changes{v1.0}{2015/11/16}{First Version with Documentation}
% \changes{v1.1}{2016/02/18}{adding \texttt{\textbackslash baseURI} from
% \texttt{omdoc.sty} and \texttt{\textbackslash defpath} from \texttt{modules.sty}}
% 
% \GetFileInfo{pathsuris.sty}
% 

% \MakeShortVerb{\|}
%
% \title{\texttt{pathsuris.sty}: Paths and URIs for \sTeX \thanks{Version {\fileversion} (last revised
%        {\filedate})}}
% \author{Jinbo Zhang, Michael Kohlhase, Dennis M\"uller\\
%         FAU Erlangen-N\"urnberg}
% \maketitle
% 
% \begin{abstract}
%   This package provides macros to deal with paths and base URIs for \sTeX. In
%   particular, it offers a path canonicalizer, which is used in package |modules|, in
%   order to support modules specified with relative path.
% \end{abstract} 
% 
% \tableofcontents
% \newpage
% 
% \section{User Interface}\label{sec:user}
%
% \subsection{Base URIs}\label{sec:user:baseURI}
%
% \DescribeMacro{\baseURI}|\baseURI|\ednote{document it}
%
% \subsection{Using Absolute Paths}\label{sec:user:abspath}
%
% Finally, the separation of documents into multiple modules often profits from a symbolic
% management of file paths. To simplify this, the |modules| package supplies the
% \DescribeMacro{\defpath}|\defpath| macro:
% |\defpath[|\meta{baseURI}|]{|\meta{cname}|}{|\meta{path}|}| defines a command, so that
% |\|\meta{csname}|{|\meta{name}|}| expands to \meta{path}|/|\meta{name}. So we could have
% used
% \begin{verbatim}
% \defpath{OPaths}{../other}
% \importmodule[load=\OPahts{bar}]{bar}
% \end{verbatim}
% instead of the second line in Example~\ref{exf:importmodule}. The variant |\OPaths| has
% the big advantage that we can get around the fact that {\TeX/\LaTeX} does not set the
% current directory in |\input|, so that we can use systematically deployed
% |\defpath|-defined path macros to make modules relocatable by defining the path macros
% locally. The optional parameter \meta{baseURI} is for the {\latexml} transformation,
% which (if \meta{baseURI} is specified) resolves \meta{path} to an absolute URI according
% to \cite[section 5.2]{BerFieMas:05}.
% 
% \subsection{Path Canonicalization}\label{sec:user:cpath}
%
% By calling |\@cpath{|\meta{path}|}|, the canonicalized path will be stored in |\@CanPath|.\\
% To print a canonicalized path, simply use
% \DescribeMacro{\cpath}|\cpath{|\meta{path}|}|. Here is a set of examples with their
% canonizalized paths for testing.
% \begin{center}
% \begin{tabular}{|l|l|l|}\hline
%   path & canonicalized path & expected\\\hline
%   aaa & \cpath{aaa} & aaa \\
%   ../../aaa & \cpath{../../aaa} &  ../../aaa\\
%   aaa/bbb & \cpath{aaa/bbb} & aaa/bbb \\
%   aaa/.. & \cpath{aaa/..} &\\
%   ../../aaa/bbb & \cpath{../../aaa/bbb} & ../../aaa/bbb\\
%   ../aaa/../bbb & \cpath{../aaa/../bbb} & ../bbb \\
%   ../aaa/bbb & \cpath{../aaa/bbb} &  ../aaa/bbb\\
%   aaa/bbb/../ddd & \cpath{aaa/bbb/../ddd} & aaa/ddd\\
%   aaa/bbb/../.. & \cpath{aaa/bbb/../..} & \\\hline
% \end{tabular}
% \end{center}
%
%\subsection{URI splitting}\label{sec:user:uri}
%
% By calling |\seturi[\meta{macroname}]{|\meta{path}|}|, the 
% URI will be plit into |\macronamescheme|, |\macronameauthority|,
% |\macronamepath|, |\macronamequery| and |\macronamefragment|, as in the
% following example. If the optional
% |macroname| is not provided, the default name is |pathsuris@curruri@|.
%
% \begin{center}
% |\seturi[myuri]{http://this.isatest/foo/bar/?query#fragment}|
% \seturi[myuri]{http://this.isatest/foo/bar/?query#fragment}
%
% yields:
% \begin{tabular}{|l|l|}\hline
%   macro & value \\\hline
%   |\myurischeme| & \myurischeme \\
%   |\myuriauthority| & \myuriauthority \\
%   |\myuripath| & \myuripath \\
%   |\myuriquery| & \myuriquery \\
%   |\myurifragment| & \myurifragment \\\hline
% \end{tabular}
% \end{center}
% 
% \StopEventually{\newpage\PrintIndex\newpage\PrintChanges\newpage\printbibliography}\newpage
%
% \section{The Implementation}\label{sec:impl}
% 
%    \begin{macrocode}
%<*package>
\RequirePackage{stex-base}
\RequirePackage{xstring}
\RequirePackage{etoolbox}
%    \end{macrocode}
%
% \subsection{Base URIs}\label{sec:impl:baseURI}
%
% \begin{macro}{\baseURI}
%   On the {\LaTeX} side we do nothing (for the moment).
%    \begin{macrocode}
\newcommand\baseURI[2][]{}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Using Absolute Paths}\label{sec:impl:abspath}
%
% \begin{macro}{\defpath}
%  |\defpath[optional argument]{macro name}{base path}| defines a new macro which can take another path to formal one integrated path. For example, |\MathHub| in every |localpaths.tex| is defined as:
% \begin{center}
% |\defpath{MathHub}{/path/to/localmh/MathHub}|
% \end{center}
% then we can use |\MathHub| to form other paths, for example, 
% \begin{center}
% |\MathHub{source/smglom/sets}|
% \end{center}
%  will generate |/path/to/localmh/MathHub/source/smglom/sets|.
%    \begin{macrocode}
\newrobustcmd\defpath[3][]{%
  \expandafter\newcommand\csname #2\endcsname[1]{#3/##1}%
}%
%    \end{macrocode}
% \end{macro}
%
% \subsection{Path Canonicalization}\label{sec:impl:cpath}
% 
% We define two macros for changing the category codes of common
% characters in URIs, in particular \#.
%    \begin{macrocode}
\def\pathsuris@setcatcodes{%
    \edef\pathsuris@oldcatcode@hash{\the\catcode`\#}%
    \catcode`\#=12\relax%
    \edef\pathsuris@oldcatcode@slash{\the\catcode`\/}%
    \catcode`\/=12\relax%
    \edef\pathsuris@oldcatcode@colon{\the\catcode`\:}%
    \catcode`\:=12\relax%
    \edef\pathsuris@oldcatcode@qm{\the\catcode`\?}%
    \catcode`\?=12\relax%
}
\def\pathsuris@resetcatcodes{%
    \catcode`\#\pathsuris@oldcatcode@hash\relax%
    \catcode`\/\pathsuris@oldcatcode@slash\relax%
    \catcode`\:\pathsuris@oldcatcode@colon\relax%
    \catcode`\?\pathsuris@oldcatcode@qm\relax%
}
%    \end{macrocode}
%
% We define some macros for later comparison.
%    \begin{macrocode}
\def\@ToTop{..}
\def\@Slash{/}
\def\@Colon{:}
\def\@QuestionMark{?}
\def\@ToHere{.}

\pathsuris@setcatcodes
\def\@Fragment{#}
\pathsuris@resetcatcodes
%    \end{macrocode}
% Implement |\@cpath|.
%
% \begin{macro}{\@cpath}
%    \begin{macrocode}
\def\@cpath#1{%
    \edef\pathsuris@temp{#1}%
    \def\@CanPath{}%
    \@cpath@loop
}

\def\@cpath@loop{%
    \IfSubStr\pathsuris@temp\@Slash{%
        \StrCut\pathsuris@temp\@Slash\pathsuris@temp@a\pathsuris@temp%
        \ifx\pathsuris@temp@a\@ToTop%
            \ifx\@CanPath\@empty%
                \edef\@CanPath{\@ToTop}%
            \else%
                \edef\@CanPath{\@CanPath\@Slash\@ToTop}%
            \fi%
            \@cpath@loop%
        \else%
        \IfBeginWith\pathsuris@temp\@ToTop{%
            \StrBehind{\pathsuris@temp}{\@ToTop}[\pathsuris@temp]%
            \IfBeginWith\pathsuris@temp\@Slash{%
                \edef\pathsuris@temp{\@CanPath\pathsuris@temp}%
            }{%
                \ifx\@CanPath\@empty\else%
                    \edef\pathsuris@temp{\@CanPath\@Slash\pathsuris@temp}
                \fi%
            }%
            \def\@CanPath{}%
            \@cpath@loop%
        }{%
            \ifx\@CanPath\@empty%
                \edef\@CanPath{\pathsuris@temp@a}%
            \else%
                \edef\@CanPath{\@CanPath\@Slash\pathsuris@temp@a}%
            \fi%
            \@cpath@loop
        }%
        \fi%
    }{
        \ifx\@CanPath\@empty%
            \edef\@CanPath{\pathsuris@temp}%
        \else%
            \edef\@CanPath{\@CanPath\@Slash\pathsuris@temp}%
        \fi%
    }%
}
%    \end{macrocode}
% \end{macro}
%
% Implement |\cpath| to print the canonicalized path.
%
% \begin{macro}{\cpath}
%    \begin{macrocode}
\newcommand\cpath[1]{%
    \@cpath{#1}%
    \@CanPath%
}
%    \end{macrocode}
% \end{macro}
% \subsection{URI splitting}\label{sec:impl:uri}
%
% \begin{macro}{\seturi@}
%    \begin{macrocode}
\newif\if@pathsuris@done@

\def\seturi@[#1]#2{%
    \@pathsuris@done@false%
    \def\pathsuris@prefix@temp{#1}
    \edef\pathsuris@curruri{#2}%
    \edef\pathsuris@temp{\pathsuris@curruri}%
    \def\pathsuris@curruri@scheme{}%
    \def\pathsuris@curruri@authority{}%
    \def\pathsuris@curruri@path{}%
    \def\pathsuris@curruri@query{}%
    \def\pathsuris@curruri@fragment{}%
    % scheme
    \IfSubStr{\pathsuris@temp}{\@Colon}{%
        % TODO check for valid scheme
        \StrBefore{\pathsuris@temp}{\@Colon}[\pathsuris@curruri@scheme]%
        \StrBehind{\pathsuris@temp}{\@Colon}[\pathsuris@temp]%
    }{}%
    % authority
    \IfBeginWith{\pathsuris@temp}{\@Slash\@Slash}{%
        \StrBehind{\pathsuris@temp}{\@Slash\@Slash}[\pathsuris@temp]%
        \IfSubStr{\pathsuris@temp}{\@Slash}{%
            \StrBefore{\pathsuris@temp}{\@Slash}[\pathsuris@curruri@authority]%
            \StrBehind{\pathsuris@temp}{\@Slash}[\pathsuris@temp]%
            % TODO userinfo,host,port
        }{%
            % TODO query,fragment
            \edef\pathsuris@curruri@authority{\pathsuris@temp}%
            \@pathsuris@done@true%
        }%
    }{}%
    % path, query, fragment
    \if@pathsuris@done@\else%
        \IfSubStr{\pathsuris@temp}{\@QuestionMark}{%
            % path
            \StrBefore{\pathsuris@temp}{\@QuestionMark}[\pathsuris@curruri@path]%
            \StrBehind{\pathsuris@temp}{\@QuestionMark}[\pathsuris@temp]%
            % query,fragment
            \IfSubStr{\pathsuris@temp}{\@Fragment}{%
                \StrBefore{\pathsuris@temp}{\@Fragment}[\pathsuris@curruri@query]%
                \StrBehind{\pathsuris@temp}{\@Fragment}[\pathsuris@curruri@fragment]%
            }{%
                \edef\pathsuris@curruri@query{\pathsuris@temp}%
            }%
        }{%
            % path,fragment
            \IfSubStr{\pathsuris@temp}{\@Fragment}{%
                \StrBefore{\pathsuris@temp}{\@Fragment}[\pathsuris@curruri@path]%
                \StrBehind{\pathsuris@temp}{\@Fragment}[\pathsuris@curruri@fragment]%
            }{%
                \edef\pathsuris@curruri@path{\pathsuris@temp}%
            }%
        }%
    \fi%
    %drop trailing slash of path
    %\IfEndWith{\pathsuris@curruri@path}{\@Slash}{%
    %    \StrGobbleRight{\pathsuris@curruri@path}{1}[\pathsuris@curruri@path]
    %}{}%
    %
    %\edef\pathsuris@curruri@path{\cpath{\pathsuris@curruri@path}}%
    \ifx\pathsuris@prefix@temp\@empty\else%
        \expandafter\edef\csname \pathsuris@prefix@temp scheme\endcsname{\pathsuris@curruri@scheme}%
        \expandafter\edef\csname \pathsuris@prefix@temp authority\endcsname{\pathsuris@curruri@authority}%
        \expandafter\edef\csname \pathsuris@prefix@temp path\endcsname{\pathsuris@curruri@path}%
        \expandafter\edef\csname \pathsuris@prefix@temp query\endcsname{\pathsuris@curruri@query}%
        \expandafter\edef\csname \pathsuris@prefix@temp fragment\endcsname{\pathsuris@curruri@fragment}%
    \fi%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\seturi}
%    \begin{macrocode}
\newrobustcmd\seturi[1][]{%
    \pathsuris@setcatcodes%
    \expandafter\pathsuris@resetcatcodes\seturi@[#1]%
}
%</package>
%    \end{macrocode}
% \end{macro}
%
% \Finale
% \endinput
%%% Local Variables:
%%% mode: doctex
%%% TeX-master: t
%%% End:

%  LocalWords:  iffalse canonicalizer NeedsTeXFormat pathsuris pathsuris.dtx texttt Jinbo
%  LocalWords:  omdoc.sty defpath tableofcontents ednote cname csname exf:importmodule
%  LocalWords:  OPaths latexml Canonicalization canonicalized cpath cpath canonizalized
%  LocalWords:  bbb bbb bbb printbibliography sec:impl xstring forloop etoolbox endcsname
%  LocalWords:  newcommand newrobustcmd expandafter AddrNum Addri Addrii Cutable ifx Addr
%  LocalWords:  newcounter stepcounter setcounter ifnum addtocounter doctex stex-base

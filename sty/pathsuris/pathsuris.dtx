% \iffalse meta-comment
% A path canonicalizer
%
% The original of this file is in the public repository at 
% http://github.com/sLaTeX/sTeX/
% \fi
%  
% \iffalse
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{pathsuris}[2020/09/30 v2.1 Paths and URIs for sTeX]
%
%<*driver>
\documentclass{ltxdoc}
\usepackage[utf8]{inputenc}
\usepackage{pathsuris,stex-logo}
\usepackage{url,array,float,textcomp}
\usepackage[show]{ed}
\usepackage[hyperref=auto,style=alphabetic]{biblatex}
\addbibresource{kwarcpubs.bib}
\addbibresource{extpubs.bib}
\addbibresource{kwarccrossrefs.bib}
\addbibresource{extcrossrefs.bib}
\def\scsys#1{{{\sc #1}}\index{#1@{\sc #1}}\xspace}
\def\latexml{\scsys{LaTeXML}}
\begin{document}
\RecordChanges
\DocInput{pathsuris.dtx}
\end{document} 
%</driver>
% \fi
%
% \iffalse\CheckSum{113}\fi
%
% \changes{v1.0}{2015/11/16}{First Version with Documentation}
% \changes{v1.1}{2016/02/18}{adding \texttt{\textbackslash baseURI} from
% \texttt{omdoc.sty} and \texttt{\textbackslash defpath} from \texttt{modules.sty}}
% 
% \GetFileInfo{pathsuris.sty}
% 

% \MakeShortVerb{\|}
%
% \title{\texttt{pathsuris.sty}: Paths and URIs for \sTeX \thanks{Version {\fileversion} (last revised
%        {\filedate})}}
% \author{Jinbo Zhang, Michael Kohlhase, Dennis M\"uller\\
%         FAU Erlangen-N\"urnberg}
% \maketitle
% 
% \begin{abstract}
%   This package provides macros to deal with paths and base URIs for \sTeX. In
%   particular, it offers a path canonicalizer, which is used in package |modules|, in
%   order to support modules specified with relative path.
% \end{abstract} 
% 
% \tableofcontents
% \newpage
% 
% \section{User Interface}\label{sec:user}
%
% \subsection{Base URIs}\label{sec:user:baseURI}
%
% \DescribeMacro{\baseURI}|\baseURI|\ednote{document it}
%
% \subsection{Using Absolute Paths}\label{sec:user:abspath}
%
% Finally, the separation of documents into multiple modules often profits from a symbolic
% management of file paths. To simplify this, the |modules| package supplies the
% \DescribeMacro{\defpath}|\defpath| macro:
% |\defpath[|\meta{baseURI}|]{|\meta{cname}|}{|\meta{path}|}| defines a command, so that
% |\|\meta{csname}|{|\meta{name}|}| expands to \meta{path}|/|\meta{name}. So we could have
% used
% \begin{verbatim}
% \defpath{OPaths}{../other}
% \importmodule[load=\OPahts{bar}]{bar}
% \end{verbatim}
% instead of the second line in Example~\ref{exf:importmodule}. The variant |\OPaths| has
% the big advantage that we can get around the fact that {\TeX/\LaTeX} does not set the
% current directory in |\input|, so that we can use systematically deployed
% |\defpath|-defined path macros to make modules relocatable by defining the path macros
% locally. The optional parameter \meta{baseURI} is for the {\latexml} transformation,
% which (if \meta{baseURI} is specified) resolves \meta{path} to an absolute URI according
% to \cite[section 5.2]{BerFieMas:05}.
% 
% \subsection{Path Canonicalization}\label{sec:user:cpath}
%
% By calling |\@cpath{|\meta{path}|}|, the canonicalized path will be stored in |\@CanPath|.\\
% To print a canonicalized path, simply use
% \DescribeMacro{\cpath}|\cpath{|\meta{path}|}|. Here is a set of examples with their
% canonizalized paths for testing.
% \begin{center}
% \begin{tabular}{|l|l|l|}\hline
%   path & canonicalized path & expected\\\hline
%   aaa & \cpath{aaa} & aaa \\
%   ../../aaa & \cpath{../../aaa} &  ../../aaa\\
%   aaa/bbb & \cpath{aaa/bbb} & aaa/bbb \\
%   aaa/.. & \cpath{aaa/..} &\\
%   ../../aaa/bbb & \cpath{../../aaa/bbb} & ../../aaa/bbb\\
%   ../aaa/../bbb & \cpath{../aaa/../bbb} & ../bbb \\
%   ../aaa/bbb & \cpath{../aaa/bbb} &  ../aaa/bbb\\
%   aaa/bbb/../ddd & \cpath{aaa/bbb/../ddd} & aaa/ddd\\
%   aaa/bbb/./ddd & \cpath{aaa/bbb/./ddd} & aaa/bbb/ddd\\
%   ./ & \cpath{./} & \\
%   aaa/bbb/../.. & \cpath{aaa/bbb/../..} & \\\hline
% \end{tabular}
% \end{center}
%
%\subsection{URIs}\label{sec:user:uri}
%
% By calling |\seturi[\meta{macroname}]{|\meta{path}|}|, the 
% URI will be split into its components |\macronamescheme|, |\macronameauthority|,
% |\macronamepath|, |\macronamequery| and |\macronamefragment|, and the resolved
% URI itself is stored in |\macronameuri|, as in the
% following example. If the optional
% |macroname| is not provided, the default name is |pathsuris@curruri@|.
%
% In order to differentiate between empty and missing components, a missing
% component will be equal to |\makeuri@empty|, whose \emph{expansion} is |\relax|.
%
% \begin{center}
% |\seturi[myuri]{http://this.isatest/foo/bar/?query#fragment}|
% \seturi[myuri]{http://this.isatest/foo/bar/?query#fragment}
%
% yields:
% \begin{tabular}{|l|l|}\hline
%   macro & value \\\hline
%   |\myuriuri| &   \myuriuri \\
%   |\myurischeme| & \myurischeme \\
%   |\myuriauthority| & \myuriauthority \\
%   |\myuripath| & \myuripath \\
%   |\myuriquery| & \myuriquery \\
%   |\myurifragment| & \myurifragment \\\hline
% \end{tabular}
% \end{center}
%
% |\makeuri{\meta{scheme}}{\meta{authority}}{\meta{path}}{\meta{query}}{\meta{fragment}}|
% constructs a URI from its individual components. The (expanded and resolved) individual
% components will be stored in |\makeuri@scheme|, |\makeuri@authority|, etc.; the
% resolved URI will be stored in |\makeuri@uri|.
%
% |\asuri{\meta{macroname}}{\meta{uri}}|, similarly to setpath, defines a new 
% macro |\macroname[\meta{newmacroname}]{\meta{command}}| that allows manipulating 
% |uri| in various ways. |\asuri| calls |\seturi[\meta{macroname}]{\meta{uri}}|,
% so the individual components and full uri (as string) are subsequently stored in
% |\macronamescheme|, |\macronameauthority|, etc.
%
% If an optional new macro name is given in |\macroname|, then the result of the
% modification is stored in that new macro, as if defined via |\asuri|; otherwise, the macro
% is modified ``in place''.
%\begin{itemize}
%   \item |\macroname{drop query}| drops the query component.
%   \item |\macroname{drop fragment}| drops the fragment component.
%   \item |\macroname{/other/path}| drops query and fragment, appends |other/path| to the
%       path and resolves the URI.
%   \item |\macroname{?newquery}| drops the fragment and either declares |newquery| as
%       a new query component, or appends |?newquery| to the existing query component, if
%       it is not |\makeuri@empty|. Note, that this behaviour diverges from the official
%       URI specification, but it conforms to MMT URI's, which use ? as separator between
%       DPaths, modules names and declaration names.
%   \item |\macroname{#newfragment}| analogously to |{?newquery}|. 
%\end{itemize}
%
% 
% \StopEventually{\newpage\PrintIndex\newpage\PrintChanges\newpage\printbibliography}\newpage
%
% \section{The Implementation}\label{sec:impl}
% 
%    \begin{macrocode}
%<*package>
\RequirePackage{stex-base}
\RequirePackage{xstring}
\RequirePackage{etoolbox}
%    \end{macrocode}
%
% \subsection{Base URIs}\label{sec:impl:baseURI}
%
% \begin{macro}{\baseURI}
%   On the {\LaTeX} side we do nothing (for the moment).
%    \begin{macrocode}
\newcommand\baseURI[2][]{}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Using Absolute Paths}\label{sec:impl:abspath}
%
% \begin{macro}{\defpath}
%  |\defpath[optional argument]{macro name}{base path}| defines a new macro which can take another path to formal one integrated path. For example, |\MathHub| in every |localpaths.tex| is defined as:
% \begin{center}
% |\defpath{MathHub}{/path/to/localmh/MathHub}|
% \end{center}
% then we can use |\MathHub| to form other paths, for example, 
% \begin{center}
% |\MathHub{source/smglom/sets}|
% \end{center}
%  will generate |/path/to/localmh/MathHub/source/smglom/sets|.
%    \begin{macrocode}
\newrobustcmd\defpath[3][]{%
  \expandafter\newcommand\csname #2\endcsname[1]{#3/##1}%
}%
%    \end{macrocode}
% \end{macro}
%
% \subsection{Path Canonicalization}\label{sec:impl:cpath}
% 
% We define two macros for changing the category codes of common
% characters in URIs, in particular \#.
%    \begin{macrocode}
\def\pathsuris@setcatcodes{%
    \edef\pathsuris@oldcatcode@hash{\the\catcode`\#}%
    \catcode`\#=12\relax%
    \edef\pathsuris@oldcatcode@slash{\the\catcode`\/}%
    \catcode`\/=12\relax%
    \edef\pathsuris@oldcatcode@colon{\the\catcode`\:}%
    \catcode`\:=12\relax%
    \edef\pathsuris@oldcatcode@qm{\the\catcode`\?}%
    \catcode`\?=12\relax%
}
\def\pathsuris@resetcatcodes{%
    \catcode`\#\pathsuris@oldcatcode@hash\relax%
    \catcode`\/\pathsuris@oldcatcode@slash\relax%
    \catcode`\:\pathsuris@oldcatcode@colon\relax%
    \catcode`\?\pathsuris@oldcatcode@qm\relax%
}
%    \end{macrocode}
%
% We define some macros for later comparison.
%    \begin{macrocode}
\def\@ToTop{..}
\def\@Slash{/}
\def\@Colon{:}
\def\@QuestionMark{?}
\def\@Dot{.}

\pathsuris@setcatcodes
\def\@Fragment{#}
\pathsuris@resetcatcodes
%    \end{macrocode}
% Implement |\@cpath|.
%
% \begin{macro}{\@cpath}
%    \begin{macrocode}
\def\@cpath#1{%
    \edef\pathsuris@cpath@temp{#1}%
    \def\@CanPath{}%
    \IfBeginWith\pathsuris@cpath@temp\@Slash{%
      \@cpath@loop%
      \edef\@CanPath{\@Slash\@CanPath}%
    }{%
        \IfBeginWith\pathsuris@cpath@temp{\@Dot\@Slash}{%
            \StrGobbleLeft\pathsuris@cpath@temp2[\pathsuris@cpath@temp]%
            \@cpath@loop%
        }{%
            \ifx\pathsuris@cpath@temp\@Dot\else%
            \@cpath@loop\fi%
        }%
    }%
    \IfEndWith\@CanPath\@Slash{%
      \ifx\@CanPath\@Slash\else%
        \StrGobbleRight\@CanPath1[\@CanPath]%
      \fi%
    }{}%
}

\def\@cpath@loop{%
    \IfSubStr\pathsuris@cpath@temp\@Slash{%
        \StrCut\pathsuris@cpath@temp\@Slash\pathsuris@cpath@temp@a\pathsuris@cpath@temp%
        \ifx\pathsuris@cpath@temp@a\@ToTop%
            \ifx\@CanPath\@empty%
                \edef\@CanPath{\@ToTop}%
            \else%
                \edef\@CanPath{\@CanPath\@Slash\@ToTop}%
            \fi%
            \@cpath@loop%
        \else%
        \ifx\pathsuris@cpath@temp@a\@Dot%
            \@cpath@loop%
        \else%
        \IfBeginWith\pathsuris@cpath@temp\@ToTop{%
            \StrBehind{\pathsuris@cpath@temp}{\@ToTop}[\pathsuris@cpath@temp]%
            \IfBeginWith\pathsuris@cpath@temp\@Slash{%
                \edef\pathsuris@cpath@temp{\@CanPath\pathsuris@cpath@temp}%
            }{%
                \ifx\@CanPath\@empty\else%
                    \edef\pathsuris@cpath@temp{\@CanPath\@Slash\pathsuris@cpath@temp}
                \fi%
            }%
            \def\@CanPath{}%
            \@cpath@loop%
        }{%
            \ifx\@CanPath\@empty%
                \edef\@CanPath{\pathsuris@cpath@temp@a}%
            \else%
                \edef\@CanPath{\@CanPath\@Slash\pathsuris@cpath@temp@a}%
            \fi%
            \@cpath@loop
        }%
        \fi\fi%
    }{
        \ifx\@CanPath\@empty%
            \edef\@CanPath{\pathsuris@cpath@temp}%
        \else%
            \edef\@CanPath{\@CanPath\@Slash\pathsuris@cpath@temp}%
        \fi%
    }%
}
%    \end{macrocode}
% \end{macro}
%
% Implement |\cpath| to print the canonicalized path.
%
% \begin{macro}{\cpath}
%    \begin{macrocode}
\newcommand\cpath[1]{%
    \@cpath{#1}%
    \@CanPath%
}
%    \end{macrocode}
% \end{macro}
% \subsection{URIs}\label{sec:impl:uri}
% Various macros for dealing with URIs. To deal with empty URI components (scheme, authority, etc.),
% we use |{\relax}| to signify an non-existent component as oppsed to an empty one.
%    \begin{macrocode}
\def\makeuri@setempty#1{\def#1{\relax}}
\def\makeuri@empty{\relax}
\def\makeuri@test#1{%
    \ifx#1\makeuri@empty\else#1\fi%
}
%    \end{macrocode}
%\begin{macro}{\makeuri}
% |\makeuri| constructs a URI from scheme, authority, path, query and fragment separately.
%    \begin{macrocode}
\def\makeuri@uri{}
\def\makeuri#1#2#3#4#5{
    \edef\makeuri@scheme{#1}
    \edef\makeuri@authority{#2}
    \edef\makeuri@path{#3}
    \ifx\makeuri@path\makeuri@empty\else
        \@cpath{#3}
        \edef\makeuri@path{\@CanPath}
    \fi
    \edef\makeuri@query{#4}
    \edef\makeuri@fragment{#5}
    \ifx\makeuri@scheme\makeuri@empty\else
        \edef\makeuri@scheme{\makeuri@scheme\@Colon}
    \fi
    \ifx\makeuri@authority\makeuri@empty\else
        \edef\makeuri@authority{\@Slash\@Slash\makeuri@authority}
        \ifx\makeuri@path\makeuri@empty\else
            \IfBeginWith\makeuri@path\@Slash{}{
                \edef\makeuri@path{\@Slash\makeuri@path}
            }
        \fi
    \fi
    \ifx\makeuri@query\makeuri@empty\else
        \edef\makeuri@query{\@QuestionMark\makeuri@query}
    \fi
    \ifx\makeuri@fragment\makeuri@empty\else
        \edef\makeuri@fragment{\@Fragment\makeuri@fragment}
    \fi
    \edef\makeuri@uri{%
        \makeuri@test\makeuri@scheme%
        \makeuri@test\makeuri@authority%
        \makeuri@test\makeuri@path%
        \makeuri@test\makeuri@query%
        \makeuri@test\makeuri@fragment%
    }
}
%    \end{macrocode}
%\end{macro}
% \begin{macro}{\seturi@}
%    \begin{macrocode}
\newif\if@pathsuris@done@
\def\seturi@[#1]#2{%
    \@pathsuris@done@false%
    \def\pathsuris@prefix@temp{#1}
    \edef\pathsuris@curruri{#2}%
    \edef\pathsuris@curruri{\expandafter\detokenize\expandafter{\pathsuris@curruri}}
    \let\pathsuris@temp\pathsuris@curruri%
    \makeuri@setempty\pathsuris@curruri@scheme%
    \makeuri@setempty\pathsuris@curruri@authority%
    \makeuri@setempty\pathsuris@curruri@path%
    \makeuri@setempty\pathsuris@curruri@query%
    \makeuri@setempty\pathsuris@curruri@fragment%
    % scheme
    \IfSubStr{\pathsuris@temp}{\@Colon}{%
        % TODO check for valid scheme
        \StrBefore{\pathsuris@temp}{\@Colon}[\pathsuris@curruri@scheme]%
        \StrBehind{\pathsuris@temp}{\@Colon}[\pathsuris@temp]%
    }{}%
    % authority
    \IfBeginWith{\pathsuris@temp}{\@Slash\@Slash}{%
        \StrBehind{\pathsuris@temp}{\@Slash\@Slash}[\pathsuris@temp]%
        \IfSubStr{\pathsuris@temp}{\@Slash}{%
            \StrBefore{\pathsuris@temp}{\@Slash}[\pathsuris@curruri@authority]%
            \StrBehind{\pathsuris@temp}{\@Slash}[\pathsuris@temp]%
            % TODO userinfo,host,port
        }{%
            \IfSubStr\pathsuris@temp\@QuestionMark{
                \StrBefore{\pathsuris@temp}{\@QuestionMark}[\pathsuris@curruri@authority]%
                \StrBehind{\pathsuris@temp}{\@QuestionMark}[\pathsuris@temp]%
                \edef\pathsuris@temp{\@QuestionMark\pathsuris@temp}%
            }{
                \IfSubStr\pathsuris@temp\@Fragment{
                    \StrBefore{\pathsuris@temp}{\@Fragment}[\pathsuris@curruri@authority]%
                    \StrBehind{\pathsuris@temp}{\@Fragment}[\pathsuris@temp]%
                    \edef\pathsuris@temp{\@Fragment\pathsuris@temp}%
                }{
                    \edef\pathsuris@curruri@authority{\pathsuris@temp}%
                    \@pathsuris@done@true%
                }
            }
        }%
    }{}%
    % path, query, fragment
    \if@pathsuris@done@\else%
        \IfSubStr{\pathsuris@temp}{\@QuestionMark}{%
            % path
            \StrBefore{\pathsuris@temp}{\@QuestionMark}[\pathsuris@curruri@path]%
            \@cpath\pathsuris@curruri@path%
            \edef\pathsuris@curruri@path{\@CanPath}%
            \StrBehind{\pathsuris@temp}{\@QuestionMark}[\pathsuris@temp]%
            % query,fragment
            \IfSubStr{\pathsuris@temp}{\@Fragment}{%
                \StrBefore{\pathsuris@temp}{\@Fragment}[\pathsuris@curruri@query]%
                \StrBehind{\pathsuris@temp}{\@Fragment}[\pathsuris@curruri@fragment]%
            }{%
                \edef\pathsuris@curruri@query{\pathsuris@temp}%
            }%
        }{%
            % path,fragment
            \IfSubStr{\pathsuris@temp}{\@Fragment}{%
                \StrBefore{\pathsuris@temp}{\@Fragment}[\pathsuris@curruri@path]%
                \@cpath\pathsuris@curruri@path%
                \edef\pathsuris@curruri@path{\@CanPath}%
                \StrBehind{\pathsuris@temp}{\@Fragment}[\pathsuris@curruri@fragment]%
            }{%
                \edef\pathsuris@curruri@path{\pathsuris@temp}%
            }%
        }%
    \fi%
    \makeuri\pathsuris@curruri@scheme\pathsuris@curruri@authority\pathsuris@curruri@path\pathsuris@curruri@query\pathsuris@curruri@fragment%
    \let\pathsuris@curruri@uri\makeuri@uri
    %drop trailing slash of path
    %\IfEndWith{\pathsuris@curruri@path}{\@Slash}{%
    %    \StrGobbleRight{\pathsuris@curruri@path}{1}[\pathsuris@curruri@path]
    %}{}%
    %
    %\edef\pathsuris@curruri@path{\cpath{\pathsuris@curruri@path}}%
    \ifx\pathsuris@prefix@temp\@empty\else%
        \expandafter\let\csname \pathsuris@prefix@temp scheme\endcsname\pathsuris@curruri@scheme%
        \expandafter\let\csname \pathsuris@prefix@temp authority\endcsname\pathsuris@curruri@authority%
        \expandafter\let\csname \pathsuris@prefix@temp path\endcsname\pathsuris@curruri@path%
        \expandafter\let\csname \pathsuris@prefix@temp query\endcsname\pathsuris@curruri@query%
        \expandafter\let\csname \pathsuris@prefix@temp fragment\endcsname\pathsuris@curruri@fragment%
        \expandafter\let\csname \pathsuris@prefix@temp uri\endcsname\pathsuris@curruri@uri%
    \fi%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\seturi}
%    \begin{macrocode}
\newrobustcmd\seturi[1][]{%
    \pathsuris@setcatcodes%
    \expandafter\pathsuris@resetcatcodes\seturi@[#1]%
}
%    \end{macrocode}
% \end{macro}
%
%\begin{macro}{\asuri}
% |\asuri{macroname}{uri}| generates |\macroname[optional new macro name]{action}|, that allows for modifying |uri| in various
% ways. 
%
%    \begin{macrocode}

\def\asuri#1{%
    \pathsuris@setcatcodes%
    \expandafter\pathsuris@resetcatcodes\@asuri[#1]%
}

\def\@asuri[#1]#2{
    \@cpath{#2}
    \expandafter\def\csname #1\endcsname{}
    \expandafter\edef\csname #1uri\endcsname{\@CanPath}
    \seturi[#1]{\@CanPath}
    \expandafter\renewcommand\csname #1\endcsname[1][]{%
        \pathsuris@setcatcodes%
        \@@asuri@[##1]{#1}%
    }%
}

\protected\def\@@asuri@[#1]#2#3{
    \pathsuris@resetcatcodes
    \@@asuri[#1]{#2}{#3}
}

\newif\if@asuri@changed@
\protected\def\@@asuri[#1]#2#3{
    \@asuri@changed@false
    \edef\@@asuri@command{#3}
    \trimstring\@@asuri@command
    \IfBeginWith\@@asuri@command{drop}{
        \StrBehind{\@@asuri@command}{drop}[\@@asuri@command]
        \trimstring\@@asuri@command
        \IfStrEq\@@asuri@command{query}{
            \makeuri{\csname #2scheme\endcsname}%
                {\csname #2authority\endcsname}%
                {\csname #2path\endcsname}%
                \makeuri@empty%
                {\csname #2fragment\endcsname}%
            \@asuri@changed@true
        }{
        \IfStrEq\@@asuri@command{fragment}{
            \makeuri{\csname #2scheme\endcsname}%
                {\csname #2authority\endcsname}%
                {\csname #2path\endcsname}%
                {\csname #2query\endcsname}%
                \makeuri@empty%
            \@asuri@changed@true
        }{
        \IfStrEq\@@asuri@command{extension}{
            \edef\@asuri@oldpath{\csname #2path\endcsname}
            \StrCount\@asuri@oldpath.[\@asuri@lastdot]
            \ifnum\@asuri@lastdot>0
                \StrBehind[\@asuri@lastdot]\@asuri@oldpath.[\@asuri@extension]
                \IfSubStr\@asuri@extension\@Slash{}{
                    \StrBefore[\@asuri@lastdot]\@asuri@oldpath.[\@asuri@oldpath]
                }
            \fi
            \makeuri{\csname #2scheme\endcsname}%
                {\csname #2authority\endcsname}%
                \@asuri@oldpath%
                \makeuri@empty%
                \makeuri@empty%
            \@asuri@changed@true
        }{}}}
    }{
    \IfBeginWith\@@asuri@command{\@Slash}{
        \@cpath{\csname #2path\endcsname\@@asuri@command}
        \makeuri{\csname #2scheme\endcsname}%
            {\csname #2authority\endcsname}%
            {\@CanPath}%
            \makeuri@empty%
            \makeuri@empty%
        \@asuri@changed@true
    }{
    \IfBeginWith\@@asuri@command{\@QuestionMark}{
        \expandafter\ifx\csname #2query\endcsname\makeuri@empty
            \StrBehind\@@asuri@command\@QuestionMark[\@@asuri@command]
            \edef\@@asuri@nquery{\@@asuri@command}
        \else
            \edef\@@asuri@nquery{\csname #2query\endcsname\@@asuri@command}
        \fi
        \makeuri{\csname #2scheme\endcsname}%
            {\csname #2authority\endcsname}%
            {\csname #2path\endcsname}%
            {\@@asuri@nquery}%
            \makeuri@empty%
        \@asuri@changed@true
    }{
    \IfBeginWith\@@asuri@command{\@Fragment}{
        \expandafter\ifx\csname #2fragment\endcsname\makeuri@empty
            \StrBehind\@@asuri@command\@Fragment[\@@asuri@command]
            \edef\@@asuri@nfrag{\@@asuri@command}
        \else
            \edef\@@asuri@nfrag{\csname #2fragment\endcsname\@@asuri@command}
        \fi
        \makeuri{\csname #2scheme\endcsname}%
            {\csname #2authority\endcsname}%
            {\csname #2path\endcsname}%
            {\csname #2query\endcsname}%
            {\@@asuri@nfrag}%
        \@asuri@changed@true
    }{}
    }}}
    \edef\@@asuri@ncs{#1}
    \if@asuri@changed@
        \ifx\@@asuri@ncs\@empty
            \asuri{#2}\makeuri@uri
        \else
            \asuri\@@asuri@ncs\makeuri@uri
        \fi
    \fi
}

%    \end{macrocode}
%\end{macro}
%
% auxiliary code:
%
%    \begin{macrocode}

%</package>
%    \end{macrocode}
%
% \Finale
% \endinput
%%% Local Variables:
%%% mode: doctex
%%% TeX-master: t
%%% End:

%  LocalWords:  iffalse canonicalizer NeedsTeXFormat pathsuris pathsuris.dtx texttt Jinbo
%  LocalWords:  omdoc.sty defpath tableofcontents ednote cname csname exf:importmodule
%  LocalWords:  OPaths latexml Canonicalization canonicalized cpath cpath canonizalized
%  LocalWords:  bbb bbb bbb printbibliography sec:impl xstring forloop etoolbox endcsname
%  LocalWords:  newcommand newrobustcmd expandafter AddrNum Addri Addrii Cutable ifx Addr
%  LocalWords:  newcounter stepcounter setcounter ifnum addtocounter doctex stex-base
%  LocalWords:  seturi macronamescheme macronameauthority macronamequery myuri myuriquery
%  LocalWords:  pathsuris@curruri myurischeme myurischeme myuriauthority myuriauthority
%  LocalWords:  myuriquery pathsuris@setcatcodes catcode pathsuris@resetcatcodes newif
%  LocalWords:  userinfo,host,port query,fragment path,fragment trimstring
